// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/version.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Appengine.V1 {

  /// <summary>Holder for reflection information generated from google/appengine/v1/version.proto</summary>
  public static partial class VersionReflection {

    #region Descriptor
    /// <summary>File descriptor for google/appengine/v1/version.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VersionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFnb29nbGUvYXBwZW5naW5lL3YxL3ZlcnNpb24ucHJvdG8SE2dvb2dsZS5h",
            "cHBlbmdpbmUudjEaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aImdv",
            "b2dsZS9hcHBlbmdpbmUvdjEvYXBwX3lhbWwucHJvdG8aIGdvb2dsZS9hcHBl",
            "bmdpbmUvdjEvZGVwbG95LnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRp",
            "b24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ipgoK",
            "B1ZlcnNpb24SDAoEbmFtZRgBIAEoCRIKCgJpZBgCIAEoCRJCChFhdXRvbWF0",
            "aWNfc2NhbGluZxgDIAEoCzIlLmdvb2dsZS5hcHBlbmdpbmUudjEuQXV0b21h",
            "dGljU2NhbGluZ0gAEjoKDWJhc2ljX3NjYWxpbmcYBCABKAsyIS5nb29nbGUu",
            "YXBwZW5naW5lLnYxLkJhc2ljU2NhbGluZ0gAEjwKDm1hbnVhbF9zY2FsaW5n",
            "GAUgASgLMiIuZ29vZ2xlLmFwcGVuZ2luZS52MS5NYW51YWxTY2FsaW5nSAAS",
            "QQoQaW5ib3VuZF9zZXJ2aWNlcxgGIAMoDjInLmdvb2dsZS5hcHBlbmdpbmUu",
            "djEuSW5ib3VuZFNlcnZpY2VUeXBlEhYKDmluc3RhbmNlX2NsYXNzGAcgASgJ",
            "Ei0KB25ldHdvcmsYCCABKAsyHC5nb29nbGUuYXBwZW5naW5lLnYxLk5ldHdv",
            "cmsSMQoJcmVzb3VyY2VzGAkgASgLMh4uZ29vZ2xlLmFwcGVuZ2luZS52MS5S",
            "ZXNvdXJjZXMSDwoHcnVudGltZRgKIAEoCRISCgp0aHJlYWRzYWZlGAsgASgI",
            "EgoKAnZtGAwgASgIEkUKDWJldGFfc2V0dGluZ3MYDSADKAsyLi5nb29nbGUu",
            "YXBwZW5naW5lLnYxLlZlcnNpb24uQmV0YVNldHRpbmdzRW50cnkSCwoDZW52",
            "GA4gASgJEjoKDnNlcnZpbmdfc3RhdHVzGA8gASgOMiIuZ29vZ2xlLmFwcGVu",
            "Z2luZS52MS5TZXJ2aW5nU3RhdHVzEhIKCmNyZWF0ZWRfYnkYECABKAkSLwoL",
            "Y3JlYXRlX3RpbWUYESABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EhgKEGRpc2tfdXNhZ2VfYnl0ZXMYEiABKAMSLQoIaGFuZGxlcnMYZCADKAsy",
            "Gy5nb29nbGUuYXBwZW5naW5lLnYxLlVybE1hcBI5Cg5lcnJvcl9oYW5kbGVy",
            "cxhlIAMoCzIhLmdvb2dsZS5hcHBlbmdpbmUudjEuRXJyb3JIYW5kbGVyEi8K",
            "CWxpYnJhcmllcxhmIAMoCzIcLmdvb2dsZS5hcHBlbmdpbmUudjEuTGlicmFy",
            "eRI5CgphcGlfY29uZmlnGGcgASgLMiUuZ29vZ2xlLmFwcGVuZ2luZS52MS5B",
            "cGlDb25maWdIYW5kbGVyEkUKDWVudl92YXJpYWJsZXMYaCADKAsyLi5nb29n",
            "bGUuYXBwZW5naW5lLnYxLlZlcnNpb24uRW52VmFyaWFibGVzRW50cnkSNQoS",
            "ZGVmYXVsdF9leHBpcmF0aW9uGGkgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1",
            "cmF0aW9uEjYKDGhlYWx0aF9jaGVjaxhqIAEoCzIgLmdvb2dsZS5hcHBlbmdp",
            "bmUudjEuSGVhbHRoQ2hlY2sSGwoTbm9idWlsZF9maWxlc19yZWdleBhrIAEo",
            "CRIzCgpkZXBsb3ltZW50GGwgASgLMh8uZ29vZ2xlLmFwcGVuZ2luZS52MS5E",
            "ZXBsb3ltZW50EhMKC3ZlcnNpb25fdXJsGG0gASgJGjMKEUJldGFTZXR0aW5n",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMwoRRW52",
            "VmFyaWFibGVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "AUIJCgdzY2FsaW5nItQEChBBdXRvbWF0aWNTY2FsaW5nEjMKEGNvb2xfZG93",
            "bl9wZXJpb2QYASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SPAoP",
            "Y3B1X3V0aWxpemF0aW9uGAIgASgLMiMuZ29vZ2xlLmFwcGVuZ2luZS52MS5D",
            "cHVVdGlsaXphdGlvbhIfChdtYXhfY29uY3VycmVudF9yZXF1ZXN0cxgDIAEo",
            "BRIaChJtYXhfaWRsZV9pbnN0YW5jZXMYBCABKAUSGwoTbWF4X3RvdGFsX2lu",
            "c3RhbmNlcxgFIAEoBRI2ChNtYXhfcGVuZGluZ19sYXRlbmN5GAYgASgLMhku",
            "Z29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEhoKEm1pbl9pZGxlX2luc3RhbmNl",
            "cxgHIAEoBRIbChNtaW5fdG90YWxfaW5zdGFuY2VzGAggASgFEjYKE21pbl9w",
            "ZW5kaW5nX2xhdGVuY3kYCSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRp",
            "b24SRAoTcmVxdWVzdF91dGlsaXphdGlvbhgKIAEoCzInLmdvb2dsZS5hcHBl",
            "bmdpbmUudjEuUmVxdWVzdFV0aWxpemF0aW9uEj4KEGRpc2tfdXRpbGl6YXRp",
            "b24YCyABKAsyJC5nb29nbGUuYXBwZW5naW5lLnYxLkRpc2tVdGlsaXphdGlv",
            "bhJEChNuZXR3b3JrX3V0aWxpemF0aW9uGAwgASgLMicuZ29vZ2xlLmFwcGVu",
            "Z2luZS52MS5OZXR3b3JrVXRpbGl6YXRpb24iVgoMQmFzaWNTY2FsaW5nEi8K",
            "DGlkbGVfdGltZW91dBgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlv",
            "bhIVCg1tYXhfaW5zdGFuY2VzGAIgASgFIiIKDU1hbnVhbFNjYWxpbmcSEQoJ",
            "aW5zdGFuY2VzGAEgASgFImoKDkNwdVV0aWxpemF0aW9uEjwKGWFnZ3JlZ2F0",
            "aW9uX3dpbmRvd19sZW5ndGgYASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVy",
            "YXRpb24SGgoSdGFyZ2V0X3V0aWxpemF0aW9uGAIgASgBImEKElJlcXVlc3RV",
            "dGlsaXphdGlvbhInCh90YXJnZXRfcmVxdWVzdF9jb3VudF9wZXJfc2Vjb25k",
            "GAEgASgFEiIKGnRhcmdldF9jb25jdXJyZW50X3JlcXVlc3RzGAIgASgFIqcB",
            "Cg9EaXNrVXRpbGl6YXRpb24SJQoddGFyZ2V0X3dyaXRlX2J5dGVzX3Blcl9z",
            "ZWNvbmQYDiABKAUSIwobdGFyZ2V0X3dyaXRlX29wc19wZXJfc2Vjb25kGA8g",
            "ASgFEiQKHHRhcmdldF9yZWFkX2J5dGVzX3Blcl9zZWNvbmQYECABKAUSIgoa",
            "dGFyZ2V0X3JlYWRfb3BzX3Blcl9zZWNvbmQYESABKAUiuAEKEk5ldHdvcmtV",
            "dGlsaXphdGlvbhIkChx0YXJnZXRfc2VudF9ieXRlc19wZXJfc2Vjb25kGAEg",
            "ASgFEiYKHnRhcmdldF9zZW50X3BhY2tldHNfcGVyX3NlY29uZBgLIAEoBRIo",
            "CiB0YXJnZXRfcmVjZWl2ZWRfYnl0ZXNfcGVyX3NlY29uZBgMIAEoBRIqCiJ0",
            "YXJnZXRfcmVjZWl2ZWRfcGFja2V0c19wZXJfc2Vjb25kGA0gASgFIkYKB05l",
            "dHdvcmsSFwoPZm9yd2FyZGVkX3BvcnRzGAEgAygJEhQKDGluc3RhbmNlX3Rh",
            "ZxgCIAEoCRIMCgRuYW1lGAMgASgJIjwKCVJlc291cmNlcxILCgNjcHUYASAB",
            "KAESDwoHZGlza19nYhgCIAEoARIRCgltZW1vcnlfZ2IYAyABKAEquwIKEklu",
            "Ym91bmRTZXJ2aWNlVHlwZRIfChtJTkJPVU5EX1NFUlZJQ0VfVU5TUEVDSUZJ",
            "RUQQABIYChRJTkJPVU5EX1NFUlZJQ0VfTUFJTBABEh8KG0lOQk9VTkRfU0VS",
            "VklDRV9NQUlMX0JPVU5DRRACEh4KGklOQk9VTkRfU0VSVklDRV9YTVBQX0VS",
            "Uk9SEAMSIAocSU5CT1VORF9TRVJWSUNFX1hNUFBfTUVTU0FHRRAEEiIKHklO",
            "Qk9VTkRfU0VSVklDRV9YTVBQX1NVQlNDUklCRRAFEiEKHUlOQk9VTkRfU0VS",
            "VklDRV9YTVBQX1BSRVNFTkNFEAYSJAogSU5CT1VORF9TRVJWSUNFX0NIQU5O",
            "RUxfUFJFU0VOQ0UQBxIaChZJTkJPVU5EX1NFUlZJQ0VfV0FSTVVQEAkqSQoN",
            "U2VydmluZ1N0YXR1cxIeChpTRVJWSU5HX1NUQVRVU19VTlNQRUNJRklFRBAA",
            "EgsKB1NFUlZJTkcQARILCgdTVE9QUEVEEAJCZwoXY29tLmdvb2dsZS5hcHBl",
            "bmdpbmUudjFCDFZlcnNpb25Qcm90b1ABWjxnb29nbGUuZ29sYW5nLm9yZy9n",
            "ZW5wcm90by9nb29nbGVhcGlzL2FwcGVuZ2luZS92MTthcHBlbmdpbmViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Appengine.V1.AppYamlReflection.Descriptor, global::Google.Appengine.V1.DeployReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Appengine.V1.InboundServiceType), typeof(global::Google.Appengine.V1.ServingStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.Version), global::Google.Appengine.V1.Version.Parser, new[]{ "Name", "Id", "AutomaticScaling", "BasicScaling", "ManualScaling", "InboundServices", "InstanceClass", "Network", "Resources", "Runtime", "Threadsafe", "Vm", "BetaSettings", "Env", "ServingStatus", "CreatedBy", "CreateTime", "DiskUsageBytes", "Handlers", "ErrorHandlers", "Libraries", "ApiConfig", "EnvVariables", "DefaultExpiration", "HealthCheck", "NobuildFilesRegex", "Deployment", "VersionUrl" }, new[]{ "Scaling" }, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.AutomaticScaling), global::Google.Appengine.V1.AutomaticScaling.Parser, new[]{ "CoolDownPeriod", "CpuUtilization", "MaxConcurrentRequests", "MaxIdleInstances", "MaxTotalInstances", "MaxPendingLatency", "MinIdleInstances", "MinTotalInstances", "MinPendingLatency", "RequestUtilization", "DiskUtilization", "NetworkUtilization" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.BasicScaling), global::Google.Appengine.V1.BasicScaling.Parser, new[]{ "IdleTimeout", "MaxInstances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.ManualScaling), global::Google.Appengine.V1.ManualScaling.Parser, new[]{ "Instances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.CpuUtilization), global::Google.Appengine.V1.CpuUtilization.Parser, new[]{ "AggregationWindowLength", "TargetUtilization" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.RequestUtilization), global::Google.Appengine.V1.RequestUtilization.Parser, new[]{ "TargetRequestCountPerSecond", "TargetConcurrentRequests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.DiskUtilization), global::Google.Appengine.V1.DiskUtilization.Parser, new[]{ "TargetWriteBytesPerSecond", "TargetWriteOpsPerSecond", "TargetReadBytesPerSecond", "TargetReadOpsPerSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.NetworkUtilization), global::Google.Appengine.V1.NetworkUtilization.Parser, new[]{ "TargetSentBytesPerSecond", "TargetSentPacketsPerSecond", "TargetReceivedBytesPerSecond", "TargetReceivedPacketsPerSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.Network), global::Google.Appengine.V1.Network.Parser, new[]{ "ForwardedPorts", "InstanceTag", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.Resources), global::Google.Appengine.V1.Resources.Parser, new[]{ "Cpu", "DiskGb", "MemoryGb" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Available inbound services.
  /// </summary>
  public enum InboundServiceType {
    /// <summary>
    ///  Not specified.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_UNSPECIFIED")] InboundServiceUnspecified = 0,
    /// <summary>
    ///  Allows an application to receive mail.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_MAIL")] InboundServiceMail = 1,
    /// <summary>
    ///  Allows an application to receive email-bound notifications.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_MAIL_BOUNCE")] InboundServiceMailBounce = 2,
    /// <summary>
    ///  Allows an application to receive error stanzas.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_XMPP_ERROR")] InboundServiceXmppError = 3,
    /// <summary>
    ///  Allows an application to receive instant messages.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_XMPP_MESSAGE")] InboundServiceXmppMessage = 4,
    /// <summary>
    ///  Allows an application to receive user subscription POSTs.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_XMPP_SUBSCRIBE")] InboundServiceXmppSubscribe = 5,
    /// <summary>
    ///  Allows an application to receive a user's chat presence.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_XMPP_PRESENCE")] InboundServiceXmppPresence = 6,
    /// <summary>
    ///  Registers an application for notifications when a client connects or
    ///  disconnects from a channel.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_CHANNEL_PRESENCE")] InboundServiceChannelPresence = 7,
    /// <summary>
    ///  Enables warmup requests.
    /// </summary>
    [pbr::OriginalName("INBOUND_SERVICE_WARMUP")] InboundServiceWarmup = 9,
  }

  /// <summary>
  ///  Run states of a version.
  /// </summary>
  public enum ServingStatus {
    /// <summary>
    ///  Not specified.
    /// </summary>
    [pbr::OriginalName("SERVING_STATUS_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///  Currently serving. Instances are created according to the
    ///  scaling settings of the version.
    /// </summary>
    [pbr::OriginalName("SERVING")] Serving = 1,
    /// <summary>
    ///  Disabled. No instances will be created and the scaling
    ///  settings are ignored until the state of the version changes
    ///  to `SERVING`.
    /// </summary>
    [pbr::OriginalName("STOPPED")] Stopped = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  A Version resource is a specific set of source code and configuration files
  ///  that are deployed into a service.
  /// </summary>
  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      inboundServices_ = other.inboundServices_.Clone();
      instanceClass_ = other.instanceClass_;
      Network = other.network_ != null ? other.Network.Clone() : null;
      Resources = other.resources_ != null ? other.Resources.Clone() : null;
      runtime_ = other.runtime_;
      threadsafe_ = other.threadsafe_;
      vm_ = other.vm_;
      betaSettings_ = other.betaSettings_.Clone();
      env_ = other.env_;
      servingStatus_ = other.servingStatus_;
      createdBy_ = other.createdBy_;
      CreateTime = other.createTime_ != null ? other.CreateTime.Clone() : null;
      diskUsageBytes_ = other.diskUsageBytes_;
      handlers_ = other.handlers_.Clone();
      errorHandlers_ = other.errorHandlers_.Clone();
      libraries_ = other.libraries_.Clone();
      ApiConfig = other.apiConfig_ != null ? other.ApiConfig.Clone() : null;
      envVariables_ = other.envVariables_.Clone();
      DefaultExpiration = other.defaultExpiration_ != null ? other.DefaultExpiration.Clone() : null;
      HealthCheck = other.healthCheck_ != null ? other.HealthCheck.Clone() : null;
      nobuildFilesRegex_ = other.nobuildFilesRegex_;
      Deployment = other.deployment_ != null ? other.Deployment.Clone() : null;
      versionUrl_ = other.versionUrl_;
      switch (other.ScalingCase) {
        case ScalingOneofCase.AutomaticScaling:
          AutomaticScaling = other.AutomaticScaling.Clone();
          break;
        case ScalingOneofCase.BasicScaling:
          BasicScaling = other.BasicScaling.Clone();
          break;
        case ScalingOneofCase.ManualScaling:
          ManualScaling = other.ManualScaling.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Full path to the Version resource in the API.  Example:
    ///  `apps/myapp/services/default/versions/v1`.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  Relative name of the version within the service.  Example: `v1`.
    ///  Version names can contain only lowercase letters, numbers, or hyphens.
    ///  Reserved names: "default", "latest", and any name with the prefix "ah-".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "automatic_scaling" field.</summary>
    public const int AutomaticScalingFieldNumber = 3;
    /// <summary>
    ///  Automatic scaling is based on request rate, response latencies, and other
    ///  application metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.AutomaticScaling AutomaticScaling {
      get { return scalingCase_ == ScalingOneofCase.AutomaticScaling ? (global::Google.Appengine.V1.AutomaticScaling) scaling_ : null; }
      set {
        scaling_ = value;
        scalingCase_ = value == null ? ScalingOneofCase.None : ScalingOneofCase.AutomaticScaling;
      }
    }

    /// <summary>Field number for the "basic_scaling" field.</summary>
    public const int BasicScalingFieldNumber = 4;
    /// <summary>
    ///  A service with basic scaling will create an instance when the application
    ///  receives a request. The instance will be turned down when the app becomes
    ///  idle. Basic scaling is ideal for work that is intermittent or driven by
    ///  user activity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.BasicScaling BasicScaling {
      get { return scalingCase_ == ScalingOneofCase.BasicScaling ? (global::Google.Appengine.V1.BasicScaling) scaling_ : null; }
      set {
        scaling_ = value;
        scalingCase_ = value == null ? ScalingOneofCase.None : ScalingOneofCase.BasicScaling;
      }
    }

    /// <summary>Field number for the "manual_scaling" field.</summary>
    public const int ManualScalingFieldNumber = 5;
    /// <summary>
    ///  A service with manual scaling runs continuously, allowing you to perform
    ///  complex initialization and rely on the state of its memory over time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.ManualScaling ManualScaling {
      get { return scalingCase_ == ScalingOneofCase.ManualScaling ? (global::Google.Appengine.V1.ManualScaling) scaling_ : null; }
      set {
        scaling_ = value;
        scalingCase_ = value == null ? ScalingOneofCase.None : ScalingOneofCase.ManualScaling;
      }
    }

    /// <summary>Field number for the "inbound_services" field.</summary>
    public const int InboundServicesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Appengine.V1.InboundServiceType> _repeated_inboundServices_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::Google.Appengine.V1.InboundServiceType) x);
    private readonly pbc::RepeatedField<global::Google.Appengine.V1.InboundServiceType> inboundServices_ = new pbc::RepeatedField<global::Google.Appengine.V1.InboundServiceType>();
    /// <summary>
    ///  Before an application can receive email or XMPP messages, the application
    ///  must be configured to enable the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Appengine.V1.InboundServiceType> InboundServices {
      get { return inboundServices_; }
    }

    /// <summary>Field number for the "instance_class" field.</summary>
    public const int InstanceClassFieldNumber = 7;
    private string instanceClass_ = "";
    /// <summary>
    ///  Instance class that is used to run this version. Valid values are:
    ///  * AutomaticScaling: `F1`, `F2`, `F4`, `F4_1G`
    ///  * ManualScaling or BasicScaling: `B1`, `B2`, `B4`, `B8`, `B4_1G`
    ///
    ///  Defaults to `F1` for AutomaticScaling and `B1` for ManualScaling or
    ///  BasicScaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceClass {
      get { return instanceClass_; }
      set {
        instanceClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 8;
    private global::Google.Appengine.V1.Network network_;
    /// <summary>
    ///  Extra network settings. Only applicable for VM runtimes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.Network Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 9;
    private global::Google.Appengine.V1.Resources resources_;
    /// <summary>
    ///  Machine resources for this version. Only applicable for VM runtimes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "runtime" field.</summary>
    public const int RuntimeFieldNumber = 10;
    private string runtime_ = "";
    /// <summary>
    ///  Desired runtime. Example: `python27`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Runtime {
      get { return runtime_; }
      set {
        runtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "threadsafe" field.</summary>
    public const int ThreadsafeFieldNumber = 11;
    private bool threadsafe_;
    /// <summary>
    ///  Whether multiple requests can be dispatched to this version at once.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Threadsafe {
      get { return threadsafe_; }
      set {
        threadsafe_ = value;
      }
    }

    /// <summary>Field number for the "vm" field.</summary>
    public const int VmFieldNumber = 12;
    private bool vm_;
    /// <summary>
    ///  Whether to deploy this version in a container on a virtual machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vm {
      get { return vm_; }
      set {
        vm_ = value;
      }
    }

    /// <summary>Field number for the "beta_settings" field.</summary>
    public const int BetaSettingsFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_betaSettings_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 106);
    private readonly pbc::MapField<string, string> betaSettings_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  Metadata settings that are supplied to this version to enable
    ///  beta runtime features.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> BetaSettings {
      get { return betaSettings_; }
    }

    /// <summary>Field number for the "env" field.</summary>
    public const int EnvFieldNumber = 14;
    private string env_ = "";
    /// <summary>
    ///  App Engine execution environment for this version.
    ///
    ///  Defaults to `standard`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Env {
      get { return env_; }
      set {
        env_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serving_status" field.</summary>
    public const int ServingStatusFieldNumber = 15;
    private global::Google.Appengine.V1.ServingStatus servingStatus_ = 0;
    /// <summary>
    ///  Current serving status of this version. Only the versions with a
    ///  `SERVING` status create instances and can be billed.
    ///
    ///  `SERVING_STATUS_UNSPECIFIED` is an invalid value. Defaults to `SERVING`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.ServingStatus ServingStatus {
      get { return servingStatus_; }
      set {
        servingStatus_ = value;
      }
    }

    /// <summary>Field number for the "created_by" field.</summary>
    public const int CreatedByFieldNumber = 16;
    private string createdBy_ = "";
    /// <summary>
    ///  Email address of the user who created this version.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedBy {
      get { return createdBy_; }
      set {
        createdBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    ///  Time that this version was created.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "disk_usage_bytes" field.</summary>
    public const int DiskUsageBytesFieldNumber = 18;
    private long diskUsageBytes_;
    /// <summary>
    ///  Total size in bytes of all the files that are included in this version
    ///  and curerntly hosted on the App Engine disk.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskUsageBytes {
      get { return diskUsageBytes_; }
      set {
        diskUsageBytes_ = value;
      }
    }

    /// <summary>Field number for the "handlers" field.</summary>
    public const int HandlersFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Google.Appengine.V1.UrlMap> _repeated_handlers_codec
        = pb::FieldCodec.ForMessage(802, global::Google.Appengine.V1.UrlMap.Parser);
    private readonly pbc::RepeatedField<global::Google.Appengine.V1.UrlMap> handlers_ = new pbc::RepeatedField<global::Google.Appengine.V1.UrlMap>();
    /// <summary>
    ///  An ordered list of URL-matching patterns that should be applied to incoming
    ///  requests. The first matching URL handles the request and other request
    ///  handlers are not attempted.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Appengine.V1.UrlMap> Handlers {
      get { return handlers_; }
    }

    /// <summary>Field number for the "error_handlers" field.</summary>
    public const int ErrorHandlersFieldNumber = 101;
    private static readonly pb::FieldCodec<global::Google.Appengine.V1.ErrorHandler> _repeated_errorHandlers_codec
        = pb::FieldCodec.ForMessage(810, global::Google.Appengine.V1.ErrorHandler.Parser);
    private readonly pbc::RepeatedField<global::Google.Appengine.V1.ErrorHandler> errorHandlers_ = new pbc::RepeatedField<global::Google.Appengine.V1.ErrorHandler>();
    /// <summary>
    ///  Custom static error pages. Limited to 10KB per page.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Appengine.V1.ErrorHandler> ErrorHandlers {
      get { return errorHandlers_; }
    }

    /// <summary>Field number for the "libraries" field.</summary>
    public const int LibrariesFieldNumber = 102;
    private static readonly pb::FieldCodec<global::Google.Appengine.V1.Library> _repeated_libraries_codec
        = pb::FieldCodec.ForMessage(818, global::Google.Appengine.V1.Library.Parser);
    private readonly pbc::RepeatedField<global::Google.Appengine.V1.Library> libraries_ = new pbc::RepeatedField<global::Google.Appengine.V1.Library>();
    /// <summary>
    ///  Configuration for third-party Python runtime libraries that are required
    ///  by the application.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Appengine.V1.Library> Libraries {
      get { return libraries_; }
    }

    /// <summary>Field number for the "api_config" field.</summary>
    public const int ApiConfigFieldNumber = 103;
    private global::Google.Appengine.V1.ApiConfigHandler apiConfig_;
    /// <summary>
    ///  Serving configuration for
    ///  [Google Cloud Endpoints](https://cloud.google.com/appengine/docs/python/endpoints/).
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.ApiConfigHandler ApiConfig {
      get { return apiConfig_; }
      set {
        apiConfig_ = value;
      }
    }

    /// <summary>Field number for the "env_variables" field.</summary>
    public const int EnvVariablesFieldNumber = 104;
    private static readonly pbc::MapField<string, string>.Codec _map_envVariables_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 834);
    private readonly pbc::MapField<string, string> envVariables_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  Environment variables available to the application.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> EnvVariables {
      get { return envVariables_; }
    }

    /// <summary>Field number for the "default_expiration" field.</summary>
    public const int DefaultExpirationFieldNumber = 105;
    private global::Google.Protobuf.WellKnownTypes.Duration defaultExpiration_;
    /// <summary>
    ///  Duration that static files should be cached by web proxies and browsers.
    ///  Only applicable if the corresponding
    ///  [StaticFilesHandler](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#staticfileshandler)
    ///  does not specify its own expiration time.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration DefaultExpiration {
      get { return defaultExpiration_; }
      set {
        defaultExpiration_ = value;
      }
    }

    /// <summary>Field number for the "health_check" field.</summary>
    public const int HealthCheckFieldNumber = 106;
    private global::Google.Appengine.V1.HealthCheck healthCheck_;
    /// <summary>
    ///  Configures health checking for VM instances. Unhealthy instances are
    ///  stopped and replaced with new instances. Only applicable for VM
    ///  runtimes.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.HealthCheck HealthCheck {
      get { return healthCheck_; }
      set {
        healthCheck_ = value;
      }
    }

    /// <summary>Field number for the "nobuild_files_regex" field.</summary>
    public const int NobuildFilesRegexFieldNumber = 107;
    private string nobuildFilesRegex_ = "";
    /// <summary>
    ///  Files that match this pattern will not be built into this version.
    ///  Only applicable for Go runtimes.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NobuildFilesRegex {
      get { return nobuildFilesRegex_; }
      set {
        nobuildFilesRegex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 108;
    private global::Google.Appengine.V1.Deployment deployment_;
    /// <summary>
    ///  Code and application artifacts that make up this version.
    ///
    ///  Only returned in `GET` requests if `view=FULL` is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.Deployment Deployment {
      get { return deployment_; }
      set {
        deployment_ = value;
      }
    }

    /// <summary>Field number for the "version_url" field.</summary>
    public const int VersionUrlFieldNumber = 109;
    private string versionUrl_ = "";
    /// <summary>
    ///  Serving URL for this version. Example:
    ///  "https://myversion-dot-myservice-dot-myapp.appspot.com"
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionUrl {
      get { return versionUrl_; }
      set {
        versionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object scaling_;
    /// <summary>Enum of possible cases for the "scaling" oneof.</summary>
    public enum ScalingOneofCase {
      None = 0,
      AutomaticScaling = 3,
      BasicScaling = 4,
      ManualScaling = 5,
    }
    private ScalingOneofCase scalingCase_ = ScalingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalingOneofCase ScalingCase {
      get { return scalingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaling() {
      scalingCase_ = ScalingOneofCase.None;
      scaling_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (!object.Equals(AutomaticScaling, other.AutomaticScaling)) return false;
      if (!object.Equals(BasicScaling, other.BasicScaling)) return false;
      if (!object.Equals(ManualScaling, other.ManualScaling)) return false;
      if(!inboundServices_.Equals(other.inboundServices_)) return false;
      if (InstanceClass != other.InstanceClass) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (Runtime != other.Runtime) return false;
      if (Threadsafe != other.Threadsafe) return false;
      if (Vm != other.Vm) return false;
      if (!BetaSettings.Equals(other.BetaSettings)) return false;
      if (Env != other.Env) return false;
      if (ServingStatus != other.ServingStatus) return false;
      if (CreatedBy != other.CreatedBy) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (DiskUsageBytes != other.DiskUsageBytes) return false;
      if(!handlers_.Equals(other.handlers_)) return false;
      if(!errorHandlers_.Equals(other.errorHandlers_)) return false;
      if(!libraries_.Equals(other.libraries_)) return false;
      if (!object.Equals(ApiConfig, other.ApiConfig)) return false;
      if (!EnvVariables.Equals(other.EnvVariables)) return false;
      if (!object.Equals(DefaultExpiration, other.DefaultExpiration)) return false;
      if (!object.Equals(HealthCheck, other.HealthCheck)) return false;
      if (NobuildFilesRegex != other.NobuildFilesRegex) return false;
      if (!object.Equals(Deployment, other.Deployment)) return false;
      if (VersionUrl != other.VersionUrl) return false;
      if (ScalingCase != other.ScalingCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (scalingCase_ == ScalingOneofCase.AutomaticScaling) hash ^= AutomaticScaling.GetHashCode();
      if (scalingCase_ == ScalingOneofCase.BasicScaling) hash ^= BasicScaling.GetHashCode();
      if (scalingCase_ == ScalingOneofCase.ManualScaling) hash ^= ManualScaling.GetHashCode();
      hash ^= inboundServices_.GetHashCode();
      if (InstanceClass.Length != 0) hash ^= InstanceClass.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (Runtime.Length != 0) hash ^= Runtime.GetHashCode();
      if (Threadsafe != false) hash ^= Threadsafe.GetHashCode();
      if (Vm != false) hash ^= Vm.GetHashCode();
      hash ^= BetaSettings.GetHashCode();
      if (Env.Length != 0) hash ^= Env.GetHashCode();
      if (ServingStatus != 0) hash ^= ServingStatus.GetHashCode();
      if (CreatedBy.Length != 0) hash ^= CreatedBy.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (DiskUsageBytes != 0L) hash ^= DiskUsageBytes.GetHashCode();
      hash ^= handlers_.GetHashCode();
      hash ^= errorHandlers_.GetHashCode();
      hash ^= libraries_.GetHashCode();
      if (apiConfig_ != null) hash ^= ApiConfig.GetHashCode();
      hash ^= EnvVariables.GetHashCode();
      if (defaultExpiration_ != null) hash ^= DefaultExpiration.GetHashCode();
      if (healthCheck_ != null) hash ^= HealthCheck.GetHashCode();
      if (NobuildFilesRegex.Length != 0) hash ^= NobuildFilesRegex.GetHashCode();
      if (deployment_ != null) hash ^= Deployment.GetHashCode();
      if (VersionUrl.Length != 0) hash ^= VersionUrl.GetHashCode();
      hash ^= (int) scalingCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (scalingCase_ == ScalingOneofCase.AutomaticScaling) {
        output.WriteRawTag(26);
        output.WriteMessage(AutomaticScaling);
      }
      if (scalingCase_ == ScalingOneofCase.BasicScaling) {
        output.WriteRawTag(34);
        output.WriteMessage(BasicScaling);
      }
      if (scalingCase_ == ScalingOneofCase.ManualScaling) {
        output.WriteRawTag(42);
        output.WriteMessage(ManualScaling);
      }
      inboundServices_.WriteTo(output, _repeated_inboundServices_codec);
      if (InstanceClass.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InstanceClass);
      }
      if (network_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Network);
      }
      if (resources_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Resources);
      }
      if (Runtime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Runtime);
      }
      if (Threadsafe != false) {
        output.WriteRawTag(88);
        output.WriteBool(Threadsafe);
      }
      if (Vm != false) {
        output.WriteRawTag(96);
        output.WriteBool(Vm);
      }
      betaSettings_.WriteTo(output, _map_betaSettings_codec);
      if (Env.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Env);
      }
      if (ServingStatus != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ServingStatus);
      }
      if (CreatedBy.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CreatedBy);
      }
      if (createTime_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(CreateTime);
      }
      if (DiskUsageBytes != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(DiskUsageBytes);
      }
      handlers_.WriteTo(output, _repeated_handlers_codec);
      errorHandlers_.WriteTo(output, _repeated_errorHandlers_codec);
      libraries_.WriteTo(output, _repeated_libraries_codec);
      if (apiConfig_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(ApiConfig);
      }
      envVariables_.WriteTo(output, _map_envVariables_codec);
      if (defaultExpiration_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(DefaultExpiration);
      }
      if (healthCheck_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(HealthCheck);
      }
      if (NobuildFilesRegex.Length != 0) {
        output.WriteRawTag(218, 6);
        output.WriteString(NobuildFilesRegex);
      }
      if (deployment_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(Deployment);
      }
      if (VersionUrl.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(VersionUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (scalingCase_ == ScalingOneofCase.AutomaticScaling) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutomaticScaling);
      }
      if (scalingCase_ == ScalingOneofCase.BasicScaling) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicScaling);
      }
      if (scalingCase_ == ScalingOneofCase.ManualScaling) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManualScaling);
      }
      size += inboundServices_.CalculateSize(_repeated_inboundServices_codec);
      if (InstanceClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceClass);
      }
      if (network_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (Runtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Runtime);
      }
      if (Threadsafe != false) {
        size += 1 + 1;
      }
      if (Vm != false) {
        size += 1 + 1;
      }
      size += betaSettings_.CalculateSize(_map_betaSettings_codec);
      if (Env.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Env);
      }
      if (ServingStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServingStatus);
      }
      if (CreatedBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CreatedBy);
      }
      if (createTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (DiskUsageBytes != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DiskUsageBytes);
      }
      size += handlers_.CalculateSize(_repeated_handlers_codec);
      size += errorHandlers_.CalculateSize(_repeated_errorHandlers_codec);
      size += libraries_.CalculateSize(_repeated_libraries_codec);
      if (apiConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ApiConfig);
      }
      size += envVariables_.CalculateSize(_map_envVariables_codec);
      if (defaultExpiration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefaultExpiration);
      }
      if (healthCheck_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealthCheck);
      }
      if (NobuildFilesRegex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NobuildFilesRegex);
      }
      if (deployment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      if (VersionUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VersionUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      inboundServices_.Add(other.inboundServices_);
      if (other.InstanceClass.Length != 0) {
        InstanceClass = other.InstanceClass;
      }
      if (other.network_ != null) {
        if (network_ == null) {
          network_ = new global::Google.Appengine.V1.Network();
        }
        Network.MergeFrom(other.Network);
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          resources_ = new global::Google.Appengine.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.Runtime.Length != 0) {
        Runtime = other.Runtime;
      }
      if (other.Threadsafe != false) {
        Threadsafe = other.Threadsafe;
      }
      if (other.Vm != false) {
        Vm = other.Vm;
      }
      betaSettings_.Add(other.betaSettings_);
      if (other.Env.Length != 0) {
        Env = other.Env;
      }
      if (other.ServingStatus != 0) {
        ServingStatus = other.ServingStatus;
      }
      if (other.CreatedBy.Length != 0) {
        CreatedBy = other.CreatedBy;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.DiskUsageBytes != 0L) {
        DiskUsageBytes = other.DiskUsageBytes;
      }
      handlers_.Add(other.handlers_);
      errorHandlers_.Add(other.errorHandlers_);
      libraries_.Add(other.libraries_);
      if (other.apiConfig_ != null) {
        if (apiConfig_ == null) {
          apiConfig_ = new global::Google.Appengine.V1.ApiConfigHandler();
        }
        ApiConfig.MergeFrom(other.ApiConfig);
      }
      envVariables_.Add(other.envVariables_);
      if (other.defaultExpiration_ != null) {
        if (defaultExpiration_ == null) {
          defaultExpiration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        DefaultExpiration.MergeFrom(other.DefaultExpiration);
      }
      if (other.healthCheck_ != null) {
        if (healthCheck_ == null) {
          healthCheck_ = new global::Google.Appengine.V1.HealthCheck();
        }
        HealthCheck.MergeFrom(other.HealthCheck);
      }
      if (other.NobuildFilesRegex.Length != 0) {
        NobuildFilesRegex = other.NobuildFilesRegex;
      }
      if (other.deployment_ != null) {
        if (deployment_ == null) {
          deployment_ = new global::Google.Appengine.V1.Deployment();
        }
        Deployment.MergeFrom(other.Deployment);
      }
      if (other.VersionUrl.Length != 0) {
        VersionUrl = other.VersionUrl;
      }
      switch (other.ScalingCase) {
        case ScalingOneofCase.AutomaticScaling:
          AutomaticScaling = other.AutomaticScaling;
          break;
        case ScalingOneofCase.BasicScaling:
          BasicScaling = other.BasicScaling;
          break;
        case ScalingOneofCase.ManualScaling:
          ManualScaling = other.ManualScaling;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Appengine.V1.AutomaticScaling subBuilder = new global::Google.Appengine.V1.AutomaticScaling();
            if (scalingCase_ == ScalingOneofCase.AutomaticScaling) {
              subBuilder.MergeFrom(AutomaticScaling);
            }
            input.ReadMessage(subBuilder);
            AutomaticScaling = subBuilder;
            break;
          }
          case 34: {
            global::Google.Appengine.V1.BasicScaling subBuilder = new global::Google.Appengine.V1.BasicScaling();
            if (scalingCase_ == ScalingOneofCase.BasicScaling) {
              subBuilder.MergeFrom(BasicScaling);
            }
            input.ReadMessage(subBuilder);
            BasicScaling = subBuilder;
            break;
          }
          case 42: {
            global::Google.Appengine.V1.ManualScaling subBuilder = new global::Google.Appengine.V1.ManualScaling();
            if (scalingCase_ == ScalingOneofCase.ManualScaling) {
              subBuilder.MergeFrom(ManualScaling);
            }
            input.ReadMessage(subBuilder);
            ManualScaling = subBuilder;
            break;
          }
          case 50:
          case 48: {
            inboundServices_.AddEntriesFrom(input, _repeated_inboundServices_codec);
            break;
          }
          case 58: {
            InstanceClass = input.ReadString();
            break;
          }
          case 66: {
            if (network_ == null) {
              network_ = new global::Google.Appengine.V1.Network();
            }
            input.ReadMessage(network_);
            break;
          }
          case 74: {
            if (resources_ == null) {
              resources_ = new global::Google.Appengine.V1.Resources();
            }
            input.ReadMessage(resources_);
            break;
          }
          case 82: {
            Runtime = input.ReadString();
            break;
          }
          case 88: {
            Threadsafe = input.ReadBool();
            break;
          }
          case 96: {
            Vm = input.ReadBool();
            break;
          }
          case 106: {
            betaSettings_.AddEntriesFrom(input, _map_betaSettings_codec);
            break;
          }
          case 114: {
            Env = input.ReadString();
            break;
          }
          case 120: {
            servingStatus_ = (global::Google.Appengine.V1.ServingStatus) input.ReadEnum();
            break;
          }
          case 130: {
            CreatedBy = input.ReadString();
            break;
          }
          case 138: {
            if (createTime_ == null) {
              createTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createTime_);
            break;
          }
          case 144: {
            DiskUsageBytes = input.ReadInt64();
            break;
          }
          case 802: {
            handlers_.AddEntriesFrom(input, _repeated_handlers_codec);
            break;
          }
          case 810: {
            errorHandlers_.AddEntriesFrom(input, _repeated_errorHandlers_codec);
            break;
          }
          case 818: {
            libraries_.AddEntriesFrom(input, _repeated_libraries_codec);
            break;
          }
          case 826: {
            if (apiConfig_ == null) {
              apiConfig_ = new global::Google.Appengine.V1.ApiConfigHandler();
            }
            input.ReadMessage(apiConfig_);
            break;
          }
          case 834: {
            envVariables_.AddEntriesFrom(input, _map_envVariables_codec);
            break;
          }
          case 842: {
            if (defaultExpiration_ == null) {
              defaultExpiration_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(defaultExpiration_);
            break;
          }
          case 850: {
            if (healthCheck_ == null) {
              healthCheck_ = new global::Google.Appengine.V1.HealthCheck();
            }
            input.ReadMessage(healthCheck_);
            break;
          }
          case 858: {
            NobuildFilesRegex = input.ReadString();
            break;
          }
          case 866: {
            if (deployment_ == null) {
              deployment_ = new global::Google.Appengine.V1.Deployment();
            }
            input.ReadMessage(deployment_);
            break;
          }
          case 874: {
            VersionUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Automatic scaling is based on request rate, response latencies, and other
  ///  application metrics.
  /// </summary>
  public sealed partial class AutomaticScaling : pb::IMessage<AutomaticScaling> {
    private static readonly pb::MessageParser<AutomaticScaling> _parser = new pb::MessageParser<AutomaticScaling>(() => new AutomaticScaling());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutomaticScaling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutomaticScaling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutomaticScaling(AutomaticScaling other) : this() {
      CoolDownPeriod = other.coolDownPeriod_ != null ? other.CoolDownPeriod.Clone() : null;
      CpuUtilization = other.cpuUtilization_ != null ? other.CpuUtilization.Clone() : null;
      maxConcurrentRequests_ = other.maxConcurrentRequests_;
      maxIdleInstances_ = other.maxIdleInstances_;
      maxTotalInstances_ = other.maxTotalInstances_;
      MaxPendingLatency = other.maxPendingLatency_ != null ? other.MaxPendingLatency.Clone() : null;
      minIdleInstances_ = other.minIdleInstances_;
      minTotalInstances_ = other.minTotalInstances_;
      MinPendingLatency = other.minPendingLatency_ != null ? other.MinPendingLatency.Clone() : null;
      RequestUtilization = other.requestUtilization_ != null ? other.RequestUtilization.Clone() : null;
      DiskUtilization = other.diskUtilization_ != null ? other.DiskUtilization.Clone() : null;
      NetworkUtilization = other.networkUtilization_ != null ? other.NetworkUtilization.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutomaticScaling Clone() {
      return new AutomaticScaling(this);
    }

    /// <summary>Field number for the "cool_down_period" field.</summary>
    public const int CoolDownPeriodFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration coolDownPeriod_;
    /// <summary>
    ///  Amount of time that the
    ///  [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
    ///  should wait between changes to the number of virtual machines.
    ///  Only applicable for VM runtimes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration CoolDownPeriod {
      get { return coolDownPeriod_; }
      set {
        coolDownPeriod_ = value;
      }
    }

    /// <summary>Field number for the "cpu_utilization" field.</summary>
    public const int CpuUtilizationFieldNumber = 2;
    private global::Google.Appengine.V1.CpuUtilization cpuUtilization_;
    /// <summary>
    ///  Target scaling by CPU usage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.CpuUtilization CpuUtilization {
      get { return cpuUtilization_; }
      set {
        cpuUtilization_ = value;
      }
    }

    /// <summary>Field number for the "max_concurrent_requests" field.</summary>
    public const int MaxConcurrentRequestsFieldNumber = 3;
    private int maxConcurrentRequests_;
    /// <summary>
    ///  Number of concurrent requests an automatic scaling instance can accept
    ///  before the scheduler spawns a new instance.
    ///
    ///  Defaults to a runtime-specific value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxConcurrentRequests {
      get { return maxConcurrentRequests_; }
      set {
        maxConcurrentRequests_ = value;
      }
    }

    /// <summary>Field number for the "max_idle_instances" field.</summary>
    public const int MaxIdleInstancesFieldNumber = 4;
    private int maxIdleInstances_;
    /// <summary>
    ///  Maximum number of idle instances that should be maintained for this
    ///  version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIdleInstances {
      get { return maxIdleInstances_; }
      set {
        maxIdleInstances_ = value;
      }
    }

    /// <summary>Field number for the "max_total_instances" field.</summary>
    public const int MaxTotalInstancesFieldNumber = 5;
    private int maxTotalInstances_;
    /// <summary>
    ///  Maximum number of instances that should be started to handle requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTotalInstances {
      get { return maxTotalInstances_; }
      set {
        maxTotalInstances_ = value;
      }
    }

    /// <summary>Field number for the "max_pending_latency" field.</summary>
    public const int MaxPendingLatencyFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Duration maxPendingLatency_;
    /// <summary>
    ///  Maximum amount of time that a request should wait in the pending queue
    ///  before starting a new instance to handle it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxPendingLatency {
      get { return maxPendingLatency_; }
      set {
        maxPendingLatency_ = value;
      }
    }

    /// <summary>Field number for the "min_idle_instances" field.</summary>
    public const int MinIdleInstancesFieldNumber = 7;
    private int minIdleInstances_;
    /// <summary>
    ///  Minimum number of idle instances that should be maintained for
    ///  this version. Only applicable for the default version of a service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinIdleInstances {
      get { return minIdleInstances_; }
      set {
        minIdleInstances_ = value;
      }
    }

    /// <summary>Field number for the "min_total_instances" field.</summary>
    public const int MinTotalInstancesFieldNumber = 8;
    private int minTotalInstances_;
    /// <summary>
    ///  Minimum number of instances that should be maintained for this version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinTotalInstances {
      get { return minTotalInstances_; }
      set {
        minTotalInstances_ = value;
      }
    }

    /// <summary>Field number for the "min_pending_latency" field.</summary>
    public const int MinPendingLatencyFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration minPendingLatency_;
    /// <summary>
    ///  Minimum amount of time a request should wait in the pending queue before
    ///  starting a new instance to handle it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MinPendingLatency {
      get { return minPendingLatency_; }
      set {
        minPendingLatency_ = value;
      }
    }

    /// <summary>Field number for the "request_utilization" field.</summary>
    public const int RequestUtilizationFieldNumber = 10;
    private global::Google.Appengine.V1.RequestUtilization requestUtilization_;
    /// <summary>
    ///  Target scaling by request utilization.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.RequestUtilization RequestUtilization {
      get { return requestUtilization_; }
      set {
        requestUtilization_ = value;
      }
    }

    /// <summary>Field number for the "disk_utilization" field.</summary>
    public const int DiskUtilizationFieldNumber = 11;
    private global::Google.Appengine.V1.DiskUtilization diskUtilization_;
    /// <summary>
    ///  Target scaling by disk usage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.DiskUtilization DiskUtilization {
      get { return diskUtilization_; }
      set {
        diskUtilization_ = value;
      }
    }

    /// <summary>Field number for the "network_utilization" field.</summary>
    public const int NetworkUtilizationFieldNumber = 12;
    private global::Google.Appengine.V1.NetworkUtilization networkUtilization_;
    /// <summary>
    ///  Target scaling by network usage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.NetworkUtilization NetworkUtilization {
      get { return networkUtilization_; }
      set {
        networkUtilization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutomaticScaling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutomaticScaling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CoolDownPeriod, other.CoolDownPeriod)) return false;
      if (!object.Equals(CpuUtilization, other.CpuUtilization)) return false;
      if (MaxConcurrentRequests != other.MaxConcurrentRequests) return false;
      if (MaxIdleInstances != other.MaxIdleInstances) return false;
      if (MaxTotalInstances != other.MaxTotalInstances) return false;
      if (!object.Equals(MaxPendingLatency, other.MaxPendingLatency)) return false;
      if (MinIdleInstances != other.MinIdleInstances) return false;
      if (MinTotalInstances != other.MinTotalInstances) return false;
      if (!object.Equals(MinPendingLatency, other.MinPendingLatency)) return false;
      if (!object.Equals(RequestUtilization, other.RequestUtilization)) return false;
      if (!object.Equals(DiskUtilization, other.DiskUtilization)) return false;
      if (!object.Equals(NetworkUtilization, other.NetworkUtilization)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coolDownPeriod_ != null) hash ^= CoolDownPeriod.GetHashCode();
      if (cpuUtilization_ != null) hash ^= CpuUtilization.GetHashCode();
      if (MaxConcurrentRequests != 0) hash ^= MaxConcurrentRequests.GetHashCode();
      if (MaxIdleInstances != 0) hash ^= MaxIdleInstances.GetHashCode();
      if (MaxTotalInstances != 0) hash ^= MaxTotalInstances.GetHashCode();
      if (maxPendingLatency_ != null) hash ^= MaxPendingLatency.GetHashCode();
      if (MinIdleInstances != 0) hash ^= MinIdleInstances.GetHashCode();
      if (MinTotalInstances != 0) hash ^= MinTotalInstances.GetHashCode();
      if (minPendingLatency_ != null) hash ^= MinPendingLatency.GetHashCode();
      if (requestUtilization_ != null) hash ^= RequestUtilization.GetHashCode();
      if (diskUtilization_ != null) hash ^= DiskUtilization.GetHashCode();
      if (networkUtilization_ != null) hash ^= NetworkUtilization.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coolDownPeriod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CoolDownPeriod);
      }
      if (cpuUtilization_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CpuUtilization);
      }
      if (MaxConcurrentRequests != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxConcurrentRequests);
      }
      if (MaxIdleInstances != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxIdleInstances);
      }
      if (MaxTotalInstances != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxTotalInstances);
      }
      if (maxPendingLatency_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MaxPendingLatency);
      }
      if (MinIdleInstances != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MinIdleInstances);
      }
      if (MinTotalInstances != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MinTotalInstances);
      }
      if (minPendingLatency_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MinPendingLatency);
      }
      if (requestUtilization_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RequestUtilization);
      }
      if (diskUtilization_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DiskUtilization);
      }
      if (networkUtilization_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(NetworkUtilization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coolDownPeriod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoolDownPeriod);
      }
      if (cpuUtilization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CpuUtilization);
      }
      if (MaxConcurrentRequests != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxConcurrentRequests);
      }
      if (MaxIdleInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIdleInstances);
      }
      if (MaxTotalInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTotalInstances);
      }
      if (maxPendingLatency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxPendingLatency);
      }
      if (MinIdleInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinIdleInstances);
      }
      if (MinTotalInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinTotalInstances);
      }
      if (minPendingLatency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPendingLatency);
      }
      if (requestUtilization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestUtilization);
      }
      if (diskUtilization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiskUtilization);
      }
      if (networkUtilization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkUtilization);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutomaticScaling other) {
      if (other == null) {
        return;
      }
      if (other.coolDownPeriod_ != null) {
        if (coolDownPeriod_ == null) {
          coolDownPeriod_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        CoolDownPeriod.MergeFrom(other.CoolDownPeriod);
      }
      if (other.cpuUtilization_ != null) {
        if (cpuUtilization_ == null) {
          cpuUtilization_ = new global::Google.Appengine.V1.CpuUtilization();
        }
        CpuUtilization.MergeFrom(other.CpuUtilization);
      }
      if (other.MaxConcurrentRequests != 0) {
        MaxConcurrentRequests = other.MaxConcurrentRequests;
      }
      if (other.MaxIdleInstances != 0) {
        MaxIdleInstances = other.MaxIdleInstances;
      }
      if (other.MaxTotalInstances != 0) {
        MaxTotalInstances = other.MaxTotalInstances;
      }
      if (other.maxPendingLatency_ != null) {
        if (maxPendingLatency_ == null) {
          maxPendingLatency_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MaxPendingLatency.MergeFrom(other.MaxPendingLatency);
      }
      if (other.MinIdleInstances != 0) {
        MinIdleInstances = other.MinIdleInstances;
      }
      if (other.MinTotalInstances != 0) {
        MinTotalInstances = other.MinTotalInstances;
      }
      if (other.minPendingLatency_ != null) {
        if (minPendingLatency_ == null) {
          minPendingLatency_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        MinPendingLatency.MergeFrom(other.MinPendingLatency);
      }
      if (other.requestUtilization_ != null) {
        if (requestUtilization_ == null) {
          requestUtilization_ = new global::Google.Appengine.V1.RequestUtilization();
        }
        RequestUtilization.MergeFrom(other.RequestUtilization);
      }
      if (other.diskUtilization_ != null) {
        if (diskUtilization_ == null) {
          diskUtilization_ = new global::Google.Appengine.V1.DiskUtilization();
        }
        DiskUtilization.MergeFrom(other.DiskUtilization);
      }
      if (other.networkUtilization_ != null) {
        if (networkUtilization_ == null) {
          networkUtilization_ = new global::Google.Appengine.V1.NetworkUtilization();
        }
        NetworkUtilization.MergeFrom(other.NetworkUtilization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coolDownPeriod_ == null) {
              coolDownPeriod_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(coolDownPeriod_);
            break;
          }
          case 18: {
            if (cpuUtilization_ == null) {
              cpuUtilization_ = new global::Google.Appengine.V1.CpuUtilization();
            }
            input.ReadMessage(cpuUtilization_);
            break;
          }
          case 24: {
            MaxConcurrentRequests = input.ReadInt32();
            break;
          }
          case 32: {
            MaxIdleInstances = input.ReadInt32();
            break;
          }
          case 40: {
            MaxTotalInstances = input.ReadInt32();
            break;
          }
          case 50: {
            if (maxPendingLatency_ == null) {
              maxPendingLatency_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(maxPendingLatency_);
            break;
          }
          case 56: {
            MinIdleInstances = input.ReadInt32();
            break;
          }
          case 64: {
            MinTotalInstances = input.ReadInt32();
            break;
          }
          case 74: {
            if (minPendingLatency_ == null) {
              minPendingLatency_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(minPendingLatency_);
            break;
          }
          case 82: {
            if (requestUtilization_ == null) {
              requestUtilization_ = new global::Google.Appengine.V1.RequestUtilization();
            }
            input.ReadMessage(requestUtilization_);
            break;
          }
          case 90: {
            if (diskUtilization_ == null) {
              diskUtilization_ = new global::Google.Appengine.V1.DiskUtilization();
            }
            input.ReadMessage(diskUtilization_);
            break;
          }
          case 98: {
            if (networkUtilization_ == null) {
              networkUtilization_ = new global::Google.Appengine.V1.NetworkUtilization();
            }
            input.ReadMessage(networkUtilization_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A service with basic scaling will create an instance when the application
  ///  receives a request. The instance will be turned down when the app becomes
  ///  idle. Basic scaling is ideal for work that is intermittent or driven by
  ///  user activity.
  /// </summary>
  public sealed partial class BasicScaling : pb::IMessage<BasicScaling> {
    private static readonly pb::MessageParser<BasicScaling> _parser = new pb::MessageParser<BasicScaling>(() => new BasicScaling());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicScaling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicScaling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicScaling(BasicScaling other) : this() {
      IdleTimeout = other.idleTimeout_ != null ? other.IdleTimeout.Clone() : null;
      maxInstances_ = other.maxInstances_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicScaling Clone() {
      return new BasicScaling(this);
    }

    /// <summary>Field number for the "idle_timeout" field.</summary>
    public const int IdleTimeoutFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration idleTimeout_;
    /// <summary>
    ///  Duration of time after the last request that an instance must wait before
    ///  the instance is shut down.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration IdleTimeout {
      get { return idleTimeout_; }
      set {
        idleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "max_instances" field.</summary>
    public const int MaxInstancesFieldNumber = 2;
    private int maxInstances_;
    /// <summary>
    ///  Maximum number of instances to create for this version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxInstances {
      get { return maxInstances_; }
      set {
        maxInstances_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicScaling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicScaling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IdleTimeout, other.IdleTimeout)) return false;
      if (MaxInstances != other.MaxInstances) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idleTimeout_ != null) hash ^= IdleTimeout.GetHashCode();
      if (MaxInstances != 0) hash ^= MaxInstances.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idleTimeout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IdleTimeout);
      }
      if (MaxInstances != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxInstances);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleTimeout);
      }
      if (MaxInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxInstances);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicScaling other) {
      if (other == null) {
        return;
      }
      if (other.idleTimeout_ != null) {
        if (idleTimeout_ == null) {
          idleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IdleTimeout.MergeFrom(other.IdleTimeout);
      }
      if (other.MaxInstances != 0) {
        MaxInstances = other.MaxInstances;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (idleTimeout_ == null) {
              idleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(idleTimeout_);
            break;
          }
          case 16: {
            MaxInstances = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A service with manual scaling runs continuously, allowing you to perform
  ///  complex initialization and rely on the state of its memory over time.
  /// </summary>
  public sealed partial class ManualScaling : pb::IMessage<ManualScaling> {
    private static readonly pb::MessageParser<ManualScaling> _parser = new pb::MessageParser<ManualScaling>(() => new ManualScaling());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManualScaling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualScaling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualScaling(ManualScaling other) : this() {
      instances_ = other.instances_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualScaling Clone() {
      return new ManualScaling(this);
    }

    /// <summary>Field number for the "instances" field.</summary>
    public const int InstancesFieldNumber = 1;
    private int instances_;
    /// <summary>
    ///  Number of instances to assign to the service at the start. This number
    ///  can later be altered by using the
    ///  [Modules API](https://cloud.google.com/appengine/docs/python/modules/functions)
    ///  `set_num_instances()` function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Instances {
      get { return instances_; }
      set {
        instances_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManualScaling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManualScaling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Instances != other.Instances) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Instances != 0) hash ^= Instances.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instances != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Instances);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Instances);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManualScaling other) {
      if (other == null) {
        return;
      }
      if (other.Instances != 0) {
        Instances = other.Instances;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Instances = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Target scaling by CPU usage.
  /// </summary>
  public sealed partial class CpuUtilization : pb::IMessage<CpuUtilization> {
    private static readonly pb::MessageParser<CpuUtilization> _parser = new pb::MessageParser<CpuUtilization>(() => new CpuUtilization());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpuUtilization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpuUtilization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpuUtilization(CpuUtilization other) : this() {
      AggregationWindowLength = other.aggregationWindowLength_ != null ? other.AggregationWindowLength.Clone() : null;
      targetUtilization_ = other.targetUtilization_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpuUtilization Clone() {
      return new CpuUtilization(this);
    }

    /// <summary>Field number for the "aggregation_window_length" field.</summary>
    public const int AggregationWindowLengthFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration aggregationWindowLength_;
    /// <summary>
    ///  Period of time over which CPU utilization is calculated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration AggregationWindowLength {
      get { return aggregationWindowLength_; }
      set {
        aggregationWindowLength_ = value;
      }
    }

    /// <summary>Field number for the "target_utilization" field.</summary>
    public const int TargetUtilizationFieldNumber = 2;
    private double targetUtilization_;
    /// <summary>
    ///  Target CPU utilization ratio to maintain when scaling. Must be between 0
    ///  and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetUtilization {
      get { return targetUtilization_; }
      set {
        targetUtilization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpuUtilization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpuUtilization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AggregationWindowLength, other.AggregationWindowLength)) return false;
      if (TargetUtilization != other.TargetUtilization) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aggregationWindowLength_ != null) hash ^= AggregationWindowLength.GetHashCode();
      if (TargetUtilization != 0D) hash ^= TargetUtilization.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aggregationWindowLength_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AggregationWindowLength);
      }
      if (TargetUtilization != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TargetUtilization);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aggregationWindowLength_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregationWindowLength);
      }
      if (TargetUtilization != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpuUtilization other) {
      if (other == null) {
        return;
      }
      if (other.aggregationWindowLength_ != null) {
        if (aggregationWindowLength_ == null) {
          aggregationWindowLength_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        AggregationWindowLength.MergeFrom(other.AggregationWindowLength);
      }
      if (other.TargetUtilization != 0D) {
        TargetUtilization = other.TargetUtilization;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (aggregationWindowLength_ == null) {
              aggregationWindowLength_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(aggregationWindowLength_);
            break;
          }
          case 17: {
            TargetUtilization = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Target scaling by request utilization. Only applicable for VM runtimes.
  /// </summary>
  public sealed partial class RequestUtilization : pb::IMessage<RequestUtilization> {
    private static readonly pb::MessageParser<RequestUtilization> _parser = new pb::MessageParser<RequestUtilization>(() => new RequestUtilization());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestUtilization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestUtilization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestUtilization(RequestUtilization other) : this() {
      targetRequestCountPerSecond_ = other.targetRequestCountPerSecond_;
      targetConcurrentRequests_ = other.targetConcurrentRequests_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestUtilization Clone() {
      return new RequestUtilization(this);
    }

    /// <summary>Field number for the "target_request_count_per_second" field.</summary>
    public const int TargetRequestCountPerSecondFieldNumber = 1;
    private int targetRequestCountPerSecond_;
    /// <summary>
    ///  Target requests per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetRequestCountPerSecond {
      get { return targetRequestCountPerSecond_; }
      set {
        targetRequestCountPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_concurrent_requests" field.</summary>
    public const int TargetConcurrentRequestsFieldNumber = 2;
    private int targetConcurrentRequests_;
    /// <summary>
    ///  Target number of concurrent requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConcurrentRequests {
      get { return targetConcurrentRequests_; }
      set {
        targetConcurrentRequests_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestUtilization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestUtilization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetRequestCountPerSecond != other.TargetRequestCountPerSecond) return false;
      if (TargetConcurrentRequests != other.TargetConcurrentRequests) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetRequestCountPerSecond != 0) hash ^= TargetRequestCountPerSecond.GetHashCode();
      if (TargetConcurrentRequests != 0) hash ^= TargetConcurrentRequests.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetRequestCountPerSecond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetRequestCountPerSecond);
      }
      if (TargetConcurrentRequests != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetConcurrentRequests);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetRequestCountPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetRequestCountPerSecond);
      }
      if (TargetConcurrentRequests != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConcurrentRequests);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestUtilization other) {
      if (other == null) {
        return;
      }
      if (other.TargetRequestCountPerSecond != 0) {
        TargetRequestCountPerSecond = other.TargetRequestCountPerSecond;
      }
      if (other.TargetConcurrentRequests != 0) {
        TargetConcurrentRequests = other.TargetConcurrentRequests;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetRequestCountPerSecond = input.ReadInt32();
            break;
          }
          case 16: {
            TargetConcurrentRequests = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Target scaling by disk usage. Only applicable for VM runtimes.
  /// </summary>
  public sealed partial class DiskUtilization : pb::IMessage<DiskUtilization> {
    private static readonly pb::MessageParser<DiskUtilization> _parser = new pb::MessageParser<DiskUtilization>(() => new DiskUtilization());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiskUtilization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskUtilization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskUtilization(DiskUtilization other) : this() {
      targetWriteBytesPerSecond_ = other.targetWriteBytesPerSecond_;
      targetWriteOpsPerSecond_ = other.targetWriteOpsPerSecond_;
      targetReadBytesPerSecond_ = other.targetReadBytesPerSecond_;
      targetReadOpsPerSecond_ = other.targetReadOpsPerSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskUtilization Clone() {
      return new DiskUtilization(this);
    }

    /// <summary>Field number for the "target_write_bytes_per_second" field.</summary>
    public const int TargetWriteBytesPerSecondFieldNumber = 14;
    private int targetWriteBytesPerSecond_;
    /// <summary>
    ///  Target bytes written per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetWriteBytesPerSecond {
      get { return targetWriteBytesPerSecond_; }
      set {
        targetWriteBytesPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_write_ops_per_second" field.</summary>
    public const int TargetWriteOpsPerSecondFieldNumber = 15;
    private int targetWriteOpsPerSecond_;
    /// <summary>
    ///  Target ops written per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetWriteOpsPerSecond {
      get { return targetWriteOpsPerSecond_; }
      set {
        targetWriteOpsPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_read_bytes_per_second" field.</summary>
    public const int TargetReadBytesPerSecondFieldNumber = 16;
    private int targetReadBytesPerSecond_;
    /// <summary>
    ///  Target bytes read per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetReadBytesPerSecond {
      get { return targetReadBytesPerSecond_; }
      set {
        targetReadBytesPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_read_ops_per_second" field.</summary>
    public const int TargetReadOpsPerSecondFieldNumber = 17;
    private int targetReadOpsPerSecond_;
    /// <summary>
    ///  Target ops read per seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetReadOpsPerSecond {
      get { return targetReadOpsPerSecond_; }
      set {
        targetReadOpsPerSecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiskUtilization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiskUtilization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetWriteBytesPerSecond != other.TargetWriteBytesPerSecond) return false;
      if (TargetWriteOpsPerSecond != other.TargetWriteOpsPerSecond) return false;
      if (TargetReadBytesPerSecond != other.TargetReadBytesPerSecond) return false;
      if (TargetReadOpsPerSecond != other.TargetReadOpsPerSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetWriteBytesPerSecond != 0) hash ^= TargetWriteBytesPerSecond.GetHashCode();
      if (TargetWriteOpsPerSecond != 0) hash ^= TargetWriteOpsPerSecond.GetHashCode();
      if (TargetReadBytesPerSecond != 0) hash ^= TargetReadBytesPerSecond.GetHashCode();
      if (TargetReadOpsPerSecond != 0) hash ^= TargetReadOpsPerSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetWriteBytesPerSecond != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TargetWriteBytesPerSecond);
      }
      if (TargetWriteOpsPerSecond != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TargetWriteOpsPerSecond);
      }
      if (TargetReadBytesPerSecond != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TargetReadBytesPerSecond);
      }
      if (TargetReadOpsPerSecond != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TargetReadOpsPerSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetWriteBytesPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetWriteBytesPerSecond);
      }
      if (TargetWriteOpsPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetWriteOpsPerSecond);
      }
      if (TargetReadBytesPerSecond != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetReadBytesPerSecond);
      }
      if (TargetReadOpsPerSecond != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetReadOpsPerSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiskUtilization other) {
      if (other == null) {
        return;
      }
      if (other.TargetWriteBytesPerSecond != 0) {
        TargetWriteBytesPerSecond = other.TargetWriteBytesPerSecond;
      }
      if (other.TargetWriteOpsPerSecond != 0) {
        TargetWriteOpsPerSecond = other.TargetWriteOpsPerSecond;
      }
      if (other.TargetReadBytesPerSecond != 0) {
        TargetReadBytesPerSecond = other.TargetReadBytesPerSecond;
      }
      if (other.TargetReadOpsPerSecond != 0) {
        TargetReadOpsPerSecond = other.TargetReadOpsPerSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 112: {
            TargetWriteBytesPerSecond = input.ReadInt32();
            break;
          }
          case 120: {
            TargetWriteOpsPerSecond = input.ReadInt32();
            break;
          }
          case 128: {
            TargetReadBytesPerSecond = input.ReadInt32();
            break;
          }
          case 136: {
            TargetReadOpsPerSecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Target scaling by network usage. Only applicable for VM runtimes.
  /// </summary>
  public sealed partial class NetworkUtilization : pb::IMessage<NetworkUtilization> {
    private static readonly pb::MessageParser<NetworkUtilization> _parser = new pb::MessageParser<NetworkUtilization>(() => new NetworkUtilization());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkUtilization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkUtilization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkUtilization(NetworkUtilization other) : this() {
      targetSentBytesPerSecond_ = other.targetSentBytesPerSecond_;
      targetSentPacketsPerSecond_ = other.targetSentPacketsPerSecond_;
      targetReceivedBytesPerSecond_ = other.targetReceivedBytesPerSecond_;
      targetReceivedPacketsPerSecond_ = other.targetReceivedPacketsPerSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkUtilization Clone() {
      return new NetworkUtilization(this);
    }

    /// <summary>Field number for the "target_sent_bytes_per_second" field.</summary>
    public const int TargetSentBytesPerSecondFieldNumber = 1;
    private int targetSentBytesPerSecond_;
    /// <summary>
    ///  Target bytes sent per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetSentBytesPerSecond {
      get { return targetSentBytesPerSecond_; }
      set {
        targetSentBytesPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_sent_packets_per_second" field.</summary>
    public const int TargetSentPacketsPerSecondFieldNumber = 11;
    private int targetSentPacketsPerSecond_;
    /// <summary>
    ///  Target packets sent per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetSentPacketsPerSecond {
      get { return targetSentPacketsPerSecond_; }
      set {
        targetSentPacketsPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_received_bytes_per_second" field.</summary>
    public const int TargetReceivedBytesPerSecondFieldNumber = 12;
    private int targetReceivedBytesPerSecond_;
    /// <summary>
    ///  Target bytes received per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetReceivedBytesPerSecond {
      get { return targetReceivedBytesPerSecond_; }
      set {
        targetReceivedBytesPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "target_received_packets_per_second" field.</summary>
    public const int TargetReceivedPacketsPerSecondFieldNumber = 13;
    private int targetReceivedPacketsPerSecond_;
    /// <summary>
    ///  Target packets received per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetReceivedPacketsPerSecond {
      get { return targetReceivedPacketsPerSecond_; }
      set {
        targetReceivedPacketsPerSecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkUtilization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkUtilization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetSentBytesPerSecond != other.TargetSentBytesPerSecond) return false;
      if (TargetSentPacketsPerSecond != other.TargetSentPacketsPerSecond) return false;
      if (TargetReceivedBytesPerSecond != other.TargetReceivedBytesPerSecond) return false;
      if (TargetReceivedPacketsPerSecond != other.TargetReceivedPacketsPerSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetSentBytesPerSecond != 0) hash ^= TargetSentBytesPerSecond.GetHashCode();
      if (TargetSentPacketsPerSecond != 0) hash ^= TargetSentPacketsPerSecond.GetHashCode();
      if (TargetReceivedBytesPerSecond != 0) hash ^= TargetReceivedBytesPerSecond.GetHashCode();
      if (TargetReceivedPacketsPerSecond != 0) hash ^= TargetReceivedPacketsPerSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetSentBytesPerSecond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetSentBytesPerSecond);
      }
      if (TargetSentPacketsPerSecond != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TargetSentPacketsPerSecond);
      }
      if (TargetReceivedBytesPerSecond != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TargetReceivedBytesPerSecond);
      }
      if (TargetReceivedPacketsPerSecond != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TargetReceivedPacketsPerSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetSentBytesPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetSentBytesPerSecond);
      }
      if (TargetSentPacketsPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetSentPacketsPerSecond);
      }
      if (TargetReceivedBytesPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetReceivedBytesPerSecond);
      }
      if (TargetReceivedPacketsPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetReceivedPacketsPerSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkUtilization other) {
      if (other == null) {
        return;
      }
      if (other.TargetSentBytesPerSecond != 0) {
        TargetSentBytesPerSecond = other.TargetSentBytesPerSecond;
      }
      if (other.TargetSentPacketsPerSecond != 0) {
        TargetSentPacketsPerSecond = other.TargetSentPacketsPerSecond;
      }
      if (other.TargetReceivedBytesPerSecond != 0) {
        TargetReceivedBytesPerSecond = other.TargetReceivedBytesPerSecond;
      }
      if (other.TargetReceivedPacketsPerSecond != 0) {
        TargetReceivedPacketsPerSecond = other.TargetReceivedPacketsPerSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetSentBytesPerSecond = input.ReadInt32();
            break;
          }
          case 88: {
            TargetSentPacketsPerSecond = input.ReadInt32();
            break;
          }
          case 96: {
            TargetReceivedBytesPerSecond = input.ReadInt32();
            break;
          }
          case 104: {
            TargetReceivedPacketsPerSecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Extra network settings. Only applicable for VM runtimes.
  /// </summary>
  public sealed partial class Network : pb::IMessage<Network> {
    private static readonly pb::MessageParser<Network> _parser = new pb::MessageParser<Network>(() => new Network());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Network> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Network() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Network(Network other) : this() {
      forwardedPorts_ = other.forwardedPorts_.Clone();
      instanceTag_ = other.instanceTag_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Network Clone() {
      return new Network(this);
    }

    /// <summary>Field number for the "forwarded_ports" field.</summary>
    public const int ForwardedPortsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_forwardedPorts_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> forwardedPorts_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  List of ports, or port pairs, to forward from the virtual machine to the
    ///  application container.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ForwardedPorts {
      get { return forwardedPorts_; }
    }

    /// <summary>Field number for the "instance_tag" field.</summary>
    public const int InstanceTagFieldNumber = 2;
    private string instanceTag_ = "";
    /// <summary>
    ///  Tag to apply to the VM instance during creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceTag {
      get { return instanceTag_; }
      set {
        instanceTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  Google Cloud Platform network where the virtual machines are created.
    ///  Specify the short name, not the resource path.
    ///
    ///  Defaults to `default`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Network);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Network other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!forwardedPorts_.Equals(other.forwardedPorts_)) return false;
      if (InstanceTag != other.InstanceTag) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= forwardedPorts_.GetHashCode();
      if (InstanceTag.Length != 0) hash ^= InstanceTag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      forwardedPorts_.WriteTo(output, _repeated_forwardedPorts_codec);
      if (InstanceTag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstanceTag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += forwardedPorts_.CalculateSize(_repeated_forwardedPorts_codec);
      if (InstanceTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceTag);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Network other) {
      if (other == null) {
        return;
      }
      forwardedPorts_.Add(other.forwardedPorts_);
      if (other.InstanceTag.Length != 0) {
        InstanceTag = other.InstanceTag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            forwardedPorts_.AddEntriesFrom(input, _repeated_forwardedPorts_codec);
            break;
          }
          case 18: {
            InstanceTag = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Machine resources for a version.
  /// </summary>
  public sealed partial class Resources : pb::IMessage<Resources> {
    private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.VersionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources(Resources other) : this() {
      cpu_ = other.cpu_;
      diskGb_ = other.diskGb_;
      memoryGb_ = other.memoryGb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources Clone() {
      return new Resources(this);
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 1;
    private double cpu_;
    /// <summary>
    ///  Number of CPU cores needed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "disk_gb" field.</summary>
    public const int DiskGbFieldNumber = 2;
    private double diskGb_;
    /// <summary>
    ///  Disk size (GB) needed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DiskGb {
      get { return diskGb_; }
      set {
        diskGb_ = value;
      }
    }

    /// <summary>Field number for the "memory_gb" field.</summary>
    public const int MemoryGbFieldNumber = 3;
    private double memoryGb_;
    /// <summary>
    ///  Memory (GB) needed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemoryGb {
      get { return memoryGb_; }
      set {
        memoryGb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cpu != other.Cpu) return false;
      if (DiskGb != other.DiskGb) return false;
      if (MemoryGb != other.MemoryGb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cpu != 0D) hash ^= Cpu.GetHashCode();
      if (DiskGb != 0D) hash ^= DiskGb.GetHashCode();
      if (MemoryGb != 0D) hash ^= MemoryGb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cpu != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Cpu);
      }
      if (DiskGb != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DiskGb);
      }
      if (MemoryGb != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MemoryGb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cpu != 0D) {
        size += 1 + 8;
      }
      if (DiskGb != 0D) {
        size += 1 + 8;
      }
      if (MemoryGb != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resources other) {
      if (other == null) {
        return;
      }
      if (other.Cpu != 0D) {
        Cpu = other.Cpu;
      }
      if (other.DiskGb != 0D) {
        DiskGb = other.DiskGb;
      }
      if (other.MemoryGb != 0D) {
        MemoryGb = other.MemoryGb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Cpu = input.ReadDouble();
            break;
          }
          case 17: {
            DiskGb = input.ReadDouble();
            break;
          }
          case 25: {
            MemoryGb = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
