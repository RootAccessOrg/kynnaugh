// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bytestream/bytestream.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Bytestream {

  /// <summary>Holder for reflection information generated from google/bytestream/bytestream.proto</summary>
  public static partial class BytestreamReflection {

    #region Descriptor
    /// <summary>File descriptor for google/bytestream/bytestream.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BytestreamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJnb29nbGUvYnl0ZXN0cmVhbS9ieXRlc3RyZWFtLnByb3RvEhFnb29nbGUu",
            "Ynl0ZXN0cmVhbRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoeZ29v",
            "Z2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIk0KC1JlYWRSZXF1ZXN0EhUK",
            "DXJlc291cmNlX25hbWUYASABKAkSEwoLcmVhZF9vZmZzZXQYAiABKAMSEgoK",
            "cmVhZF9saW1pdBgDIAEoAyIcCgxSZWFkUmVzcG9uc2USDAoEZGF0YRgKIAEo",
            "DCJfCgxXcml0ZVJlcXVlc3QSFQoNcmVzb3VyY2VfbmFtZRgBIAEoCRIUCgx3",
            "cml0ZV9vZmZzZXQYAiABKAMSFAoMZmluaXNoX3dyaXRlGAMgASgIEgwKBGRh",
            "dGEYCiABKAwiJwoNV3JpdGVSZXNwb25zZRIWCg5jb21taXR0ZWRfc2l6ZRgB",
            "IAEoAyIwChdRdWVyeVdyaXRlU3RhdHVzUmVxdWVzdBIVCg1yZXNvdXJjZV9u",
            "YW1lGAEgASgJIkQKGFF1ZXJ5V3JpdGVTdGF0dXNSZXNwb25zZRIWCg5jb21t",
            "aXR0ZWRfc2l6ZRgBIAEoAxIQCghjb21wbGV0ZRgCIAEoCDKSAgoKQnl0ZVN0",
            "cmVhbRJJCgRSZWFkEh4uZ29vZ2xlLmJ5dGVzdHJlYW0uUmVhZFJlcXVlc3Qa",
            "Hy5nb29nbGUuYnl0ZXN0cmVhbS5SZWFkUmVzcG9uc2UwARJMCgVXcml0ZRIf",
            "Lmdvb2dsZS5ieXRlc3RyZWFtLldyaXRlUmVxdWVzdBogLmdvb2dsZS5ieXRl",
            "c3RyZWFtLldyaXRlUmVzcG9uc2UoARJrChBRdWVyeVdyaXRlU3RhdHVzEiou",
            "Z29vZ2xlLmJ5dGVzdHJlYW0uUXVlcnlXcml0ZVN0YXR1c1JlcXVlc3QaKy5n",
            "b29nbGUuYnl0ZXN0cmVhbS5RdWVyeVdyaXRlU3RhdHVzUmVzcG9uc2VCZQoV",
            "Y29tLmdvb2dsZS5ieXRlc3RyZWFtQg9CeXRlU3RyZWFtUHJvdG9aO2dvb2ds",
            "ZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYnl0ZXN0cmVhbTti",
            "eXRlc3RyZWFtYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bytestream.ReadRequest), global::Google.Bytestream.ReadRequest.Parser, new[]{ "ResourceName", "ReadOffset", "ReadLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bytestream.ReadResponse), global::Google.Bytestream.ReadResponse.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bytestream.WriteRequest), global::Google.Bytestream.WriteRequest.Parser, new[]{ "ResourceName", "WriteOffset", "FinishWrite", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bytestream.WriteResponse), global::Google.Bytestream.WriteResponse.Parser, new[]{ "CommittedSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bytestream.QueryWriteStatusRequest), global::Google.Bytestream.QueryWriteStatusRequest.Parser, new[]{ "ResourceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bytestream.QueryWriteStatusResponse), global::Google.Bytestream.QueryWriteStatusResponse.Parser, new[]{ "CommittedSize", "Complete" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request object for ByteStream.Read.
  /// </summary>
  public sealed partial class ReadRequest : pb::IMessage<ReadRequest> {
    private static readonly pb::MessageParser<ReadRequest> _parser = new pb::MessageParser<ReadRequest>(() => new ReadRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRequest(ReadRequest other) : this() {
      resourceName_ = other.resourceName_;
      readOffset_ = other.readOffset_;
      readLimit_ = other.readLimit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRequest Clone() {
      return new ReadRequest(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    ///  The name of the resource to read.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_offset" field.</summary>
    public const int ReadOffsetFieldNumber = 2;
    private long readOffset_;
    /// <summary>
    ///  The offset for the first byte to return in the read, relative to the start
    ///  of the resource.
    ///
    ///  A `read_offset` that is negative or greater than the size of the resource
    ///  will cause an `OUT_OF_RANGE` error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReadOffset {
      get { return readOffset_; }
      set {
        readOffset_ = value;
      }
    }

    /// <summary>Field number for the "read_limit" field.</summary>
    public const int ReadLimitFieldNumber = 3;
    private long readLimit_;
    /// <summary>
    ///  The maximum number of `data` bytes the server is allowed to return in the
    ///  sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
    ///  there is no limit, and a negative `read_limit` will cause an error.
    ///
    ///  If the stream returns fewer bytes than allowed by the `read_limit` and no
    ///  error occurred, the stream includes all data from the `read_offset` to the
    ///  end of the resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReadLimit {
      get { return readLimit_; }
      set {
        readLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (ReadOffset != other.ReadOffset) return false;
      if (ReadLimit != other.ReadLimit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (ReadOffset != 0L) hash ^= ReadOffset.GetHashCode();
      if (ReadLimit != 0L) hash ^= ReadLimit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (ReadOffset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReadOffset);
      }
      if (ReadLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReadLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (ReadOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReadOffset);
      }
      if (ReadLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReadLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadRequest other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.ReadOffset != 0L) {
        ReadOffset = other.ReadOffset;
      }
      if (other.ReadLimit != 0L) {
        ReadLimit = other.ReadLimit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 16: {
            ReadOffset = input.ReadInt64();
            break;
          }
          case 24: {
            ReadLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response object for ByteStream.Read.
  /// </summary>
  public sealed partial class ReadResponse : pb::IMessage<ReadResponse> {
    private static readonly pb::MessageParser<ReadResponse> _parser = new pb::MessageParser<ReadResponse>(() => new ReadResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadResponse(ReadResponse other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadResponse Clone() {
      return new ReadResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 10;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    ///  A portion of the data for the resource. The service **may** leave `data`
    ///  empty for any given `ReadResponse`. This enables the service to inform the
    ///  client that the request is still live while it is running an operation to
    ///  generate more data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadResponse other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request object for ByteStream.Write.
  /// </summary>
  public sealed partial class WriteRequest : pb::IMessage<WriteRequest> {
    private static readonly pb::MessageParser<WriteRequest> _parser = new pb::MessageParser<WriteRequest>(() => new WriteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest(WriteRequest other) : this() {
      resourceName_ = other.resourceName_;
      writeOffset_ = other.writeOffset_;
      finishWrite_ = other.finishWrite_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest Clone() {
      return new WriteRequest(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    ///  The name of the resource to write. This **must** be set on the first
    ///  `WriteRequest` of each `Write()` action. If it is set on subsequent calls,
    ///  it **must** match the value of the first request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "write_offset" field.</summary>
    public const int WriteOffsetFieldNumber = 2;
    private long writeOffset_;
    /// <summary>
    ///  The offset from the beginning of the resource at which the data should be
    ///  written. It is required on all `WriteRequest`s.
    ///
    ///  In the first `WriteRequest` of a `Write()` action, it indicates
    ///  the initial offset for the `Write()` call. The value **must** be equal to
    ///  the `committed_size` that a call to `QueryWriteStatus()` would return.
    ///
    ///  On subsequent calls, this value **must** be set and **must** be equal to
    ///  the sum of the first `write_offset` and the sizes of all `data` bundles
    ///  sent previously on this stream.
    ///
    ///  An incorrect value will cause an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WriteOffset {
      get { return writeOffset_; }
      set {
        writeOffset_ = value;
      }
    }

    /// <summary>Field number for the "finish_write" field.</summary>
    public const int FinishWriteFieldNumber = 3;
    private bool finishWrite_;
    /// <summary>
    ///  If `true`, this indicates that the write is complete. Sending any
    ///  `WriteRequest`s subsequent to one in which `finish_write` is `true` will
    ///  cause an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishWrite {
      get { return finishWrite_; }
      set {
        finishWrite_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 10;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    ///  A portion of the data for the resource. The client **may** leave `data`
    ///  empty for any given `WriteRequest`. This enables the client to inform the
    ///  service that the request is still live while it is running an operation to
    ///  generate more data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      if (WriteOffset != other.WriteOffset) return false;
      if (FinishWrite != other.FinishWrite) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (WriteOffset != 0L) hash ^= WriteOffset.GetHashCode();
      if (FinishWrite != false) hash ^= FinishWrite.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
      if (WriteOffset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WriteOffset);
      }
      if (FinishWrite != false) {
        output.WriteRawTag(24);
        output.WriteBool(FinishWrite);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (WriteOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WriteOffset);
      }
      if (FinishWrite != false) {
        size += 1 + 1;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.WriteOffset != 0L) {
        WriteOffset = other.WriteOffset;
      }
      if (other.FinishWrite != false) {
        FinishWrite = other.FinishWrite;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
          case 16: {
            WriteOffset = input.ReadInt64();
            break;
          }
          case 24: {
            FinishWrite = input.ReadBool();
            break;
          }
          case 82: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response object for ByteStream.Write.
  /// </summary>
  public sealed partial class WriteResponse : pb::IMessage<WriteResponse> {
    private static readonly pb::MessageParser<WriteResponse> _parser = new pb::MessageParser<WriteResponse>(() => new WriteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse(WriteResponse other) : this() {
      committedSize_ = other.committedSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse Clone() {
      return new WriteResponse(this);
    }

    /// <summary>Field number for the "committed_size" field.</summary>
    public const int CommittedSizeFieldNumber = 1;
    private long committedSize_;
    /// <summary>
    ///  The number of bytes that have been processed for the given resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommittedSize {
      get { return committedSize_; }
      set {
        committedSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommittedSize != other.CommittedSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommittedSize != 0L) hash ^= CommittedSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommittedSize != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommittedSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommittedSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommittedSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteResponse other) {
      if (other == null) {
        return;
      }
      if (other.CommittedSize != 0L) {
        CommittedSize = other.CommittedSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommittedSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request object for ByteStream.QueryWriteStatus.
  /// </summary>
  public sealed partial class QueryWriteStatusRequest : pb::IMessage<QueryWriteStatusRequest> {
    private static readonly pb::MessageParser<QueryWriteStatusRequest> _parser = new pb::MessageParser<QueryWriteStatusRequest>(() => new QueryWriteStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryWriteStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryWriteStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryWriteStatusRequest(QueryWriteStatusRequest other) : this() {
      resourceName_ = other.resourceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryWriteStatusRequest Clone() {
      return new QueryWriteStatusRequest(this);
    }

    /// <summary>Field number for the "resource_name" field.</summary>
    public const int ResourceNameFieldNumber = 1;
    private string resourceName_ = "";
    /// <summary>
    ///  The name of the resource whose write status is being requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryWriteStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryWriteStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceName != other.ResourceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryWriteStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResourceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response object for ByteStream.QueryWriteStatus.
  /// </summary>
  public sealed partial class QueryWriteStatusResponse : pb::IMessage<QueryWriteStatusResponse> {
    private static readonly pb::MessageParser<QueryWriteStatusResponse> _parser = new pb::MessageParser<QueryWriteStatusResponse>(() => new QueryWriteStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryWriteStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryWriteStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryWriteStatusResponse(QueryWriteStatusResponse other) : this() {
      committedSize_ = other.committedSize_;
      complete_ = other.complete_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryWriteStatusResponse Clone() {
      return new QueryWriteStatusResponse(this);
    }

    /// <summary>Field number for the "committed_size" field.</summary>
    public const int CommittedSizeFieldNumber = 1;
    private long committedSize_;
    /// <summary>
    ///  The number of bytes that have been processed for the given resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommittedSize {
      get { return committedSize_; }
      set {
        committedSize_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 2;
    private bool complete_;
    /// <summary>
    ///  `complete` is `true` only if the client has sent a `WriteRequest` with
    ///  `finish_write` set to true, and the server has processed that request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryWriteStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryWriteStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommittedSize != other.CommittedSize) return false;
      if (Complete != other.Complete) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommittedSize != 0L) hash ^= CommittedSize.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommittedSize != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommittedSize);
      }
      if (Complete != false) {
        output.WriteRawTag(16);
        output.WriteBool(Complete);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommittedSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommittedSize);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryWriteStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.CommittedSize != 0L) {
        CommittedSize = other.CommittedSize;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommittedSize = input.ReadInt64();
            break;
          }
          case 16: {
            Complete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
