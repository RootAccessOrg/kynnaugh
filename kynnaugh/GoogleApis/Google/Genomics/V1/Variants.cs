// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Genomics.V1 {

  /// <summary>Holder for reflection information generated from google/genomics/v1/variants.proto</summary>
  public static partial class VariantsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/genomics/v1/variants.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VariantsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFnb29nbGUvZ2Vub21pY3MvdjEvdmFyaWFudHMucHJvdG8SEmdvb2dsZS5n",
            "ZW5vbWljcy52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxojZ29v",
            "Z2xlL2xvbmdydW5uaW5nL29wZXJhdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90",
            "b2J1Zi9lbXB0eS5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2su",
            "cHJvdG8aHGdvb2dsZS9wcm90b2J1Zi9zdHJ1Y3QucHJvdG8igAMKElZhcmlh",
            "bnRTZXRNZXRhZGF0YRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkSCgoC",
            "aWQYBCABKAkSOQoEdHlwZRgFIAEoDjIrLmdvb2dsZS5nZW5vbWljcy52MS5W",
            "YXJpYW50U2V0TWV0YWRhdGEuVHlwZRIOCgZudW1iZXIYCCABKAkSEwoLZGVz",
            "Y3JpcHRpb24YByABKAkSPgoEaW5mbxgDIAMoCzIwLmdvb2dsZS5nZW5vbWlj",
            "cy52MS5WYXJpYW50U2V0TWV0YWRhdGEuSW5mb0VudHJ5GkcKCUluZm9FbnRy",
            "eRILCgNrZXkYASABKAkSKQoFdmFsdWUYAiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuTGlzdFZhbHVlOgI4ASJZCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQ",
            "ABILCgdJTlRFR0VSEAESCQoFRkxPQVQQAhIICgRGTEFHEAMSDQoJQ0hBUkFD",
            "VEVSEAQSCgoGU1RSSU5HEAUi4QEKClZhcmlhbnRTZXQSEgoKZGF0YXNldF9p",
            "ZBgBIAEoCRIKCgJpZBgCIAEoCRIYChByZWZlcmVuY2Vfc2V0X2lkGAYgASgJ",
            "EjwKEHJlZmVyZW5jZV9ib3VuZHMYBSADKAsyIi5nb29nbGUuZ2Vub21pY3Mu",
            "djEuUmVmZXJlbmNlQm91bmQSOAoIbWV0YWRhdGEYBCADKAsyJi5nb29nbGUu",
            "Z2Vub21pY3MudjEuVmFyaWFudFNldE1ldGFkYXRhEgwKBG5hbWUYByABKAkS",
            "EwoLZGVzY3JpcHRpb24YCCABKAkiggMKB1ZhcmlhbnQSFgoOdmFyaWFudF9z",
            "ZXRfaWQYDyABKAkSCgoCaWQYAiABKAkSDQoFbmFtZXMYAyADKAkSDwoHY3Jl",
            "YXRlZBgMIAEoAxIWCg5yZWZlcmVuY2VfbmFtZRgOIAEoCRINCgVzdGFydBgQ",
            "IAEoAxILCgNlbmQYDSABKAMSFwoPcmVmZXJlbmNlX2Jhc2VzGAYgASgJEhcK",
            "D2FsdGVybmF0ZV9iYXNlcxgHIAMoCRIPCgdxdWFsaXR5GAggASgBEg4KBmZp",
            "bHRlchgJIAMoCRIzCgRpbmZvGAogAygLMiUuZ29vZ2xlLmdlbm9taWNzLnYx",
            "LlZhcmlhbnQuSW5mb0VudHJ5Ei4KBWNhbGxzGAsgAygLMh8uZ29vZ2xlLmdl",
            "bm9taWNzLnYxLlZhcmlhbnRDYWxsGkcKCUluZm9FbnRyeRILCgNrZXkYASAB",
            "KAkSKQoFdmFsdWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuTGlzdFZhbHVl",
            "OgI4ASL8AQoLVmFyaWFudENhbGwSEwoLY2FsbF9zZXRfaWQYCCABKAkSFQoN",
            "Y2FsbF9zZXRfbmFtZRgJIAEoCRIQCghnZW5vdHlwZRgHIAMoBRIQCghwaGFz",
            "ZXNldBgFIAEoCRIbChNnZW5vdHlwZV9saWtlbGlob29kGAYgAygBEjcKBGlu",
            "Zm8YAiADKAsyKS5nb29nbGUuZ2Vub21pY3MudjEuVmFyaWFudENhbGwuSW5m",
            "b0VudHJ5GkcKCUluZm9FbnRyeRILCgNrZXkYASABKAkSKQoFdmFsdWUYAiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuTGlzdFZhbHVlOgI4ASLeAQoHQ2FsbFNl",
            "dBIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhEKCXNhbXBsZV9pZBgHIAEo",
            "CRIXCg92YXJpYW50X3NldF9pZHMYBiADKAkSDwoHY3JlYXRlZBgFIAEoAxIz",
            "CgRpbmZvGAQgAygLMiUuZ29vZ2xlLmdlbm9taWNzLnYxLkNhbGxTZXQuSW5m",
            "b0VudHJ5GkcKCUluZm9FbnRyeRILCgNrZXkYASABKAkSKQoFdmFsdWUYAiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuTGlzdFZhbHVlOgI4ASI9Cg5SZWZlcmVu",
            "Y2VCb3VuZBIWCg5yZWZlcmVuY2VfbmFtZRgBIAEoCRITCgt1cHBlcl9ib3Vu",
            "ZBgCIAEoAyK0AwoVSW1wb3J0VmFyaWFudHNSZXF1ZXN0EhYKDnZhcmlhbnRf",
            "c2V0X2lkGAEgASgJEhMKC3NvdXJjZV91cmlzGAIgAygJEkAKBmZvcm1hdBgD",
            "IAEoDjIwLmdvb2dsZS5nZW5vbWljcy52MS5JbXBvcnRWYXJpYW50c1JlcXVl",
            "c3QuRm9ybWF0EiEKGW5vcm1hbGl6ZV9yZWZlcmVuY2VfbmFtZXMYBSABKAgS",
            "WQoRaW5mb19tZXJnZV9jb25maWcYBiADKAsyPi5nb29nbGUuZ2Vub21pY3Mu",
            "djEuSW1wb3J0VmFyaWFudHNSZXF1ZXN0LkluZm9NZXJnZUNvbmZpZ0VudHJ5",
            "Gl4KFEluZm9NZXJnZUNvbmZpZ0VudHJ5EgsKA2tleRgBIAEoCRI1CgV2YWx1",
            "ZRgCIAEoDjImLmdvb2dsZS5nZW5vbWljcy52MS5JbmZvTWVyZ2VPcGVyYXRp",
            "b246AjgBIk4KBkZvcm1hdBIWChJGT1JNQVRfVU5TUEVDSUZJRUQQABIOCgpG",
            "T1JNQVRfVkNGEAESHAoYRk9STUFUX0NPTVBMRVRFX0dFTk9NSUNTEAIiLgoW",
            "SW1wb3J0VmFyaWFudHNSZXNwb25zZRIUCgxjYWxsX3NldF9pZHMYASADKAki",
            "TgoXQ3JlYXRlVmFyaWFudFNldFJlcXVlc3QSMwoLdmFyaWFudF9zZXQYASAB",
            "KAsyHi5nb29nbGUuZ2Vub21pY3MudjEuVmFyaWFudFNldCKIAgoXRXhwb3J0",
            "VmFyaWFudFNldFJlcXVlc3QSFgoOdmFyaWFudF9zZXRfaWQYASABKAkSFAoM",
            "Y2FsbF9zZXRfaWRzGAIgAygJEhIKCnByb2plY3RfaWQYAyABKAkSQgoGZm9y",
            "bWF0GAQgASgOMjIuZ29vZ2xlLmdlbm9taWNzLnYxLkV4cG9ydFZhcmlhbnRT",
            "ZXRSZXF1ZXN0LkZvcm1hdBIYChBiaWdxdWVyeV9kYXRhc2V0GAUgASgJEhYK",
            "DmJpZ3F1ZXJ5X3RhYmxlGAYgASgJIjUKBkZvcm1hdBIWChJGT1JNQVRfVU5T",
            "UEVDSUZJRUQQABITCg9GT1JNQVRfQklHUVVFUlkQASIuChRHZXRWYXJpYW50",
            "U2V0UmVxdWVzdBIWCg52YXJpYW50X3NldF9pZBgBIAEoCSJWChhTZWFyY2hW",
            "YXJpYW50U2V0c1JlcXVlc3QSEwoLZGF0YXNldF9pZHMYASADKAkSEgoKcGFn",
            "ZV90b2tlbhgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUiagoZU2VhcmNoVmFy",
            "aWFudFNldHNSZXNwb25zZRI0Cgx2YXJpYW50X3NldHMYASADKAsyHi5nb29n",
            "bGUuZ2Vub21pY3MudjEuVmFyaWFudFNldBIXCg9uZXh0X3BhZ2VfdG9rZW4Y",
            "AiABKAkiMQoXRGVsZXRlVmFyaWFudFNldFJlcXVlc3QSFgoOdmFyaWFudF9z",
            "ZXRfaWQYASABKAkilwEKF1VwZGF0ZVZhcmlhbnRTZXRSZXF1ZXN0EhYKDnZh",
            "cmlhbnRfc2V0X2lkGAEgASgJEjMKC3ZhcmlhbnRfc2V0GAIgASgLMh4uZ29v",
            "Z2xlLmdlbm9taWNzLnYxLlZhcmlhbnRTZXQSLwoLdXBkYXRlX21hc2sYBSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrIsoBChVTZWFyY2hWYXJp",
            "YW50c1JlcXVlc3QSFwoPdmFyaWFudF9zZXRfaWRzGAEgAygJEhQKDHZhcmlh",
            "bnRfbmFtZRgCIAEoCRIUCgxjYWxsX3NldF9pZHMYAyADKAkSFgoOcmVmZXJl",
            "bmNlX25hbWUYBCABKAkSDQoFc3RhcnQYBSABKAMSCwoDZW5kGAYgASgDEhIK",
            "CnBhZ2VfdG9rZW4YByABKAkSEQoJcGFnZV9zaXplGAggASgFEhEKCW1heF9j",
            "YWxscxgJIAEoBSJgChZTZWFyY2hWYXJpYW50c1Jlc3BvbnNlEi0KCHZhcmlh",
            "bnRzGAEgAygLMhsuZ29vZ2xlLmdlbm9taWNzLnYxLlZhcmlhbnQSFwoPbmV4",
            "dF9wYWdlX3Rva2VuGAIgASgJIkQKFENyZWF0ZVZhcmlhbnRSZXF1ZXN0EiwK",
            "B3ZhcmlhbnQYASABKAsyGy5nb29nbGUuZ2Vub21pY3MudjEuVmFyaWFudCKJ",
            "AQoUVXBkYXRlVmFyaWFudFJlcXVlc3QSEgoKdmFyaWFudF9pZBgBIAEoCRIs",
            "Cgd2YXJpYW50GAIgASgLMhsuZ29vZ2xlLmdlbm9taWNzLnYxLlZhcmlhbnQS",
            "LwoLdXBkYXRlX21hc2sYAyABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRN",
            "YXNrIioKFERlbGV0ZVZhcmlhbnRSZXF1ZXN0EhIKCnZhcmlhbnRfaWQYASAB",
            "KAkiJwoRR2V0VmFyaWFudFJlcXVlc3QSEgoKdmFyaWFudF9pZBgBIAEoCSKX",
            "AgoUTWVyZ2VWYXJpYW50c1JlcXVlc3QSFgoOdmFyaWFudF9zZXRfaWQYASAB",
            "KAkSLQoIdmFyaWFudHMYAiADKAsyGy5nb29nbGUuZ2Vub21pY3MudjEuVmFy",
            "aWFudBJYChFpbmZvX21lcmdlX2NvbmZpZxgDIAMoCzI9Lmdvb2dsZS5nZW5v",
            "bWljcy52MS5NZXJnZVZhcmlhbnRzUmVxdWVzdC5JbmZvTWVyZ2VDb25maWdF",
            "bnRyeRpeChRJbmZvTWVyZ2VDb25maWdFbnRyeRILCgNrZXkYASABKAkSNQoF",
            "dmFsdWUYAiABKA4yJi5nb29nbGUuZ2Vub21pY3MudjEuSW5mb01lcmdlT3Bl",
            "cmF0aW9uOgI4ASJlChVTZWFyY2hDYWxsU2V0c1JlcXVlc3QSFwoPdmFyaWFu",
            "dF9zZXRfaWRzGAEgAygJEgwKBG5hbWUYAiABKAkSEgoKcGFnZV90b2tlbhgD",
            "IAEoCRIRCglwYWdlX3NpemUYBCABKAUiYQoWU2VhcmNoQ2FsbFNldHNSZXNw",
            "b25zZRIuCgljYWxsX3NldHMYASADKAsyGy5nb29nbGUuZ2Vub21pY3MudjEu",
            "Q2FsbFNldBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiRQoUQ3JlYXRlQ2Fs",
            "bFNldFJlcXVlc3QSLQoIY2FsbF9zZXQYASABKAsyGy5nb29nbGUuZ2Vub21p",
            "Y3MudjEuQ2FsbFNldCKLAQoUVXBkYXRlQ2FsbFNldFJlcXVlc3QSEwoLY2Fs",
            "bF9zZXRfaWQYASABKAkSLQoIY2FsbF9zZXQYAiABKAsyGy5nb29nbGUuZ2Vu",
            "b21pY3MudjEuQ2FsbFNldBIvCgt1cGRhdGVfbWFzaxgDIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5GaWVsZE1hc2siKwoURGVsZXRlQ2FsbFNldFJlcXVlc3QS",
            "EwoLY2FsbF9zZXRfaWQYASABKAkiKAoRR2V0Q2FsbFNldFJlcXVlc3QSEwoL",
            "Y2FsbF9zZXRfaWQYASABKAkijQEKFVN0cmVhbVZhcmlhbnRzUmVxdWVzdBIS",
            "Cgpwcm9qZWN0X2lkGAEgASgJEhYKDnZhcmlhbnRfc2V0X2lkGAIgASgJEhQK",
            "DGNhbGxfc2V0X2lkcxgDIAMoCRIWCg5yZWZlcmVuY2VfbmFtZRgEIAEoCRIN",
            "CgVzdGFydBgFIAEoAxILCgNlbmQYBiABKAMiRwoWU3RyZWFtVmFyaWFudHNS",
            "ZXNwb25zZRItCgh2YXJpYW50cxgBIAMoCzIbLmdvb2dsZS5nZW5vbWljcy52",
            "MS5WYXJpYW50Kl0KEkluZm9NZXJnZU9wZXJhdGlvbhIkCiBJTkZPX01FUkdF",
            "X09QRVJBVElPTl9VTlNQRUNJRklFRBAAEg4KCklHTk9SRV9ORVcQARIRCg1N",
            "T1ZFX1RPX0NBTExTEAIypQEKF1N0cmVhbWluZ1ZhcmlhbnRTZXJ2aWNlEokB",
            "Cg5TdHJlYW1WYXJpYW50cxIpLmdvb2dsZS5nZW5vbWljcy52MS5TdHJlYW1W",
            "YXJpYW50c1JlcXVlc3QaKi5nb29nbGUuZ2Vub21pY3MudjEuU3RyZWFtVmFy",
            "aWFudHNSZXNwb25zZSIegtPkkwIYIhMvdjEvdmFyaWFudHM6c3RyZWFtOgEq",
            "MAEyvRIKEFZhcmlhbnRTZXJ2aWNlVjESegoOSW1wb3J0VmFyaWFudHMSKS5n",
            "b29nbGUuZ2Vub21pY3MudjEuSW1wb3J0VmFyaWFudHNSZXF1ZXN0Gh0uZ29v",
            "Z2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiIegtPkkwIYIhMvdjEvdmFyaWFu",
            "dHM6aW1wb3J0OgEqEoUBChBDcmVhdGVWYXJpYW50U2V0EisuZ29vZ2xlLmdl",
            "bm9taWNzLnYxLkNyZWF0ZVZhcmlhbnRTZXRSZXF1ZXN0Gh4uZ29vZ2xlLmdl",
            "bm9taWNzLnYxLlZhcmlhbnRTZXQiJILT5JMCHiIPL3YxL3ZhcmlhbnRzZXRz",
            "Ogt2YXJpYW50X3NldBKSAQoQRXhwb3J0VmFyaWFudFNldBIrLmdvb2dsZS5n",
            "ZW5vbWljcy52MS5FeHBvcnRWYXJpYW50U2V0UmVxdWVzdBodLmdvb2dsZS5s",
            "b25ncnVubmluZy5PcGVyYXRpb24iMoLT5JMCLCInL3YxL3ZhcmlhbnRzZXRz",
            "L3t2YXJpYW50X3NldF9pZH06ZXhwb3J0OgEqEoMBCg1HZXRWYXJpYW50U2V0",
            "EiguZ29vZ2xlLmdlbm9taWNzLnYxLkdldFZhcmlhbnRTZXRSZXF1ZXN0Gh4u",
            "Z29vZ2xlLmdlbm9taWNzLnYxLlZhcmlhbnRTZXQiKILT5JMCIhIgL3YxL3Zh",
            "cmlhbnRzZXRzL3t2YXJpYW50X3NldF9pZH0SkwEKEVNlYXJjaFZhcmlhbnRT",
            "ZXRzEiwuZ29vZ2xlLmdlbm9taWNzLnYxLlNlYXJjaFZhcmlhbnRTZXRzUmVx",
            "dWVzdBotLmdvb2dsZS5nZW5vbWljcy52MS5TZWFyY2hWYXJpYW50U2V0c1Jl",
            "c3BvbnNlIiGC0+STAhsiFi92MS92YXJpYW50c2V0cy9zZWFyY2g6ASoSgQEK",
            "EERlbGV0ZVZhcmlhbnRTZXQSKy5nb29nbGUuZ2Vub21pY3MudjEuRGVsZXRl",
            "VmFyaWFudFNldFJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiKILT",
            "5JMCIiogL3YxL3ZhcmlhbnRzZXRzL3t2YXJpYW50X3NldF9pZH0SlgEKEFVw",
            "ZGF0ZVZhcmlhbnRTZXQSKy5nb29nbGUuZ2Vub21pY3MudjEuVXBkYXRlVmFy",
            "aWFudFNldFJlcXVlc3QaHi5nb29nbGUuZ2Vub21pY3MudjEuVmFyaWFudFNl",
            "dCI1gtPkkwIvMiAvdjEvdmFyaWFudHNldHMve3ZhcmlhbnRfc2V0X2lkfToL",
            "dmFyaWFudF9zZXQShwEKDlNlYXJjaFZhcmlhbnRzEikuZ29vZ2xlLmdlbm9t",
            "aWNzLnYxLlNlYXJjaFZhcmlhbnRzUmVxdWVzdBoqLmdvb2dsZS5nZW5vbWlj",
            "cy52MS5TZWFyY2hWYXJpYW50c1Jlc3BvbnNlIh6C0+STAhgiEy92MS92YXJp",
            "YW50cy9zZWFyY2g6ASoSdQoNQ3JlYXRlVmFyaWFudBIoLmdvb2dsZS5nZW5v",
            "bWljcy52MS5DcmVhdGVWYXJpYW50UmVxdWVzdBobLmdvb2dsZS5nZW5vbWlj",
            "cy52MS5WYXJpYW50Ih2C0+STAhciDC92MS92YXJpYW50czoHdmFyaWFudBKC",
            "AQoNVXBkYXRlVmFyaWFudBIoLmdvb2dsZS5nZW5vbWljcy52MS5VcGRhdGVW",
            "YXJpYW50UmVxdWVzdBobLmdvb2dsZS5nZW5vbWljcy52MS5WYXJpYW50IiqC",
            "0+STAiQyGS92MS92YXJpYW50cy97dmFyaWFudF9pZH06B3ZhcmlhbnQSdAoN",
            "RGVsZXRlVmFyaWFudBIoLmdvb2dsZS5nZW5vbWljcy52MS5EZWxldGVWYXJp",
            "YW50UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIhgtPkkwIbKhkv",
            "djEvdmFyaWFudHMve3ZhcmlhbnRfaWR9EnMKCkdldFZhcmlhbnQSJS5nb29n",
            "bGUuZ2Vub21pY3MudjEuR2V0VmFyaWFudFJlcXVlc3QaGy5nb29nbGUuZ2Vu",
            "b21pY3MudjEuVmFyaWFudCIhgtPkkwIbEhkvdjEvdmFyaWFudHMve3Zhcmlh",
            "bnRfaWR9EnAKDU1lcmdlVmFyaWFudHMSKC5nb29nbGUuZ2Vub21pY3MudjEu",
            "TWVyZ2VWYXJpYW50c1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHki",
            "HYLT5JMCFyISL3YxL3ZhcmlhbnRzOm1lcmdlOgEqEocBCg5TZWFyY2hDYWxs",
            "U2V0cxIpLmdvb2dsZS5nZW5vbWljcy52MS5TZWFyY2hDYWxsU2V0c1JlcXVl",
            "c3QaKi5nb29nbGUuZ2Vub21pY3MudjEuU2VhcmNoQ2FsbFNldHNSZXNwb25z",
            "ZSIegtPkkwIYIhMvdjEvY2FsbHNldHMvc2VhcmNoOgEqEnYKDUNyZWF0ZUNh",
            "bGxTZXQSKC5nb29nbGUuZ2Vub21pY3MudjEuQ3JlYXRlQ2FsbFNldFJlcXVl",
            "c3QaGy5nb29nbGUuZ2Vub21pY3MudjEuQ2FsbFNldCIegtPkkwIYIgwvdjEv",
            "Y2FsbHNldHM6CGNhbGxfc2V0EoQBCg1VcGRhdGVDYWxsU2V0EiguZ29vZ2xl",
            "Lmdlbm9taWNzLnYxLlVwZGF0ZUNhbGxTZXRSZXF1ZXN0GhsuZ29vZ2xlLmdl",
            "bm9taWNzLnYxLkNhbGxTZXQiLILT5JMCJjIaL3YxL2NhbGxzZXRzL3tjYWxs",
            "X3NldF9pZH06CGNhbGxfc2V0EnUKDURlbGV0ZUNhbGxTZXQSKC5nb29nbGUu",
            "Z2Vub21pY3MudjEuRGVsZXRlQ2FsbFNldFJlcXVlc3QaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiIoLT5JMCHCoaL3YxL2NhbGxzZXRzL3tjYWxsX3NldF9p",
            "ZH0SdAoKR2V0Q2FsbFNldBIlLmdvb2dsZS5nZW5vbWljcy52MS5HZXRDYWxs",
            "U2V0UmVxdWVzdBobLmdvb2dsZS5nZW5vbWljcy52MS5DYWxsU2V0IiKC0+ST",
            "AhwSGi92MS9jYWxsc2V0cy97Y2FsbF9zZXRfaWR9QmgKFmNvbS5nb29nbGUu",
            "Z2Vub21pY3MudjFCDVZhcmlhbnRzUHJvdG9QAVo6Z29vZ2xlLmdvbGFuZy5v",
            "cmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9nZW5vbWljcy92MTtnZW5vbWljc/gB",
            "AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Genomics.V1.InfoMergeOperation), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.VariantSetMetadata), global::Google.Genomics.V1.VariantSetMetadata.Parser, new[]{ "Key", "Value", "Id", "Type", "Number", "Description", "Info" }, null, new[]{ typeof(global::Google.Genomics.V1.VariantSetMetadata.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.VariantSet), global::Google.Genomics.V1.VariantSet.Parser, new[]{ "DatasetId", "Id", "ReferenceSetId", "ReferenceBounds", "Metadata", "Name", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.Variant), global::Google.Genomics.V1.Variant.Parser, new[]{ "VariantSetId", "Id", "Names", "Created", "ReferenceName", "Start", "End", "ReferenceBases", "AlternateBases", "Quality", "Filter", "Info", "Calls" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.VariantCall), global::Google.Genomics.V1.VariantCall.Parser, new[]{ "CallSetId", "CallSetName", "Genotype", "Phaseset", "GenotypeLikelihood", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CallSet), global::Google.Genomics.V1.CallSet.Parser, new[]{ "Id", "Name", "SampleId", "VariantSetIds", "Created", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ReferenceBound), global::Google.Genomics.V1.ReferenceBound.Parser, new[]{ "ReferenceName", "UpperBound" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ImportVariantsRequest), global::Google.Genomics.V1.ImportVariantsRequest.Parser, new[]{ "VariantSetId", "SourceUris", "Format", "NormalizeReferenceNames", "InfoMergeConfig" }, null, new[]{ typeof(global::Google.Genomics.V1.ImportVariantsRequest.Types.Format) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ImportVariantsResponse), global::Google.Genomics.V1.ImportVariantsResponse.Parser, new[]{ "CallSetIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CreateVariantSetRequest), global::Google.Genomics.V1.CreateVariantSetRequest.Parser, new[]{ "VariantSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ExportVariantSetRequest), global::Google.Genomics.V1.ExportVariantSetRequest.Parser, new[]{ "VariantSetId", "CallSetIds", "ProjectId", "Format", "BigqueryDataset", "BigqueryTable" }, null, new[]{ typeof(global::Google.Genomics.V1.ExportVariantSetRequest.Types.Format) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetVariantSetRequest), global::Google.Genomics.V1.GetVariantSetRequest.Parser, new[]{ "VariantSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchVariantSetsRequest), global::Google.Genomics.V1.SearchVariantSetsRequest.Parser, new[]{ "DatasetIds", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchVariantSetsResponse), global::Google.Genomics.V1.SearchVariantSetsResponse.Parser, new[]{ "VariantSets", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.DeleteVariantSetRequest), global::Google.Genomics.V1.DeleteVariantSetRequest.Parser, new[]{ "VariantSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.UpdateVariantSetRequest), global::Google.Genomics.V1.UpdateVariantSetRequest.Parser, new[]{ "VariantSetId", "VariantSet", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchVariantsRequest), global::Google.Genomics.V1.SearchVariantsRequest.Parser, new[]{ "VariantSetIds", "VariantName", "CallSetIds", "ReferenceName", "Start", "End", "PageToken", "PageSize", "MaxCalls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchVariantsResponse), global::Google.Genomics.V1.SearchVariantsResponse.Parser, new[]{ "Variants", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CreateVariantRequest), global::Google.Genomics.V1.CreateVariantRequest.Parser, new[]{ "Variant" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.UpdateVariantRequest), global::Google.Genomics.V1.UpdateVariantRequest.Parser, new[]{ "VariantId", "Variant", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.DeleteVariantRequest), global::Google.Genomics.V1.DeleteVariantRequest.Parser, new[]{ "VariantId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetVariantRequest), global::Google.Genomics.V1.GetVariantRequest.Parser, new[]{ "VariantId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.MergeVariantsRequest), global::Google.Genomics.V1.MergeVariantsRequest.Parser, new[]{ "VariantSetId", "Variants", "InfoMergeConfig" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchCallSetsRequest), global::Google.Genomics.V1.SearchCallSetsRequest.Parser, new[]{ "VariantSetIds", "Name", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchCallSetsResponse), global::Google.Genomics.V1.SearchCallSetsResponse.Parser, new[]{ "CallSets", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CreateCallSetRequest), global::Google.Genomics.V1.CreateCallSetRequest.Parser, new[]{ "CallSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.UpdateCallSetRequest), global::Google.Genomics.V1.UpdateCallSetRequest.Parser, new[]{ "CallSetId", "CallSet", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.DeleteCallSetRequest), global::Google.Genomics.V1.DeleteCallSetRequest.Parser, new[]{ "CallSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetCallSetRequest), global::Google.Genomics.V1.GetCallSetRequest.Parser, new[]{ "CallSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.StreamVariantsRequest), global::Google.Genomics.V1.StreamVariantsRequest.Parser, new[]{ "ProjectId", "VariantSetId", "CallSetIds", "ReferenceName", "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.StreamVariantsResponse), global::Google.Genomics.V1.StreamVariantsResponse.Parser, new[]{ "Variants" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Operations to be performed during import on Variant info fields.
  ///  These operations are set for each info field in the info_merge_config
  ///  map of ImportVariantsRequest, which is plumbed down to the
  ///  MergeVariantRequests generated by the import job.
  /// </summary>
  public enum InfoMergeOperation {
    [pbr::OriginalName("INFO_MERGE_OPERATION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///  By default, Variant info fields are persisted if the Variant doesn't
    ///  already exist in the variantset.  If the Variant is equivalent to a
    ///  Variant already in the variantset, the incoming Variant's info field
    ///  is ignored in favor of that of the already persisted Variant.
    /// </summary>
    [pbr::OriginalName("IGNORE_NEW")] IgnoreNew = 1,
    /// <summary>
    ///  This operation removes an info field from the incoming Variant
    ///  and persists this info field in each of the incoming Variant's Calls.
    /// </summary>
    [pbr::OriginalName("MOVE_TO_CALLS")] MoveToCalls = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Metadata describes a single piece of variant call metadata.
  ///  These data include a top level key and either a single value string (value)
  ///  or a list of key-value pairs (info.)
  ///  Value and info are mutually exclusive.
  /// </summary>
  public sealed partial class VariantSetMetadata : pb::IMessage<VariantSetMetadata> {
    private static readonly pb::MessageParser<VariantSetMetadata> _parser = new pb::MessageParser<VariantSetMetadata>(() => new VariantSetMetadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariantSetMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSetMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSetMetadata(VariantSetMetadata other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      id_ = other.id_;
      type_ = other.type_;
      number_ = other.number_;
      description_ = other.description_;
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSetMetadata Clone() {
      return new VariantSetMetadata(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    ///  The top-level key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    ///  The value field for simple metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private string id_ = "";
    /// <summary>
    ///  User-provided ID field, not enforced by this API.
    ///  Two or more pieces of structured metadata with identical
    ///  id and key fields are considered equivalent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Google.Genomics.V1.VariantSetMetadata.Types.Type type_ = 0;
    /// <summary>
    ///  The type of data. Possible types include: Integer, Float,
    ///  Flag, Character, and String.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantSetMetadata.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 8;
    private string number_ = "";
    /// <summary>
    ///  The number of values that can be included in a field described by this
    ///  metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    /// <summary>
    ///  A textual description of this metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 26);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  Remaining structured metadata key-value pairs. This must be of the form
    ///  map&lt;string, string[]> (string key mapping to a list of string values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariantSetMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariantSetMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Number != other.Number) return false;
      if (Description != other.Description) return false;
      if (!Info.Equals(other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Number.Length != 0) hash ^= Number.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      info_.WriteTo(output, _map_info_codec);
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariantSetMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Number.Length != 0) {
        Number = other.Number;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
          case 34: {
            Id = input.ReadString();
            break;
          }
          case 40: {
            type_ = (global::Google.Genomics.V1.VariantSetMetadata.Types.Type) input.ReadEnum();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            Number = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VariantSetMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("INTEGER")] Integer = 1,
        [pbr::OriginalName("FLOAT")] Float = 2,
        [pbr::OriginalName("FLAG")] Flag = 3,
        [pbr::OriginalName("CHARACTER")] Character = 4,
        [pbr::OriginalName("STRING")] String = 5,
      }

    }
    #endregion

  }

  /// <summary>
  ///  A variant set is a collection of call sets and variants. It contains summary
  ///  statistics of those contents. A variant set belongs to a dataset.
  ///
  ///  For more genomics resource definitions, see [Fundamentals of Google
  ///  Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  /// </summary>
  public sealed partial class VariantSet : pb::IMessage<VariantSet> {
    private static readonly pb::MessageParser<VariantSet> _parser = new pb::MessageParser<VariantSet>(() => new VariantSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariantSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSet(VariantSet other) : this() {
      datasetId_ = other.datasetId_;
      id_ = other.id_;
      referenceSetId_ = other.referenceSetId_;
      referenceBounds_ = other.referenceBounds_.Clone();
      metadata_ = other.metadata_.Clone();
      name_ = other.name_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantSet Clone() {
      return new VariantSet(this);
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 1;
    private string datasetId_ = "";
    /// <summary>
    ///  The dataset to which this variant set belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  The server-generated variant set ID, unique across all variant sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 6;
    private string referenceSetId_ = "";
    /// <summary>
    ///  The reference set to which the variant set is mapped. The reference set
    ///  describes the alignment provenance of the variant set, while the
    ///  `referenceBounds` describe the shape of the actual variant data. The
    ///  reference set's reference names are a superset of those found in the
    ///  `referenceBounds`.
    ///
    ///  For example, given a variant set that is mapped to the GRCh38 reference set
    ///  and contains a single variant on reference 'X', `referenceBounds` would
    ///  contain only an entry for 'X', while the associated reference set
    ///  enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_bounds" field.</summary>
    public const int ReferenceBoundsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.ReferenceBound> _repeated_referenceBounds_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Genomics.V1.ReferenceBound.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.ReferenceBound> referenceBounds_ = new pbc::RepeatedField<global::Google.Genomics.V1.ReferenceBound>();
    /// <summary>
    ///  A list of all references used by the variants in a variant set
    ///  with associated coordinate upper bounds for each one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.ReferenceBound> ReferenceBounds {
      get { return referenceBounds_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.VariantSetMetadata> _repeated_metadata_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Genomics.V1.VariantSetMetadata.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.VariantSetMetadata> metadata_ = new pbc::RepeatedField<global::Google.Genomics.V1.VariantSetMetadata>();
    /// <summary>
    ///  The metadata associated with this variant set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.VariantSetMetadata> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    ///  User-specified, mutable name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    /// <summary>
    ///  A textual description of this variant set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariantSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariantSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatasetId != other.DatasetId) return false;
      if (Id != other.Id) return false;
      if (ReferenceSetId != other.ReferenceSetId) return false;
      if(!referenceBounds_.Equals(other.referenceBounds_)) return false;
      if(!metadata_.Equals(other.metadata_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      hash ^= referenceBounds_.GetHashCode();
      hash ^= metadata_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatasetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatasetId);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      metadata_.WriteTo(output, _repeated_metadata_codec);
      referenceBounds_.WriteTo(output, _repeated_referenceBounds_codec);
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ReferenceSetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      size += referenceBounds_.CalculateSize(_repeated_referenceBounds_codec);
      size += metadata_.CalculateSize(_repeated_metadata_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariantSet other) {
      if (other == null) {
        return;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
      referenceBounds_.Add(other.referenceBounds_);
      metadata_.Add(other.metadata_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DatasetId = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 34: {
            metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
            break;
          }
          case 42: {
            referenceBounds_.AddEntriesFrom(input, _repeated_referenceBounds_codec);
            break;
          }
          case 50: {
            ReferenceSetId = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A variant represents a change in DNA sequence relative to a reference
  ///  sequence. For example, a variant could represent a SNP or an insertion.
  ///  Variants belong to a variant set.
  ///
  ///  For more genomics resource definitions, see [Fundamentals of Google
  ///  Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  ///
  ///  Each of the calls on a variant represent a determination of genotype with
  ///  respect to that variant. For example, a call might assign probability of 0.32
  ///  to the occurrence of a SNP named rs1234 in a sample named NA12345. A call
  ///  belongs to a call set, which contains related calls typically from one
  ///  sample.
  /// </summary>
  public sealed partial class Variant : pb::IMessage<Variant> {
    private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant(Variant other) : this() {
      variantSetId_ = other.variantSetId_;
      id_ = other.id_;
      names_ = other.names_.Clone();
      created_ = other.created_;
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
      referenceBases_ = other.referenceBases_;
      alternateBases_ = other.alternateBases_.Clone();
      quality_ = other.quality_;
      filter_ = other.filter_.Clone();
      info_ = other.info_.Clone();
      calls_ = other.calls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant Clone() {
      return new Variant(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 15;
    private string variantSetId_ = "";
    /// <summary>
    ///  The ID of the variant set this variant belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  The server-generated variant ID, unique across all variants.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "names" field.</summary>
    public const int NamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_names_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Names for the variant, for example a RefSNP ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Names {
      get { return names_; }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 12;
    private long created_;
    /// <summary>
    ///  The date this variant was created, in milliseconds from the epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 14;
    private string referenceName_ = "";
    /// <summary>
    ///  The reference on which this variant occurs.
    ///  (such as `chr20` or `X`)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 16;
    private long start_;
    /// <summary>
    ///  The position at which this variant occurs (0-based).
    ///  This corresponds to the first base of the string of reference bases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 13;
    private long end_;
    /// <summary>
    ///  The end position (0-based) of this variant. This corresponds to the first
    ///  base after the last base in the reference allele. So, the length of
    ///  the reference allele is (end - start). This is useful for variants
    ///  that don't explicitly give alternate bases, for example large deletions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "reference_bases" field.</summary>
    public const int ReferenceBasesFieldNumber = 6;
    private string referenceBases_ = "";
    /// <summary>
    ///  The reference bases for this variant. They start at the given
    ///  position.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceBases {
      get { return referenceBases_; }
      set {
        referenceBases_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alternate_bases" field.</summary>
    public const int AlternateBasesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_alternateBases_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> alternateBases_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The bases that appear instead of the reference bases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AlternateBases {
      get { return alternateBases_; }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 8;
    private double quality_;
    /// <summary>
    ///  A measure of how likely this variant is to be real.
    ///  A higher value is better.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_filter_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> filter_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  A list of filters (normally quality filters) this variant has failed.
    ///  `PASS` indicates this variant has passed all filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Filter {
      get { return filter_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 82);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  A map of additional variant information. This must be of the form
    ///  map&lt;string, string[]> (string key mapping to a list of string values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "calls" field.</summary>
    public const int CallsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.VariantCall> _repeated_calls_codec
        = pb::FieldCodec.ForMessage(90, global::Google.Genomics.V1.VariantCall.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.VariantCall> calls_ = new pbc::RepeatedField<global::Google.Genomics.V1.VariantCall>();
    /// <summary>
    ///  The variant calls for this particular variant. Each one represents the
    ///  determination of genotype with respect to this variant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.VariantCall> Calls {
      get { return calls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      if (Id != other.Id) return false;
      if(!names_.Equals(other.names_)) return false;
      if (Created != other.Created) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (ReferenceBases != other.ReferenceBases) return false;
      if(!alternateBases_.Equals(other.alternateBases_)) return false;
      if (Quality != other.Quality) return false;
      if(!filter_.Equals(other.filter_)) return false;
      if (!Info.Equals(other.Info)) return false;
      if(!calls_.Equals(other.calls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= names_.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (ReferenceBases.Length != 0) hash ^= ReferenceBases.GetHashCode();
      hash ^= alternateBases_.GetHashCode();
      if (Quality != 0D) hash ^= Quality.GetHashCode();
      hash ^= filter_.GetHashCode();
      hash ^= Info.GetHashCode();
      hash ^= calls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      names_.WriteTo(output, _repeated_names_codec);
      if (ReferenceBases.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ReferenceBases);
      }
      alternateBases_.WriteTo(output, _repeated_alternateBases_codec);
      if (Quality != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Quality);
      }
      filter_.WriteTo(output, _repeated_filter_codec);
      info_.WriteTo(output, _map_info_codec);
      calls_.WriteTo(output, _repeated_calls_codec);
      if (Created != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Created);
      }
      if (End != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(End);
      }
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ReferenceName);
      }
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(VariantSetId);
      }
      if (Start != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Start);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += names_.CalculateSize(_repeated_names_codec);
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (ReferenceBases.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceBases);
      }
      size += alternateBases_.CalculateSize(_repeated_alternateBases_codec);
      if (Quality != 0D) {
        size += 1 + 8;
      }
      size += filter_.CalculateSize(_repeated_filter_codec);
      size += info_.CalculateSize(_map_info_codec);
      size += calls_.CalculateSize(_repeated_calls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variant other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      names_.Add(other.names_);
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.ReferenceBases.Length != 0) {
        ReferenceBases = other.ReferenceBases;
      }
      alternateBases_.Add(other.alternateBases_);
      if (other.Quality != 0D) {
        Quality = other.Quality;
      }
      filter_.Add(other.filter_);
      info_.Add(other.info_);
      calls_.Add(other.calls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            names_.AddEntriesFrom(input, _repeated_names_codec);
            break;
          }
          case 50: {
            ReferenceBases = input.ReadString();
            break;
          }
          case 58: {
            alternateBases_.AddEntriesFrom(input, _repeated_alternateBases_codec);
            break;
          }
          case 65: {
            Quality = input.ReadDouble();
            break;
          }
          case 74: {
            filter_.AddEntriesFrom(input, _repeated_filter_codec);
            break;
          }
          case 82: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
          case 90: {
            calls_.AddEntriesFrom(input, _repeated_calls_codec);
            break;
          }
          case 96: {
            Created = input.ReadInt64();
            break;
          }
          case 104: {
            End = input.ReadInt64();
            break;
          }
          case 114: {
            ReferenceName = input.ReadString();
            break;
          }
          case 122: {
            VariantSetId = input.ReadString();
            break;
          }
          case 128: {
            Start = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A call represents the determination of genotype with respect to a particular
  ///  variant. It may include associated information such as quality and phasing.
  ///  For example, a call might assign a probability of 0.32 to the occurrence of
  ///  a SNP named rs1234 in a call set with the name NA12345.
  /// </summary>
  public sealed partial class VariantCall : pb::IMessage<VariantCall> {
    private static readonly pb::MessageParser<VariantCall> _parser = new pb::MessageParser<VariantCall>(() => new VariantCall());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariantCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantCall(VariantCall other) : this() {
      callSetId_ = other.callSetId_;
      callSetName_ = other.callSetName_;
      genotype_ = other.genotype_.Clone();
      phaseset_ = other.phaseset_;
      genotypeLikelihood_ = other.genotypeLikelihood_.Clone();
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantCall Clone() {
      return new VariantCall(this);
    }

    /// <summary>Field number for the "call_set_id" field.</summary>
    public const int CallSetIdFieldNumber = 8;
    private string callSetId_ = "";
    /// <summary>
    ///  The ID of the call set this variant call belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallSetId {
      get { return callSetId_; }
      set {
        callSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_set_name" field.</summary>
    public const int CallSetNameFieldNumber = 9;
    private string callSetName_ = "";
    /// <summary>
    ///  The name of the call set this variant call belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallSetName {
      get { return callSetName_; }
      set {
        callSetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "genotype" field.</summary>
    public const int GenotypeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_genotype_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> genotype_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  The genotype of this variant call. Each value represents either the value
    ///  of the `referenceBases` field or a 1-based index into
    ///  `alternateBases`. If a variant had a `referenceBases`
    ///  value of `T` and an `alternateBases`
    ///  value of `["A", "C"]`, and the `genotype` was
    ///  `[2, 1]`, that would mean the call
    ///  represented the heterozygous value `CA` for this variant.
    ///  If the `genotype` was instead `[0, 1]`, the
    ///  represented value would be `TA`. Ordering of the
    ///  genotype values is important if the `phaseset` is present.
    ///  If a genotype is not called (that is, a `.` is present in the
    ///  GT string) -1 is returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Genotype {
      get { return genotype_; }
    }

    /// <summary>Field number for the "phaseset" field.</summary>
    public const int PhasesetFieldNumber = 5;
    private string phaseset_ = "";
    /// <summary>
    ///  If this field is present, this variant call's genotype ordering implies
    ///  the phase of the bases and is consistent with any other variant calls in
    ///  the same reference sequence which have the same phaseset value.
    ///  When importing data from VCF, if the genotype data was phased but no
    ///  phase set was specified this field will be set to `*`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phaseset {
      get { return phaseset_; }
      set {
        phaseset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "genotype_likelihood" field.</summary>
    public const int GenotypeLikelihoodFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_genotypeLikelihood_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> genotypeLikelihood_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///  The genotype likelihoods for this variant call. Each array entry
    ///  represents how likely a specific genotype is for this call. The value
    ///  ordering is defined by the GL tag in the VCF spec.
    ///  If Phred-scaled genotype likelihood scores (PL) are available and
    ///  log10(P) genotype likelihood scores (GL) are not, PL scores are converted
    ///  to GL scores.  If both are available, PL scores are stored in `info`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> GenotypeLikelihood {
      get { return genotypeLikelihood_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 18);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  A map of additional variant call information. This must be of the form
    ///  map&lt;string, string[]> (string key mapping to a list of string values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariantCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariantCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallSetId != other.CallSetId) return false;
      if (CallSetName != other.CallSetName) return false;
      if(!genotype_.Equals(other.genotype_)) return false;
      if (Phaseset != other.Phaseset) return false;
      if(!genotypeLikelihood_.Equals(other.genotypeLikelihood_)) return false;
      if (!Info.Equals(other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallSetId.Length != 0) hash ^= CallSetId.GetHashCode();
      if (CallSetName.Length != 0) hash ^= CallSetName.GetHashCode();
      hash ^= genotype_.GetHashCode();
      if (Phaseset.Length != 0) hash ^= Phaseset.GetHashCode();
      hash ^= genotypeLikelihood_.GetHashCode();
      hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _map_info_codec);
      if (Phaseset.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Phaseset);
      }
      genotypeLikelihood_.WriteTo(output, _repeated_genotypeLikelihood_codec);
      genotype_.WriteTo(output, _repeated_genotype_codec);
      if (CallSetId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CallSetId);
      }
      if (CallSetName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CallSetName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallSetId);
      }
      if (CallSetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallSetName);
      }
      size += genotype_.CalculateSize(_repeated_genotype_codec);
      if (Phaseset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phaseset);
      }
      size += genotypeLikelihood_.CalculateSize(_repeated_genotypeLikelihood_codec);
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariantCall other) {
      if (other == null) {
        return;
      }
      if (other.CallSetId.Length != 0) {
        CallSetId = other.CallSetId;
      }
      if (other.CallSetName.Length != 0) {
        CallSetName = other.CallSetName;
      }
      genotype_.Add(other.genotype_);
      if (other.Phaseset.Length != 0) {
        Phaseset = other.Phaseset;
      }
      genotypeLikelihood_.Add(other.genotypeLikelihood_);
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
          case 42: {
            Phaseset = input.ReadString();
            break;
          }
          case 50:
          case 49: {
            genotypeLikelihood_.AddEntriesFrom(input, _repeated_genotypeLikelihood_codec);
            break;
          }
          case 58:
          case 56: {
            genotype_.AddEntriesFrom(input, _repeated_genotype_codec);
            break;
          }
          case 66: {
            CallSetId = input.ReadString();
            break;
          }
          case 74: {
            CallSetName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A call set is a collection of variant calls, typically for one sample. It
  ///  belongs to a variant set.
  ///
  ///  For more genomics resource definitions, see [Fundamentals of Google
  ///  Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  /// </summary>
  public sealed partial class CallSet : pb::IMessage<CallSet> {
    private static readonly pb::MessageParser<CallSet> _parser = new pb::MessageParser<CallSet>(() => new CallSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallSet(CallSet other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      sampleId_ = other.sampleId_;
      variantSetIds_ = other.variantSetIds_.Clone();
      created_ = other.created_;
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallSet Clone() {
      return new CallSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  The server-generated call set ID, unique across all call sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  The call set name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sample_id" field.</summary>
    public const int SampleIdFieldNumber = 7;
    private string sampleId_ = "";
    /// <summary>
    ///  The sample ID this call set corresponds to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SampleId {
      get { return sampleId_; }
      set {
        sampleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variant_set_ids" field.</summary>
    public const int VariantSetIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_variantSetIds_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> variantSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The IDs of the variant sets this call set belongs to. This field must
    ///  have exactly length one, as a call set belongs to a single variant set.
    ///  This field is repeated for compatibility with the
    ///  [GA4GH 0.5.1
    ///  API](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variants.avdl#L76).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VariantSetIds {
      get { return variantSetIds_; }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 5;
    private long created_;
    /// <summary>
    ///  The date this call set was created in milliseconds from the epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 34);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  A map of additional call set information. This must be of the form
    ///  map&lt;string, string[]> (string key mapping to a list of string values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SampleId != other.SampleId) return false;
      if(!variantSetIds_.Equals(other.variantSetIds_)) return false;
      if (Created != other.Created) return false;
      if (!Info.Equals(other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SampleId.Length != 0) hash ^= SampleId.GetHashCode();
      hash ^= variantSetIds_.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      info_.WriteTo(output, _map_info_codec);
      if (Created != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Created);
      }
      variantSetIds_.WriteTo(output, _repeated_variantSetIds_codec);
      if (SampleId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SampleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SampleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SampleId);
      }
      size += variantSetIds_.CalculateSize(_repeated_variantSetIds_codec);
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SampleId.Length != 0) {
        SampleId = other.SampleId;
      }
      variantSetIds_.Add(other.variantSetIds_);
      if (other.Created != 0L) {
        Created = other.Created;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
          case 40: {
            Created = input.ReadInt64();
            break;
          }
          case 50: {
            variantSetIds_.AddEntriesFrom(input, _repeated_variantSetIds_codec);
            break;
          }
          case 58: {
            SampleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ReferenceBound records an upper bound for the starting coordinate of
  ///  variants in a particular reference.
  /// </summary>
  public sealed partial class ReferenceBound : pb::IMessage<ReferenceBound> {
    private static readonly pb::MessageParser<ReferenceBound> _parser = new pb::MessageParser<ReferenceBound>(() => new ReferenceBound());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceBound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceBound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceBound(ReferenceBound other) : this() {
      referenceName_ = other.referenceName_;
      upperBound_ = other.upperBound_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceBound Clone() {
      return new ReferenceBound(this);
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 1;
    private string referenceName_ = "";
    /// <summary>
    ///  The name of the reference associated with this reference bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 2;
    private long upperBound_;
    /// <summary>
    ///  An upper bound (inclusive) on the starting coordinate of any
    ///  variant in the reference sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpperBound {
      get { return upperBound_; }
      set {
        upperBound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceBound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceBound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferenceName != other.ReferenceName) return false;
      if (UpperBound != other.UpperBound) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (UpperBound != 0L) hash ^= UpperBound.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReferenceName);
      }
      if (UpperBound != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpperBound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (UpperBound != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpperBound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceBound other) {
      if (other == null) {
        return;
      }
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.UpperBound != 0L) {
        UpperBound = other.UpperBound;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReferenceName = input.ReadString();
            break;
          }
          case 16: {
            UpperBound = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The variant data import request.
  /// </summary>
  public sealed partial class ImportVariantsRequest : pb::IMessage<ImportVariantsRequest> {
    private static readonly pb::MessageParser<ImportVariantsRequest> _parser = new pb::MessageParser<ImportVariantsRequest>(() => new ImportVariantsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportVariantsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportVariantsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportVariantsRequest(ImportVariantsRequest other) : this() {
      variantSetId_ = other.variantSetId_;
      sourceUris_ = other.sourceUris_.Clone();
      format_ = other.format_;
      normalizeReferenceNames_ = other.normalizeReferenceNames_;
      infoMergeConfig_ = other.infoMergeConfig_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportVariantsRequest Clone() {
      return new ImportVariantsRequest(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 1;
    private string variantSetId_ = "";
    /// <summary>
    ///  Required. The variant set to which variant data should be imported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_uris" field.</summary>
    public const int SourceUrisFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sourceUris_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sourceUris_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  A list of URIs referencing variant files in Google Cloud Storage. URIs can
    ///  include wildcards [as described
    ///  here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
    ///  Note that recursive wildcards ('**') are not supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SourceUris {
      get { return sourceUris_; }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 3;
    private global::Google.Genomics.V1.ImportVariantsRequest.Types.Format format_ = 0;
    /// <summary>
    ///  The format of the variant data being imported. If unspecified, defaults to
    ///  to `VCF`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.ImportVariantsRequest.Types.Format Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "normalize_reference_names" field.</summary>
    public const int NormalizeReferenceNamesFieldNumber = 5;
    private bool normalizeReferenceNames_;
    /// <summary>
    ///  Convert reference names to the canonical representation.
    ///  hg19 haploytypes (those reference names containing "_hap")
    ///  are not modified in any way.
    ///  All other reference names are modified according to the following rules:
    ///  The reference name is capitalized.
    ///  The "chr" prefix is dropped for all autosomes and sex chromsomes.
    ///  For example "chr17" becomes "17" and "chrX" becomes "X".
    ///  All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NormalizeReferenceNames {
      get { return normalizeReferenceNames_; }
      set {
        normalizeReferenceNames_ = value;
      }
    }

    /// <summary>Field number for the "info_merge_config" field.</summary>
    public const int InfoMergeConfigFieldNumber = 6;
    private static readonly pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation>.Codec _map_infoMergeConfig_codec
        = new pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Google.Genomics.V1.InfoMergeOperation) x), 50);
    private readonly pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation> infoMergeConfig_ = new pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation>();
    /// <summary>
    ///  A mapping between info field keys and the InfoMergeOperations to
    ///  be performed on them. This is plumbed down to the MergeVariantRequests
    ///  generated by the resulting import job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation> InfoMergeConfig {
      get { return infoMergeConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportVariantsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportVariantsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      if(!sourceUris_.Equals(other.sourceUris_)) return false;
      if (Format != other.Format) return false;
      if (NormalizeReferenceNames != other.NormalizeReferenceNames) return false;
      if (!InfoMergeConfig.Equals(other.InfoMergeConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      hash ^= sourceUris_.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (NormalizeReferenceNames != false) hash ^= NormalizeReferenceNames.GetHashCode();
      hash ^= InfoMergeConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantSetId);
      }
      sourceUris_.WriteTo(output, _repeated_sourceUris_codec);
      if (Format != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Format);
      }
      if (NormalizeReferenceNames != false) {
        output.WriteRawTag(40);
        output.WriteBool(NormalizeReferenceNames);
      }
      infoMergeConfig_.WriteTo(output, _map_infoMergeConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      size += sourceUris_.CalculateSize(_repeated_sourceUris_codec);
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (NormalizeReferenceNames != false) {
        size += 1 + 1;
      }
      size += infoMergeConfig_.CalculateSize(_map_infoMergeConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportVariantsRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
      sourceUris_.Add(other.sourceUris_);
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.NormalizeReferenceNames != false) {
        NormalizeReferenceNames = other.NormalizeReferenceNames;
      }
      infoMergeConfig_.Add(other.infoMergeConfig_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantSetId = input.ReadString();
            break;
          }
          case 18: {
            sourceUris_.AddEntriesFrom(input, _repeated_sourceUris_codec);
            break;
          }
          case 24: {
            format_ = (global::Google.Genomics.V1.ImportVariantsRequest.Types.Format) input.ReadEnum();
            break;
          }
          case 40: {
            NormalizeReferenceNames = input.ReadBool();
            break;
          }
          case 50: {
            infoMergeConfig_.AddEntriesFrom(input, _map_infoMergeConfig_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImportVariantsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Format {
        [pbr::OriginalName("FORMAT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  VCF (Variant Call Format). The VCF files should be uncompressed. gVCF is
        ///  also supported.
        /// </summary>
        [pbr::OriginalName("FORMAT_VCF")] Vcf = 1,
        /// <summary>
        ///  Complete Genomics masterVarBeta format. The masterVarBeta files should
        ///  be bzip2 compressed.
        /// </summary>
        [pbr::OriginalName("FORMAT_COMPLETE_GENOMICS")] CompleteGenomics = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  The variant data import response.
  /// </summary>
  public sealed partial class ImportVariantsResponse : pb::IMessage<ImportVariantsResponse> {
    private static readonly pb::MessageParser<ImportVariantsResponse> _parser = new pb::MessageParser<ImportVariantsResponse>(() => new ImportVariantsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportVariantsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportVariantsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportVariantsResponse(ImportVariantsResponse other) : this() {
      callSetIds_ = other.callSetIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportVariantsResponse Clone() {
      return new ImportVariantsResponse(this);
    }

    /// <summary>Field number for the "call_set_ids" field.</summary>
    public const int CallSetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_callSetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> callSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  IDs of the call sets created during the import.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CallSetIds {
      get { return callSetIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportVariantsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportVariantsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!callSetIds_.Equals(other.callSetIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= callSetIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      callSetIds_.WriteTo(output, _repeated_callSetIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += callSetIds_.CalculateSize(_repeated_callSetIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportVariantsResponse other) {
      if (other == null) {
        return;
      }
      callSetIds_.Add(other.callSetIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            callSetIds_.AddEntriesFrom(input, _repeated_callSetIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The CreateVariantSet request
  /// </summary>
  public sealed partial class CreateVariantSetRequest : pb::IMessage<CreateVariantSetRequest> {
    private static readonly pb::MessageParser<CreateVariantSetRequest> _parser = new pb::MessageParser<CreateVariantSetRequest>(() => new CreateVariantSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateVariantSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariantSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariantSetRequest(CreateVariantSetRequest other) : this() {
      VariantSet = other.variantSet_ != null ? other.VariantSet.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariantSetRequest Clone() {
      return new CreateVariantSetRequest(this);
    }

    /// <summary>Field number for the "variant_set" field.</summary>
    public const int VariantSetFieldNumber = 1;
    private global::Google.Genomics.V1.VariantSet variantSet_;
    /// <summary>
    ///  Required. The variant set to be created. Must have a valid `datasetId`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantSet VariantSet {
      get { return variantSet_; }
      set {
        variantSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateVariantSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateVariantSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VariantSet, other.VariantSet)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (variantSet_ != null) hash ^= VariantSet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (variantSet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VariantSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (variantSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantSet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateVariantSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.variantSet_ != null) {
        if (variantSet_ == null) {
          variantSet_ = new global::Google.Genomics.V1.VariantSet();
        }
        VariantSet.MergeFrom(other.VariantSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (variantSet_ == null) {
              variantSet_ = new global::Google.Genomics.V1.VariantSet();
            }
            input.ReadMessage(variantSet_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The variant data export request.
  /// </summary>
  public sealed partial class ExportVariantSetRequest : pb::IMessage<ExportVariantSetRequest> {
    private static readonly pb::MessageParser<ExportVariantSetRequest> _parser = new pb::MessageParser<ExportVariantSetRequest>(() => new ExportVariantSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportVariantSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportVariantSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportVariantSetRequest(ExportVariantSetRequest other) : this() {
      variantSetId_ = other.variantSetId_;
      callSetIds_ = other.callSetIds_.Clone();
      projectId_ = other.projectId_;
      format_ = other.format_;
      bigqueryDataset_ = other.bigqueryDataset_;
      bigqueryTable_ = other.bigqueryTable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportVariantSetRequest Clone() {
      return new ExportVariantSetRequest(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 1;
    private string variantSetId_ = "";
    /// <summary>
    ///  Required. The ID of the variant set that contains variant data which
    ///  should be exported. The caller must have READ access to this variant set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_set_ids" field.</summary>
    public const int CallSetIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_callSetIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> callSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If provided, only variant call information from the specified call sets
    ///  will be exported. By default all variant calls are exported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CallSetIds {
      get { return callSetIds_; }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 3;
    private string projectId_ = "";
    /// <summary>
    ///  Required. The Google Cloud project ID that owns the destination
    ///  BigQuery dataset. The caller must have WRITE access to this project.  This
    ///  project will also own the resulting export job.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 4;
    private global::Google.Genomics.V1.ExportVariantSetRequest.Types.Format format_ = 0;
    /// <summary>
    ///  The format for the exported data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.ExportVariantSetRequest.Types.Format Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "bigquery_dataset" field.</summary>
    public const int BigqueryDatasetFieldNumber = 5;
    private string bigqueryDataset_ = "";
    /// <summary>
    ///  Required. The BigQuery dataset to export data to. This dataset must already
    ///  exist. Note that this is distinct from the Genomics concept of "dataset".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BigqueryDataset {
      get { return bigqueryDataset_; }
      set {
        bigqueryDataset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bigquery_table" field.</summary>
    public const int BigqueryTableFieldNumber = 6;
    private string bigqueryTable_ = "";
    /// <summary>
    ///  Required. The BigQuery table to export data to.
    ///  If the table doesn't exist, it will be created. If it already exists, it
    ///  will be overwritten.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BigqueryTable {
      get { return bigqueryTable_; }
      set {
        bigqueryTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportVariantSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportVariantSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      if(!callSetIds_.Equals(other.callSetIds_)) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Format != other.Format) return false;
      if (BigqueryDataset != other.BigqueryDataset) return false;
      if (BigqueryTable != other.BigqueryTable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      hash ^= callSetIds_.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Format != 0) hash ^= Format.GetHashCode();
      if (BigqueryDataset.Length != 0) hash ^= BigqueryDataset.GetHashCode();
      if (BigqueryTable.Length != 0) hash ^= BigqueryTable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantSetId);
      }
      callSetIds_.WriteTo(output, _repeated_callSetIds_codec);
      if (ProjectId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectId);
      }
      if (Format != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Format);
      }
      if (BigqueryDataset.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BigqueryDataset);
      }
      if (BigqueryTable.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BigqueryTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      size += callSetIds_.CalculateSize(_repeated_callSetIds_codec);
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (BigqueryDataset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BigqueryDataset);
      }
      if (BigqueryTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BigqueryTable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportVariantSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
      callSetIds_.Add(other.callSetIds_);
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      if (other.BigqueryDataset.Length != 0) {
        BigqueryDataset = other.BigqueryDataset;
      }
      if (other.BigqueryTable.Length != 0) {
        BigqueryTable = other.BigqueryTable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantSetId = input.ReadString();
            break;
          }
          case 18: {
            callSetIds_.AddEntriesFrom(input, _repeated_callSetIds_codec);
            break;
          }
          case 26: {
            ProjectId = input.ReadString();
            break;
          }
          case 32: {
            format_ = (global::Google.Genomics.V1.ExportVariantSetRequest.Types.Format) input.ReadEnum();
            break;
          }
          case 42: {
            BigqueryDataset = input.ReadString();
            break;
          }
          case 50: {
            BigqueryTable = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ExportVariantSetRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Format {
        [pbr::OriginalName("FORMAT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  Export the data to Google BigQuery.
        /// </summary>
        [pbr::OriginalName("FORMAT_BIGQUERY")] Bigquery = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///  The variant set request.
  /// </summary>
  public sealed partial class GetVariantSetRequest : pb::IMessage<GetVariantSetRequest> {
    private static readonly pb::MessageParser<GetVariantSetRequest> _parser = new pb::MessageParser<GetVariantSetRequest>(() => new GetVariantSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVariantSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVariantSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVariantSetRequest(GetVariantSetRequest other) : this() {
      variantSetId_ = other.variantSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVariantSetRequest Clone() {
      return new GetVariantSetRequest(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 1;
    private string variantSetId_ = "";
    /// <summary>
    ///  Required. The ID of the variant set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVariantSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVariantSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVariantSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The search variant sets request.
  /// </summary>
  public sealed partial class SearchVariantSetsRequest : pb::IMessage<SearchVariantSetsRequest> {
    private static readonly pb::MessageParser<SearchVariantSetsRequest> _parser = new pb::MessageParser<SearchVariantSetsRequest>(() => new SearchVariantSetsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchVariantSetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantSetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantSetsRequest(SearchVariantSetsRequest other) : this() {
      datasetIds_ = other.datasetIds_.Clone();
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantSetsRequest Clone() {
      return new SearchVariantSetsRequest(this);
    }

    /// <summary>Field number for the "dataset_ids" field.</summary>
    public const int DatasetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_datasetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> datasetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Exactly one dataset ID must be provided here. Only variant sets which
    ///  belong to this dataset will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DatasetIds {
      get { return datasetIds_; }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 1024.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchVariantSetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchVariantSetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datasetIds_.Equals(other.datasetIds_)) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datasetIds_.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datasetIds_.WriteTo(output, _repeated_datasetIds_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datasetIds_.CalculateSize(_repeated_datasetIds_codec);
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchVariantSetsRequest other) {
      if (other == null) {
        return;
      }
      datasetIds_.Add(other.datasetIds_);
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datasetIds_.AddEntriesFrom(input, _repeated_datasetIds_codec);
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The search variant sets response.
  /// </summary>
  public sealed partial class SearchVariantSetsResponse : pb::IMessage<SearchVariantSetsResponse> {
    private static readonly pb::MessageParser<SearchVariantSetsResponse> _parser = new pb::MessageParser<SearchVariantSetsResponse>(() => new SearchVariantSetsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchVariantSetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantSetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantSetsResponse(SearchVariantSetsResponse other) : this() {
      variantSets_ = other.variantSets_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantSetsResponse Clone() {
      return new SearchVariantSetsResponse(this);
    }

    /// <summary>Field number for the "variant_sets" field.</summary>
    public const int VariantSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.VariantSet> _repeated_variantSets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.VariantSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.VariantSet> variantSets_ = new pbc::RepeatedField<global::Google.Genomics.V1.VariantSet>();
    /// <summary>
    ///  The variant sets belonging to the requested dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.VariantSet> VariantSets {
      get { return variantSets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchVariantSetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchVariantSetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variantSets_.Equals(other.variantSets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variantSets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variantSets_.WriteTo(output, _repeated_variantSets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variantSets_.CalculateSize(_repeated_variantSets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchVariantSetsResponse other) {
      if (other == null) {
        return;
      }
      variantSets_.Add(other.variantSets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variantSets_.AddEntriesFrom(input, _repeated_variantSets_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The delete variant set request.
  /// </summary>
  public sealed partial class DeleteVariantSetRequest : pb::IMessage<DeleteVariantSetRequest> {
    private static readonly pb::MessageParser<DeleteVariantSetRequest> _parser = new pb::MessageParser<DeleteVariantSetRequest>(() => new DeleteVariantSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteVariantSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteVariantSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteVariantSetRequest(DeleteVariantSetRequest other) : this() {
      variantSetId_ = other.variantSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteVariantSetRequest Clone() {
      return new DeleteVariantSetRequest(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 1;
    private string variantSetId_ = "";
    /// <summary>
    ///  The ID of the variant set to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteVariantSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteVariantSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteVariantSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateVariantSetRequest : pb::IMessage<UpdateVariantSetRequest> {
    private static readonly pb::MessageParser<UpdateVariantSetRequest> _parser = new pb::MessageParser<UpdateVariantSetRequest>(() => new UpdateVariantSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVariantSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariantSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariantSetRequest(UpdateVariantSetRequest other) : this() {
      variantSetId_ = other.variantSetId_;
      VariantSet = other.variantSet_ != null ? other.VariantSet.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariantSetRequest Clone() {
      return new UpdateVariantSetRequest(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 1;
    private string variantSetId_ = "";
    /// <summary>
    ///  The ID of the variant to be updated (must already exist).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variant_set" field.</summary>
    public const int VariantSetFieldNumber = 2;
    private global::Google.Genomics.V1.VariantSet variantSet_;
    /// <summary>
    ///  The new variant data. Only the variant_set.metadata will be considered
    ///  for update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantSet VariantSet {
      get { return variantSet_; }
      set {
        variantSet_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  An optional mask specifying which fields to update. Supported fields:
    ///
    ///  * [metadata][google.genomics.v1.VariantSet.metadata].
    ///  * [name][google.genomics.v1.VariantSet.name].
    ///  * [description][google.genomics.v1.VariantSet.description].
    ///
    ///  Leaving `updateMask` unset is equivalent to specifying all mutable
    ///  fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVariantSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVariantSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      if (!object.Equals(VariantSet, other.VariantSet)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      if (variantSet_ != null) hash ^= VariantSet.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantSetId);
      }
      if (variantSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VariantSet);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      if (variantSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantSet);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVariantSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
      if (other.variantSet_ != null) {
        if (variantSet_ == null) {
          variantSet_ = new global::Google.Genomics.V1.VariantSet();
        }
        VariantSet.MergeFrom(other.VariantSet);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantSetId = input.ReadString();
            break;
          }
          case 18: {
            if (variantSet_ == null) {
              variantSet_ = new global::Google.Genomics.V1.VariantSet();
            }
            input.ReadMessage(variantSet_);
            break;
          }
          case 42: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The variant search request.
  /// </summary>
  public sealed partial class SearchVariantsRequest : pb::IMessage<SearchVariantsRequest> {
    private static readonly pb::MessageParser<SearchVariantsRequest> _parser = new pb::MessageParser<SearchVariantsRequest>(() => new SearchVariantsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchVariantsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantsRequest(SearchVariantsRequest other) : this() {
      variantSetIds_ = other.variantSetIds_.Clone();
      variantName_ = other.variantName_;
      callSetIds_ = other.callSetIds_.Clone();
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      maxCalls_ = other.maxCalls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantsRequest Clone() {
      return new SearchVariantsRequest(this);
    }

    /// <summary>Field number for the "variant_set_ids" field.</summary>
    public const int VariantSetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_variantSetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> variantSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  At most one variant set ID must be provided. Only variants from this
    ///  variant set will be returned. If omitted, a call set id must be included in
    ///  the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VariantSetIds {
      get { return variantSetIds_; }
    }

    /// <summary>Field number for the "variant_name" field.</summary>
    public const int VariantNameFieldNumber = 2;
    private string variantName_ = "";
    /// <summary>
    ///  Only return variants which have exactly this name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantName {
      get { return variantName_; }
      set {
        variantName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_set_ids" field.</summary>
    public const int CallSetIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_callSetIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> callSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Only return variant calls which belong to call sets with these ids.
    ///  Leaving this blank returns all variant calls. If a variant has no
    ///  calls belonging to any of these call sets, it won't be returned at all.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CallSetIds {
      get { return callSetIds_; }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 4;
    private string referenceName_ = "";
    /// <summary>
    ///  Required. Only return variants in this reference sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 5;
    private long start_;
    /// <summary>
    ///  The beginning of the window (0-based, inclusive) for which
    ///  overlapping variants should be returned. If unspecified, defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 6;
    private long end_;
    /// <summary>
    ///  The end of the window, 0-based exclusive. If unspecified or 0, defaults to
    ///  the length of the reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 7;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 8;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of variants to return in a single page. If unspecified,
    ///  defaults to 5000. The maximum value is 10000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "max_calls" field.</summary>
    public const int MaxCallsFieldNumber = 9;
    private int maxCalls_;
    /// <summary>
    ///  The maximum number of calls to return in a single page. Note that this
    ///  limit may be exceeded in the event that a matching variant contains more
    ///  calls than the requested maximum. If unspecified, defaults to 5000. The
    ///  maximum value is 10000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCalls {
      get { return maxCalls_; }
      set {
        maxCalls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchVariantsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchVariantsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variantSetIds_.Equals(other.variantSetIds_)) return false;
      if (VariantName != other.VariantName) return false;
      if(!callSetIds_.Equals(other.callSetIds_)) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if (MaxCalls != other.MaxCalls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variantSetIds_.GetHashCode();
      if (VariantName.Length != 0) hash ^= VariantName.GetHashCode();
      hash ^= callSetIds_.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (MaxCalls != 0) hash ^= MaxCalls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variantSetIds_.WriteTo(output, _repeated_variantSetIds_codec);
      if (VariantName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VariantName);
      }
      callSetIds_.WriteTo(output, _repeated_callSetIds_codec);
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(End);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PageSize);
      }
      if (MaxCalls != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxCalls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variantSetIds_.CalculateSize(_repeated_variantSetIds_codec);
      if (VariantName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantName);
      }
      size += callSetIds_.CalculateSize(_repeated_callSetIds_codec);
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (MaxCalls != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCalls);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchVariantsRequest other) {
      if (other == null) {
        return;
      }
      variantSetIds_.Add(other.variantSetIds_);
      if (other.VariantName.Length != 0) {
        VariantName = other.VariantName;
      }
      callSetIds_.Add(other.callSetIds_);
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.MaxCalls != 0) {
        MaxCalls = other.MaxCalls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variantSetIds_.AddEntriesFrom(input, _repeated_variantSetIds_codec);
            break;
          }
          case 18: {
            VariantName = input.ReadString();
            break;
          }
          case 26: {
            callSetIds_.AddEntriesFrom(input, _repeated_callSetIds_codec);
            break;
          }
          case 34: {
            ReferenceName = input.ReadString();
            break;
          }
          case 40: {
            Start = input.ReadInt64();
            break;
          }
          case 48: {
            End = input.ReadInt64();
            break;
          }
          case 58: {
            PageToken = input.ReadString();
            break;
          }
          case 64: {
            PageSize = input.ReadInt32();
            break;
          }
          case 72: {
            MaxCalls = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The variant search response.
  /// </summary>
  public sealed partial class SearchVariantsResponse : pb::IMessage<SearchVariantsResponse> {
    private static readonly pb::MessageParser<SearchVariantsResponse> _parser = new pb::MessageParser<SearchVariantsResponse>(() => new SearchVariantsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchVariantsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantsResponse(SearchVariantsResponse other) : this() {
      variants_ = other.variants_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariantsResponse Clone() {
      return new SearchVariantsResponse(this);
    }

    /// <summary>Field number for the "variants" field.</summary>
    public const int VariantsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Variant> _repeated_variants_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Variant.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Variant> variants_ = new pbc::RepeatedField<global::Google.Genomics.V1.Variant>();
    /// <summary>
    ///  The list of matching Variants.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Variant> Variants {
      get { return variants_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchVariantsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchVariantsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variants_.Equals(other.variants_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variants_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variants_.WriteTo(output, _repeated_variants_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variants_.CalculateSize(_repeated_variants_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchVariantsResponse other) {
      if (other == null) {
        return;
      }
      variants_.Add(other.variants_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variants_.AddEntriesFrom(input, _repeated_variants_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateVariantRequest : pb::IMessage<CreateVariantRequest> {
    private static readonly pb::MessageParser<CreateVariantRequest> _parser = new pb::MessageParser<CreateVariantRequest>(() => new CreateVariantRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateVariantRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariantRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariantRequest(CreateVariantRequest other) : this() {
      Variant = other.variant_ != null ? other.Variant.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariantRequest Clone() {
      return new CreateVariantRequest(this);
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 1;
    private global::Google.Genomics.V1.Variant variant_;
    /// <summary>
    ///  The variant to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Variant Variant {
      get { return variant_; }
      set {
        variant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateVariantRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateVariantRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Variant, other.Variant)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (variant_ != null) hash ^= Variant.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (variant_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Variant);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (variant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateVariantRequest other) {
      if (other == null) {
        return;
      }
      if (other.variant_ != null) {
        if (variant_ == null) {
          variant_ = new global::Google.Genomics.V1.Variant();
        }
        Variant.MergeFrom(other.Variant);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (variant_ == null) {
              variant_ = new global::Google.Genomics.V1.Variant();
            }
            input.ReadMessage(variant_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateVariantRequest : pb::IMessage<UpdateVariantRequest> {
    private static readonly pb::MessageParser<UpdateVariantRequest> _parser = new pb::MessageParser<UpdateVariantRequest>(() => new UpdateVariantRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVariantRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariantRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariantRequest(UpdateVariantRequest other) : this() {
      variantId_ = other.variantId_;
      Variant = other.variant_ != null ? other.Variant.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariantRequest Clone() {
      return new UpdateVariantRequest(this);
    }

    /// <summary>Field number for the "variant_id" field.</summary>
    public const int VariantIdFieldNumber = 1;
    private string variantId_ = "";
    /// <summary>
    ///  The ID of the variant to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantId {
      get { return variantId_; }
      set {
        variantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 2;
    private global::Google.Genomics.V1.Variant variant_;
    /// <summary>
    ///  The new variant data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Variant Variant {
      get { return variant_; }
      set {
        variant_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  An optional mask specifying which fields to update. At this time, mutable
    ///  fields are [names][google.genomics.v1.Variant.names] and
    ///  [info][google.genomics.v1.Variant.info]. Acceptable values are "names" and
    ///  "info". If unspecified, all mutable fields will be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVariantRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVariantRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantId != other.VariantId) return false;
      if (!object.Equals(Variant, other.Variant)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantId.Length != 0) hash ^= VariantId.GetHashCode();
      if (variant_ != null) hash ^= Variant.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantId);
      }
      if (variant_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Variant);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantId);
      }
      if (variant_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVariantRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantId.Length != 0) {
        VariantId = other.VariantId;
      }
      if (other.variant_ != null) {
        if (variant_ == null) {
          variant_ = new global::Google.Genomics.V1.Variant();
        }
        Variant.MergeFrom(other.Variant);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantId = input.ReadString();
            break;
          }
          case 18: {
            if (variant_ == null) {
              variant_ = new global::Google.Genomics.V1.Variant();
            }
            input.ReadMessage(variant_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteVariantRequest : pb::IMessage<DeleteVariantRequest> {
    private static readonly pb::MessageParser<DeleteVariantRequest> _parser = new pb::MessageParser<DeleteVariantRequest>(() => new DeleteVariantRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteVariantRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteVariantRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteVariantRequest(DeleteVariantRequest other) : this() {
      variantId_ = other.variantId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteVariantRequest Clone() {
      return new DeleteVariantRequest(this);
    }

    /// <summary>Field number for the "variant_id" field.</summary>
    public const int VariantIdFieldNumber = 1;
    private string variantId_ = "";
    /// <summary>
    ///  The ID of the variant to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantId {
      get { return variantId_; }
      set {
        variantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteVariantRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteVariantRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantId != other.VariantId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantId.Length != 0) hash ^= VariantId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteVariantRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantId.Length != 0) {
        VariantId = other.VariantId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetVariantRequest : pb::IMessage<GetVariantRequest> {
    private static readonly pb::MessageParser<GetVariantRequest> _parser = new pb::MessageParser<GetVariantRequest>(() => new GetVariantRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVariantRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVariantRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVariantRequest(GetVariantRequest other) : this() {
      variantId_ = other.variantId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVariantRequest Clone() {
      return new GetVariantRequest(this);
    }

    /// <summary>Field number for the "variant_id" field.</summary>
    public const int VariantIdFieldNumber = 1;
    private string variantId_ = "";
    /// <summary>
    ///  The ID of the variant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantId {
      get { return variantId_; }
      set {
        variantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVariantRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVariantRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantId != other.VariantId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantId.Length != 0) hash ^= VariantId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVariantRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantId.Length != 0) {
        VariantId = other.VariantId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MergeVariantsRequest : pb::IMessage<MergeVariantsRequest> {
    private static readonly pb::MessageParser<MergeVariantsRequest> _parser = new pb::MessageParser<MergeVariantsRequest>(() => new MergeVariantsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MergeVariantsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeVariantsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeVariantsRequest(MergeVariantsRequest other) : this() {
      variantSetId_ = other.variantSetId_;
      variants_ = other.variants_.Clone();
      infoMergeConfig_ = other.infoMergeConfig_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeVariantsRequest Clone() {
      return new MergeVariantsRequest(this);
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 1;
    private string variantSetId_ = "";
    /// <summary>
    ///  The destination variant set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variants" field.</summary>
    public const int VariantsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Variant> _repeated_variants_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Genomics.V1.Variant.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Variant> variants_ = new pbc::RepeatedField<global::Google.Genomics.V1.Variant>();
    /// <summary>
    ///  The variants to be merged with existing variants.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Variant> Variants {
      get { return variants_; }
    }

    /// <summary>Field number for the "info_merge_config" field.</summary>
    public const int InfoMergeConfigFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation>.Codec _map_infoMergeConfig_codec
        = new pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Google.Genomics.V1.InfoMergeOperation) x), 26);
    private readonly pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation> infoMergeConfig_ = new pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation>();
    /// <summary>
    ///  A mapping between info field keys and the InfoMergeOperations to
    ///  be performed on them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Genomics.V1.InfoMergeOperation> InfoMergeConfig {
      get { return infoMergeConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MergeVariantsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MergeVariantsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariantSetId != other.VariantSetId) return false;
      if(!variants_.Equals(other.variants_)) return false;
      if (!InfoMergeConfig.Equals(other.InfoMergeConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      hash ^= variants_.GetHashCode();
      hash ^= InfoMergeConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VariantSetId);
      }
      variants_.WriteTo(output, _repeated_variants_codec);
      infoMergeConfig_.WriteTo(output, _map_infoMergeConfig_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      size += variants_.CalculateSize(_repeated_variants_codec);
      size += infoMergeConfig_.CalculateSize(_map_infoMergeConfig_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MergeVariantsRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
      variants_.Add(other.variants_);
      infoMergeConfig_.Add(other.infoMergeConfig_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VariantSetId = input.ReadString();
            break;
          }
          case 18: {
            variants_.AddEntriesFrom(input, _repeated_variants_codec);
            break;
          }
          case 26: {
            infoMergeConfig_.AddEntriesFrom(input, _map_infoMergeConfig_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The call set search request.
  /// </summary>
  public sealed partial class SearchCallSetsRequest : pb::IMessage<SearchCallSetsRequest> {
    private static readonly pb::MessageParser<SearchCallSetsRequest> _parser = new pb::MessageParser<SearchCallSetsRequest>(() => new SearchCallSetsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchCallSetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchCallSetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchCallSetsRequest(SearchCallSetsRequest other) : this() {
      variantSetIds_ = other.variantSetIds_.Clone();
      name_ = other.name_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchCallSetsRequest Clone() {
      return new SearchCallSetsRequest(this);
    }

    /// <summary>Field number for the "variant_set_ids" field.</summary>
    public const int VariantSetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_variantSetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> variantSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Restrict the query to call sets within the given variant sets. At least one
    ///  ID must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VariantSetIds {
      get { return variantSetIds_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  Only return call sets for which a substring of the name matches this
    ///  string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 1024.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchCallSetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchCallSetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variantSetIds_.Equals(other.variantSetIds_)) return false;
      if (Name != other.Name) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variantSetIds_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variantSetIds_.WriteTo(output, _repeated_variantSetIds_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variantSetIds_.CalculateSize(_repeated_variantSetIds_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchCallSetsRequest other) {
      if (other == null) {
        return;
      }
      variantSetIds_.Add(other.variantSetIds_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variantSetIds_.AddEntriesFrom(input, _repeated_variantSetIds_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The call set search response.
  /// </summary>
  public sealed partial class SearchCallSetsResponse : pb::IMessage<SearchCallSetsResponse> {
    private static readonly pb::MessageParser<SearchCallSetsResponse> _parser = new pb::MessageParser<SearchCallSetsResponse>(() => new SearchCallSetsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchCallSetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchCallSetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchCallSetsResponse(SearchCallSetsResponse other) : this() {
      callSets_ = other.callSets_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchCallSetsResponse Clone() {
      return new SearchCallSetsResponse(this);
    }

    /// <summary>Field number for the "call_sets" field.</summary>
    public const int CallSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.CallSet> _repeated_callSets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.CallSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.CallSet> callSets_ = new pbc::RepeatedField<global::Google.Genomics.V1.CallSet>();
    /// <summary>
    ///  The list of matching call sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.CallSet> CallSets {
      get { return callSets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchCallSetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchCallSetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!callSets_.Equals(other.callSets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= callSets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      callSets_.WriteTo(output, _repeated_callSets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += callSets_.CalculateSize(_repeated_callSets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchCallSetsResponse other) {
      if (other == null) {
        return;
      }
      callSets_.Add(other.callSets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            callSets_.AddEntriesFrom(input, _repeated_callSets_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateCallSetRequest : pb::IMessage<CreateCallSetRequest> {
    private static readonly pb::MessageParser<CreateCallSetRequest> _parser = new pb::MessageParser<CreateCallSetRequest>(() => new CreateCallSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCallSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCallSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCallSetRequest(CreateCallSetRequest other) : this() {
      CallSet = other.callSet_ != null ? other.CallSet.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCallSetRequest Clone() {
      return new CreateCallSetRequest(this);
    }

    /// <summary>Field number for the "call_set" field.</summary>
    public const int CallSetFieldNumber = 1;
    private global::Google.Genomics.V1.CallSet callSet_;
    /// <summary>
    ///  The call set to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.CallSet CallSet {
      get { return callSet_; }
      set {
        callSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCallSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCallSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CallSet, other.CallSet)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (callSet_ != null) hash ^= CallSet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (callSet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CallSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (callSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallSet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCallSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.callSet_ != null) {
        if (callSet_ == null) {
          callSet_ = new global::Google.Genomics.V1.CallSet();
        }
        CallSet.MergeFrom(other.CallSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (callSet_ == null) {
              callSet_ = new global::Google.Genomics.V1.CallSet();
            }
            input.ReadMessage(callSet_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateCallSetRequest : pb::IMessage<UpdateCallSetRequest> {
    private static readonly pb::MessageParser<UpdateCallSetRequest> _parser = new pb::MessageParser<UpdateCallSetRequest>(() => new UpdateCallSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCallSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCallSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCallSetRequest(UpdateCallSetRequest other) : this() {
      callSetId_ = other.callSetId_;
      CallSet = other.callSet_ != null ? other.CallSet.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCallSetRequest Clone() {
      return new UpdateCallSetRequest(this);
    }

    /// <summary>Field number for the "call_set_id" field.</summary>
    public const int CallSetIdFieldNumber = 1;
    private string callSetId_ = "";
    /// <summary>
    ///  The ID of the call set to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallSetId {
      get { return callSetId_; }
      set {
        callSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_set" field.</summary>
    public const int CallSetFieldNumber = 2;
    private global::Google.Genomics.V1.CallSet callSet_;
    /// <summary>
    ///  The new call set data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.CallSet CallSet {
      get { return callSet_; }
      set {
        callSet_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  An optional mask specifying which fields to update. At this time, the only
    ///  mutable field is [name][google.genomics.v1.CallSet.name]. The only
    ///  acceptable value is "name". If unspecified, all mutable fields will be
    ///  updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCallSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCallSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallSetId != other.CallSetId) return false;
      if (!object.Equals(CallSet, other.CallSet)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallSetId.Length != 0) hash ^= CallSetId.GetHashCode();
      if (callSet_ != null) hash ^= CallSet.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallSetId);
      }
      if (callSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallSet);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallSetId);
      }
      if (callSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallSet);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCallSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallSetId.Length != 0) {
        CallSetId = other.CallSetId;
      }
      if (other.callSet_ != null) {
        if (callSet_ == null) {
          callSet_ = new global::Google.Genomics.V1.CallSet();
        }
        CallSet.MergeFrom(other.CallSet);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallSetId = input.ReadString();
            break;
          }
          case 18: {
            if (callSet_ == null) {
              callSet_ = new global::Google.Genomics.V1.CallSet();
            }
            input.ReadMessage(callSet_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteCallSetRequest : pb::IMessage<DeleteCallSetRequest> {
    private static readonly pb::MessageParser<DeleteCallSetRequest> _parser = new pb::MessageParser<DeleteCallSetRequest>(() => new DeleteCallSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteCallSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCallSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCallSetRequest(DeleteCallSetRequest other) : this() {
      callSetId_ = other.callSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCallSetRequest Clone() {
      return new DeleteCallSetRequest(this);
    }

    /// <summary>Field number for the "call_set_id" field.</summary>
    public const int CallSetIdFieldNumber = 1;
    private string callSetId_ = "";
    /// <summary>
    ///  The ID of the call set to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallSetId {
      get { return callSetId_; }
      set {
        callSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteCallSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteCallSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallSetId != other.CallSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallSetId.Length != 0) hash ^= CallSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteCallSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallSetId.Length != 0) {
        CallSetId = other.CallSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCallSetRequest : pb::IMessage<GetCallSetRequest> {
    private static readonly pb::MessageParser<GetCallSetRequest> _parser = new pb::MessageParser<GetCallSetRequest>(() => new GetCallSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCallSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCallSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCallSetRequest(GetCallSetRequest other) : this() {
      callSetId_ = other.callSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCallSetRequest Clone() {
      return new GetCallSetRequest(this);
    }

    /// <summary>Field number for the "call_set_id" field.</summary>
    public const int CallSetIdFieldNumber = 1;
    private string callSetId_ = "";
    /// <summary>
    ///  The ID of the call set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallSetId {
      get { return callSetId_; }
      set {
        callSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCallSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCallSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallSetId != other.CallSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallSetId.Length != 0) hash ^= CallSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCallSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallSetId.Length != 0) {
        CallSetId = other.CallSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CallSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The stream variants request.
  /// </summary>
  public sealed partial class StreamVariantsRequest : pb::IMessage<StreamVariantsRequest> {
    private static readonly pb::MessageParser<StreamVariantsRequest> _parser = new pb::MessageParser<StreamVariantsRequest>(() => new StreamVariantsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamVariantsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamVariantsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamVariantsRequest(StreamVariantsRequest other) : this() {
      projectId_ = other.projectId_;
      variantSetId_ = other.variantSetId_;
      callSetIds_ = other.callSetIds_.Clone();
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamVariantsRequest Clone() {
      return new StreamVariantsRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  The Google Developers Console project ID or number which will be billed
    ///  for this access. The caller must have WRITE access to this project.
    ///  Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variant_set_id" field.</summary>
    public const int VariantSetIdFieldNumber = 2;
    private string variantSetId_ = "";
    /// <summary>
    ///  The variant set ID from which to stream variants.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VariantSetId {
      get { return variantSetId_; }
      set {
        variantSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_set_ids" field.</summary>
    public const int CallSetIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_callSetIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> callSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Only return variant calls which belong to call sets with these IDs.
    ///  Leaving this blank returns all variant calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CallSetIds {
      get { return callSetIds_; }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 4;
    private string referenceName_ = "";
    /// <summary>
    ///  Required. Only return variants in this reference sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 5;
    private long start_;
    /// <summary>
    ///  The beginning of the window (0-based, inclusive) for which
    ///  overlapping variants should be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 6;
    private long end_;
    /// <summary>
    ///  The end of the window (0-based, exclusive) for which overlapping
    ///  variants should be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamVariantsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamVariantsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (VariantSetId != other.VariantSetId) return false;
      if(!callSetIds_.Equals(other.callSetIds_)) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (VariantSetId.Length != 0) hash ^= VariantSetId.GetHashCode();
      hash ^= callSetIds_.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (VariantSetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VariantSetId);
      }
      callSetIds_.WriteTo(output, _repeated_callSetIds_codec);
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (VariantSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariantSetId);
      }
      size += callSetIds_.CalculateSize(_repeated_callSetIds_codec);
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamVariantsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.VariantSetId.Length != 0) {
        VariantSetId = other.VariantSetId;
      }
      callSetIds_.Add(other.callSetIds_);
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            VariantSetId = input.ReadString();
            break;
          }
          case 26: {
            callSetIds_.AddEntriesFrom(input, _repeated_callSetIds_codec);
            break;
          }
          case 34: {
            ReferenceName = input.ReadString();
            break;
          }
          case 40: {
            Start = input.ReadInt64();
            break;
          }
          case 48: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamVariantsResponse : pb::IMessage<StreamVariantsResponse> {
    private static readonly pb::MessageParser<StreamVariantsResponse> _parser = new pb::MessageParser<StreamVariantsResponse>(() => new StreamVariantsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamVariantsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.VariantsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamVariantsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamVariantsResponse(StreamVariantsResponse other) : this() {
      variants_ = other.variants_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamVariantsResponse Clone() {
      return new StreamVariantsResponse(this);
    }

    /// <summary>Field number for the "variants" field.</summary>
    public const int VariantsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Variant> _repeated_variants_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Variant.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Variant> variants_ = new pbc::RepeatedField<global::Google.Genomics.V1.Variant>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Variant> Variants {
      get { return variants_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamVariantsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamVariantsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variants_.Equals(other.variants_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variants_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variants_.WriteTo(output, _repeated_variants_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variants_.CalculateSize(_repeated_variants_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamVariantsResponse other) {
      if (other == null) {
        return;
      }
      variants_.Add(other.variants_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variants_.AddEntriesFrom(input, _repeated_variants_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
