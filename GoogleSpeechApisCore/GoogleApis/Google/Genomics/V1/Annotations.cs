// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/annotations.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Genomics.V1 {

  /// <summary>Holder for reflection information generated from google/genomics/v1/annotations.proto</summary>
  public static partial class AnnotationsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/genomics/v1/annotations.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnnotationsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvZ2Vub21pY3MvdjEvYW5ub3RhdGlvbnMucHJvdG8SEmdvb2ds",
            "ZS5nZW5vbWljcy52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxob",
            "Z29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGiBnb29nbGUvcHJvdG9idWYv",
            "ZmllbGRfbWFzay5wcm90bxocZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhdnb29nbGUvcnBj",
            "L3N0YXR1cy5wcm90byKhAgoNQW5ub3RhdGlvblNldBIKCgJpZBgBIAEoCRIS",
            "CgpkYXRhc2V0X2lkGAIgASgJEhgKEHJlZmVyZW5jZV9zZXRfaWQYAyABKAkS",
            "DAoEbmFtZRgEIAEoCRISCgpzb3VyY2VfdXJpGAUgASgJEjAKBHR5cGUYBiAB",
            "KA4yIi5nb29nbGUuZ2Vub21pY3MudjEuQW5ub3RhdGlvblR5cGUSOQoEaW5m",
            "bxgRIAMoCzIrLmdvb2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uU2V0Lklu",
            "Zm9FbnRyeRpHCglJbmZvRW50cnkSCwoDa2V5GAEgASgJEikKBXZhbHVlGAIg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkxpc3RWYWx1ZToCOAEizwMKCkFubm90",
            "YXRpb24SCgoCaWQYASABKAkSGQoRYW5ub3RhdGlvbl9zZXRfaWQYAiABKAkS",
            "DAoEbmFtZRgDIAEoCRIUCgxyZWZlcmVuY2VfaWQYBCABKAkSFgoOcmVmZXJl",
            "bmNlX25hbWUYBSABKAkSDQoFc3RhcnQYBiABKAMSCwoDZW5kGAcgASgDEhYK",
            "DnJldmVyc2Vfc3RyYW5kGAggASgIEjAKBHR5cGUYCSABKA4yIi5nb29nbGUu",
            "Z2Vub21pY3MudjEuQW5ub3RhdGlvblR5cGUSOAoHdmFyaWFudBgKIAEoCzIl",
            "Lmdvb2dsZS5nZW5vbWljcy52MS5WYXJpYW50QW5ub3RhdGlvbkgAEjQKCnRy",
            "YW5zY3JpcHQYCyABKAsyHi5nb29nbGUuZ2Vub21pY3MudjEuVHJhbnNjcmlw",
            "dEgAEjYKBGluZm8YDCADKAsyKC5nb29nbGUuZ2Vub21pY3MudjEuQW5ub3Rh",
            "dGlvbi5JbmZvRW50cnkaRwoJSW5mb0VudHJ5EgsKA2tleRgBIAEoCRIpCgV2",
            "YWx1ZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWU6AjgBQgcK",
            "BXZhbHVlIvwIChFWYXJpYW50QW5ub3RhdGlvbhI4CgR0eXBlGAEgASgOMiou",
            "Z29vZ2xlLmdlbm9taWNzLnYxLlZhcmlhbnRBbm5vdGF0aW9uLlR5cGUSPAoG",
            "ZWZmZWN0GAIgASgOMiwuZ29vZ2xlLmdlbm9taWNzLnYxLlZhcmlhbnRBbm5v",
            "dGF0aW9uLkVmZmVjdBIXCg9hbHRlcm5hdGVfYmFzZXMYAyABKAkSDwoHZ2Vu",
            "ZV9pZBgEIAEoCRIWCg50cmFuc2NyaXB0X2lkcxgFIAMoCRJLCgpjb25kaXRp",
            "b25zGAYgAygLMjcuZ29vZ2xlLmdlbm9taWNzLnYxLlZhcmlhbnRBbm5vdGF0",
            "aW9uLkNsaW5pY2FsQ29uZGl0aW9uElkKFWNsaW5pY2FsX3NpZ25pZmljYW5j",
            "ZRgHIAEoDjI6Lmdvb2dsZS5nZW5vbWljcy52MS5WYXJpYW50QW5ub3RhdGlv",
            "bi5DbGluaWNhbFNpZ25pZmljYW5jZRp9ChFDbGluaWNhbENvbmRpdGlvbhIN",
            "CgVuYW1lcxgBIAMoCRI0CgxleHRlcm5hbF9pZHMYAiADKAsyHi5nb29nbGUu",
            "Z2Vub21pY3MudjEuRXh0ZXJuYWxJZBISCgpjb25jZXB0X2lkGAMgASgJEg8K",
            "B29taW1faWQYBCABKAkifQoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAAS",
            "DgoKVFlQRV9PVEhFUhABEg0KCUlOU0VSVElPThACEgwKCERFTEVUSU9OEAMS",
            "EAoMU1VCU1RJVFVUSU9OEAQSBwoDU05QEAUSDgoKU1RSVUNUVVJBTBAGEgcK",
            "A0NOVhAHIsMBCgZFZmZlY3QSFgoSRUZGRUNUX1VOU1BFQ0lGSUVEEAASEAoM",
            "RUZGRUNUX09USEVSEAESDgoKRlJBTUVTSElGVBACEhoKFkZSQU1FX1BSRVNF",
            "UlZJTkdfSU5ERUwQAxISCg5TWU5PTllNT1VTX1NOUBAEEhUKEU5PTlNZTk9O",
            "WU1PVVNfU05QEAUSDQoJU1RPUF9HQUlOEAYSDQoJU1RPUF9MT1NTEAcSGgoW",
            "U1BMSUNFX1NJVEVfRElTUlVQVElPThAIIsACChRDbGluaWNhbFNpZ25pZmlj",
            "YW5jZRIlCiFDTElOSUNBTF9TSUdOSUZJQ0FOQ0VfVU5TUEVDSUZJRUQQABIf",
            "ChtDTElOSUNBTF9TSUdOSUZJQ0FOQ0VfT1RIRVIQARINCglVTkNFUlRBSU4Q",
            "AhIKCgZCRU5JR04QAxIRCg1MSUtFTFlfQkVOSUdOEAQSFQoRTElLRUxZX1BB",
            "VEhPR0VOSUMQBRIOCgpQQVRIT0dFTklDEAYSEQoNRFJVR19SRVNQT05TRRAH",
            "EhYKEkhJU1RPQ09NUEFUSUJJTElUWRAIEhcKE0NPTkZFUlNfU0VOU0lUSVZJ",
            "VFkQCRIPCgtSSVNLX0ZBQ1RPUhAKEg8KC0FTU09DSUFUSU9OEAsSDgoKUFJP",
            "VEVDVElWRRAMEhUKEU1VTFRJUExFX1JFUE9SVEVEEA0ilwIKClRyYW5zY3Jp",
            "cHQSDwoHZ2VuZV9pZBgBIAEoCRIyCgVleG9ucxgCIAMoCzIjLmdvb2dsZS5n",
            "ZW5vbWljcy52MS5UcmFuc2NyaXB0LkV4b24SRgoPY29kaW5nX3NlcXVlbmNl",
            "GAMgASgLMi0uZ29vZ2xlLmdlbm9taWNzLnYxLlRyYW5zY3JpcHQuQ29kaW5n",
            "U2VxdWVuY2UaTgoERXhvbhINCgVzdGFydBgBIAEoAxILCgNlbmQYAiABKAMS",
            "KgoFZnJhbWUYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRos",
            "Cg5Db2RpbmdTZXF1ZW5jZRINCgVzdGFydBgBIAEoAxILCgNlbmQYAiABKAMi",
            "LQoKRXh0ZXJuYWxJZBITCgtzb3VyY2VfbmFtZRgBIAEoCRIKCgJpZBgCIAEo",
            "CSJXChpDcmVhdGVBbm5vdGF0aW9uU2V0UmVxdWVzdBI5Cg5hbm5vdGF0aW9u",
            "X3NldBgBIAEoCzIhLmdvb2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uU2V0",
            "IjQKF0dldEFubm90YXRpb25TZXRSZXF1ZXN0EhkKEWFubm90YXRpb25fc2V0",
            "X2lkGAEgASgJIqMBChpVcGRhdGVBbm5vdGF0aW9uU2V0UmVxdWVzdBIZChFh",
            "bm5vdGF0aW9uX3NldF9pZBgBIAEoCRI5Cg5hbm5vdGF0aW9uX3NldBgCIAEo",
            "CzIhLmdvb2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uU2V0Ei8KC3VwZGF0",
            "ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzayI3ChpE",
            "ZWxldGVBbm5vdGF0aW9uU2V0UmVxdWVzdBIZChFhbm5vdGF0aW9uX3NldF9p",
            "ZBgBIAEoCSK0AQobU2VhcmNoQW5ub3RhdGlvblNldHNSZXF1ZXN0EhMKC2Rh",
            "dGFzZXRfaWRzGAEgAygJEhgKEHJlZmVyZW5jZV9zZXRfaWQYAiABKAkSDAoE",
            "bmFtZRgDIAEoCRIxCgV0eXBlcxgEIAMoDjIiLmdvb2dsZS5nZW5vbWljcy52",
            "MS5Bbm5vdGF0aW9uVHlwZRISCgpwYWdlX3Rva2VuGAUgASgJEhEKCXBhZ2Vf",
            "c2l6ZRgGIAEoBSJzChxTZWFyY2hBbm5vdGF0aW9uU2V0c1Jlc3BvbnNlEjoK",
            "D2Fubm90YXRpb25fc2V0cxgBIAMoCzIhLmdvb2dsZS5nZW5vbWljcy52MS5B",
            "bm5vdGF0aW9uU2V0EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJNChdDcmVh",
            "dGVBbm5vdGF0aW9uUmVxdWVzdBIyCgphbm5vdGF0aW9uGAEgASgLMh4uZ29v",
            "Z2xlLmdlbm9taWNzLnYxLkFubm90YXRpb24iaAodQmF0Y2hDcmVhdGVBbm5v",
            "dGF0aW9uc1JlcXVlc3QSMwoLYW5ub3RhdGlvbnMYASADKAsyHi5nb29nbGUu",
            "Z2Vub21pY3MudjEuQW5ub3RhdGlvbhISCgpyZXF1ZXN0X2lkGAIgASgJIswB",
            "Ch5CYXRjaENyZWF0ZUFubm90YXRpb25zUmVzcG9uc2USSQoHZW50cmllcxgB",
            "IAMoCzI4Lmdvb2dsZS5nZW5vbWljcy52MS5CYXRjaENyZWF0ZUFubm90YXRp",
            "b25zUmVzcG9uc2UuRW50cnkaXwoFRW50cnkSIgoGc3RhdHVzGAEgASgLMhIu",
            "Z29vZ2xlLnJwYy5TdGF0dXMSMgoKYW5ub3RhdGlvbhgCIAEoCzIeLmdvb2ds",
            "ZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uIi0KFEdldEFubm90YXRpb25SZXF1",
            "ZXN0EhUKDWFubm90YXRpb25faWQYASABKAkilQEKF1VwZGF0ZUFubm90YXRp",
            "b25SZXF1ZXN0EhUKDWFubm90YXRpb25faWQYASABKAkSMgoKYW5ub3RhdGlv",
            "bhgCIAEoCzIeLmdvb2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uEi8KC3Vw",
            "ZGF0ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzayIw",
            "ChdEZWxldGVBbm5vdGF0aW9uUmVxdWVzdBIVCg1hbm5vdGF0aW9uX2lkGAEg",
            "ASgJIrgBChhTZWFyY2hBbm5vdGF0aW9uc1JlcXVlc3QSGgoSYW5ub3RhdGlv",
            "bl9zZXRfaWRzGAEgAygJEhYKDHJlZmVyZW5jZV9pZBgCIAEoCUgAEhgKDnJl",
            "ZmVyZW5jZV9uYW1lGAMgASgJSAASDQoFc3RhcnQYBCABKAMSCwoDZW5kGAUg",
            "ASgDEhIKCnBhZ2VfdG9rZW4YBiABKAkSEQoJcGFnZV9zaXplGAcgASgFQgsK",
            "CXJlZmVyZW5jZSJpChlTZWFyY2hBbm5vdGF0aW9uc1Jlc3BvbnNlEjMKC2Fu",
            "bm90YXRpb25zGAEgAygLMh4uZ29vZ2xlLmdlbm9taWNzLnYxLkFubm90YXRp",
            "b24SFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJKmUKDkFubm90YXRpb25UeXBl",
            "Eh8KG0FOTk9UQVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEgsKB0dFTkVSSUMQ",
            "ARILCgdWQVJJQU5UEAISCAoER0VORRADEg4KClRSQU5TQ1JJUFQQBDKEDQoT",
            "QW5ub3RhdGlvblNlcnZpY2VWMRKUAQoTQ3JlYXRlQW5ub3RhdGlvblNldBIu",
            "Lmdvb2dsZS5nZW5vbWljcy52MS5DcmVhdGVBbm5vdGF0aW9uU2V0UmVxdWVz",
            "dBohLmdvb2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uU2V0IiqC0+STAiQi",
            "Ei92MS9hbm5vdGF0aW9uc2V0czoOYW5ub3RhdGlvbl9zZXQSkgEKEEdldEFu",
            "bm90YXRpb25TZXQSKy5nb29nbGUuZ2Vub21pY3MudjEuR2V0QW5ub3RhdGlv",
            "blNldFJlcXVlc3QaIS5nb29nbGUuZ2Vub21pY3MudjEuQW5ub3RhdGlvblNl",
            "dCIugtPkkwIoEiYvdjEvYW5ub3RhdGlvbnNldHMve2Fubm90YXRpb25fc2V0",
            "X2lkfRKoAQoTVXBkYXRlQW5ub3RhdGlvblNldBIuLmdvb2dsZS5nZW5vbWlj",
            "cy52MS5VcGRhdGVBbm5vdGF0aW9uU2V0UmVxdWVzdBohLmdvb2dsZS5nZW5v",
            "bWljcy52MS5Bbm5vdGF0aW9uU2V0Ij6C0+STAjgaJi92MS9hbm5vdGF0aW9u",
            "c2V0cy97YW5ub3RhdGlvbl9zZXRfaWR9Og5hbm5vdGF0aW9uX3NldBKNAQoT",
            "RGVsZXRlQW5ub3RhdGlvblNldBIuLmdvb2dsZS5nZW5vbWljcy52MS5EZWxl",
            "dGVBbm5vdGF0aW9uU2V0UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIugtPkkwIoKiYvdjEvYW5ub3RhdGlvbnNldHMve2Fubm90YXRpb25fc2V0",
            "X2lkfRKfAQoUU2VhcmNoQW5ub3RhdGlvblNldHMSLy5nb29nbGUuZ2Vub21p",
            "Y3MudjEuU2VhcmNoQW5ub3RhdGlvblNldHNSZXF1ZXN0GjAuZ29vZ2xlLmdl",
            "bm9taWNzLnYxLlNlYXJjaEFubm90YXRpb25TZXRzUmVzcG9uc2UiJILT5JMC",
            "HiIZL3YxL2Fubm90YXRpb25zZXRzL3NlYXJjaDoBKhKEAQoQQ3JlYXRlQW5u",
            "b3RhdGlvbhIrLmdvb2dsZS5nZW5vbWljcy52MS5DcmVhdGVBbm5vdGF0aW9u",
            "UmVxdWVzdBoeLmdvb2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uIiOC0+ST",
            "Ah0iDy92MS9hbm5vdGF0aW9uczoKYW5ub3RhdGlvbhKnAQoWQmF0Y2hDcmVh",
            "dGVBbm5vdGF0aW9ucxIxLmdvb2dsZS5nZW5vbWljcy52MS5CYXRjaENyZWF0",
            "ZUFubm90YXRpb25zUmVxdWVzdBoyLmdvb2dsZS5nZW5vbWljcy52MS5CYXRj",
            "aENyZWF0ZUFubm90YXRpb25zUmVzcG9uc2UiJoLT5JMCICIbL3YxL2Fubm90",
            "YXRpb25zOmJhdGNoQ3JlYXRlOgEqEoIBCg1HZXRBbm5vdGF0aW9uEiguZ29v",
            "Z2xlLmdlbm9taWNzLnYxLkdldEFubm90YXRpb25SZXF1ZXN0Gh4uZ29vZ2xl",
            "Lmdlbm9taWNzLnYxLkFubm90YXRpb24iJ4LT5JMCIRIfL3YxL2Fubm90YXRp",
            "b25zL3thbm5vdGF0aW9uX2lkfRKUAQoQVXBkYXRlQW5ub3RhdGlvbhIrLmdv",
            "b2dsZS5nZW5vbWljcy52MS5VcGRhdGVBbm5vdGF0aW9uUmVxdWVzdBoeLmdv",
            "b2dsZS5nZW5vbWljcy52MS5Bbm5vdGF0aW9uIjOC0+STAi0aHy92MS9hbm5v",
            "dGF0aW9ucy97YW5ub3RhdGlvbl9pZH06CmFubm90YXRpb24SgAEKEERlbGV0",
            "ZUFubm90YXRpb24SKy5nb29nbGUuZ2Vub21pY3MudjEuRGVsZXRlQW5ub3Rh",
            "dGlvblJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiJ4LT5JMCISof",
            "L3YxL2Fubm90YXRpb25zL3thbm5vdGF0aW9uX2lkfRKTAQoRU2VhcmNoQW5u",
            "b3RhdGlvbnMSLC5nb29nbGUuZ2Vub21pY3MudjEuU2VhcmNoQW5ub3RhdGlv",
            "bnNSZXF1ZXN0Gi0uZ29vZ2xlLmdlbm9taWNzLnYxLlNlYXJjaEFubm90YXRp",
            "b25zUmVzcG9uc2UiIYLT5JMCGyIWL3YxL2Fubm90YXRpb25zL3NlYXJjaDoB",
            "KkJrChZjb20uZ29vZ2xlLmdlbm9taWNzLnYxQhBBbm5vdGF0aW9uc1Byb3Rv",
            "UAFaOmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ2Vu",
            "b21pY3MvdjE7Z2Vub21pY3P4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Genomics.V1.AnnotationType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.AnnotationSet), global::Google.Genomics.V1.AnnotationSet.Parser, new[]{ "Id", "DatasetId", "ReferenceSetId", "Name", "SourceUri", "Type", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.Annotation), global::Google.Genomics.V1.Annotation.Parser, new[]{ "Id", "AnnotationSetId", "Name", "ReferenceId", "ReferenceName", "Start", "End", "ReverseStrand", "Type", "Variant", "Transcript", "Info" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.VariantAnnotation), global::Google.Genomics.V1.VariantAnnotation.Parser, new[]{ "Type", "Effect", "AlternateBases", "GeneId", "TranscriptIds", "Conditions", "ClinicalSignificance" }, null, new[]{ typeof(global::Google.Genomics.V1.VariantAnnotation.Types.Type), typeof(global::Google.Genomics.V1.VariantAnnotation.Types.Effect), typeof(global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalSignificance) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition), global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition.Parser, new[]{ "Names", "ExternalIds", "ConceptId", "OmimId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.Transcript), global::Google.Genomics.V1.Transcript.Parser, new[]{ "GeneId", "Exons", "CodingSequence" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.Transcript.Types.Exon), global::Google.Genomics.V1.Transcript.Types.Exon.Parser, new[]{ "Start", "End", "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.Transcript.Types.CodingSequence), global::Google.Genomics.V1.Transcript.Types.CodingSequence.Parser, new[]{ "Start", "End" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ExternalId), global::Google.Genomics.V1.ExternalId.Parser, new[]{ "SourceName", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CreateAnnotationSetRequest), global::Google.Genomics.V1.CreateAnnotationSetRequest.Parser, new[]{ "AnnotationSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetAnnotationSetRequest), global::Google.Genomics.V1.GetAnnotationSetRequest.Parser, new[]{ "AnnotationSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.UpdateAnnotationSetRequest), global::Google.Genomics.V1.UpdateAnnotationSetRequest.Parser, new[]{ "AnnotationSetId", "AnnotationSet", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.DeleteAnnotationSetRequest), global::Google.Genomics.V1.DeleteAnnotationSetRequest.Parser, new[]{ "AnnotationSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchAnnotationSetsRequest), global::Google.Genomics.V1.SearchAnnotationSetsRequest.Parser, new[]{ "DatasetIds", "ReferenceSetId", "Name", "Types_", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchAnnotationSetsResponse), global::Google.Genomics.V1.SearchAnnotationSetsResponse.Parser, new[]{ "AnnotationSets", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CreateAnnotationRequest), global::Google.Genomics.V1.CreateAnnotationRequest.Parser, new[]{ "Annotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.BatchCreateAnnotationsRequest), global::Google.Genomics.V1.BatchCreateAnnotationsRequest.Parser, new[]{ "Annotations", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.BatchCreateAnnotationsResponse), global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Parser, new[]{ "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry), global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry.Parser, new[]{ "Status", "Annotation" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetAnnotationRequest), global::Google.Genomics.V1.GetAnnotationRequest.Parser, new[]{ "AnnotationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.UpdateAnnotationRequest), global::Google.Genomics.V1.UpdateAnnotationRequest.Parser, new[]{ "AnnotationId", "Annotation", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.DeleteAnnotationRequest), global::Google.Genomics.V1.DeleteAnnotationRequest.Parser, new[]{ "AnnotationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchAnnotationsRequest), global::Google.Genomics.V1.SearchAnnotationsRequest.Parser, new[]{ "AnnotationSetIds", "ReferenceId", "ReferenceName", "Start", "End", "PageToken", "PageSize" }, new[]{ "Reference" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchAnnotationsResponse), global::Google.Genomics.V1.SearchAnnotationsResponse.Parser, new[]{ "Annotations", "NextPageToken" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  When an [Annotation][google.genomics.v1.Annotation] or
  ///  [AnnotationSet][google.genomics.v1.AnnotationSet] is created, if `type` is
  ///  not specified it will be set to `GENERIC`.
  /// </summary>
  public enum AnnotationType {
    [pbr::OriginalName("ANNOTATION_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///  A `GENERIC` annotation type should be used when no other annotation
    ///  type will suffice. This represents an untyped annotation of the reference
    ///  genome.
    /// </summary>
    [pbr::OriginalName("GENERIC")] Generic = 1,
    /// <summary>
    ///  A `VARIANT` annotation type.
    /// </summary>
    [pbr::OriginalName("VARIANT")] Variant = 2,
    /// <summary>
    ///  A `GENE` annotation type represents the existence of a gene at the
    ///  associated reference coordinates. The start coordinate is typically the
    ///  gene's transcription start site and the end is typically the end of the
    ///  gene's last exon.
    /// </summary>
    [pbr::OriginalName("GENE")] Gene = 3,
    /// <summary>
    ///  A `TRANSCRIPT` annotation type represents the assertion that a
    ///  particular region of the reference genome may be transcribed as RNA.
    /// </summary>
    [pbr::OriginalName("TRANSCRIPT")] Transcript = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  An annotation set is a logical grouping of annotations that share consistent
  ///  type information and provenance. Examples of annotation sets include 'all
  ///  genes from refseq', and 'all variant annotations from ClinVar'.
  /// </summary>
  public sealed partial class AnnotationSet : pb::IMessage<AnnotationSet> {
    private static readonly pb::MessageParser<AnnotationSet> _parser = new pb::MessageParser<AnnotationSet>(() => new AnnotationSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotationSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationSet(AnnotationSet other) : this() {
      id_ = other.id_;
      datasetId_ = other.datasetId_;
      referenceSetId_ = other.referenceSetId_;
      name_ = other.name_;
      sourceUri_ = other.sourceUri_;
      type_ = other.type_;
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotationSet Clone() {
      return new AnnotationSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  The server-generated annotation set ID, unique across all annotation sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    ///  The dataset to which this annotation set belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 3;
    private string referenceSetId_ = "";
    /// <summary>
    ///  The ID of the reference set that defines the coordinate space for this
    ///  set's annotations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///  The display name for this annotation set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_uri" field.</summary>
    public const int SourceUriFieldNumber = 5;
    private string sourceUri_ = "";
    /// <summary>
    ///  The source URI describing the file from which this annotation set was
    ///  generated, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceUri {
      get { return sourceUri_; }
      set {
        sourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::Google.Genomics.V1.AnnotationType type_ = 0;
    /// <summary>
    ///  The type of annotations contained within this set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.AnnotationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 17;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 138);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  A map of additional read alignment information. This must be of the form
    ///  map&lt;string, string[]> (string key mapping to a list of string values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotationSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotationSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DatasetId != other.DatasetId) return false;
      if (ReferenceSetId != other.ReferenceSetId) return false;
      if (Name != other.Name) return false;
      if (SourceUri != other.SourceUri) return false;
      if (Type != other.Type) return false;
      if (!Info.Equals(other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SourceUri.Length != 0) hash ^= SourceUri.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferenceSetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (SourceUri.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SourceUri);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      info_.WriteTo(output, _map_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SourceUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceUri);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotationSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SourceUri.Length != 0) {
        SourceUri = other.SourceUri;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ReferenceSetId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            SourceUri = input.ReadString();
            break;
          }
          case 48: {
            type_ = (global::Google.Genomics.V1.AnnotationType) input.ReadEnum();
            break;
          }
          case 138: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  An annotation describes a region of reference genome. The value of an
  ///  annotation may be one of several canonical types, supplemented by arbitrary
  ///  info tags. An annotation is not inherently associated with a specific
  ///  sample or individual (though a client could choose to use annotations in
  ///  this way). Example canonical annotation types are `GENE` and
  ///  `VARIANT`.
  /// </summary>
  public sealed partial class Annotation : pb::IMessage<Annotation> {
    private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation(Annotation other) : this() {
      id_ = other.id_;
      annotationSetId_ = other.annotationSetId_;
      name_ = other.name_;
      referenceId_ = other.referenceId_;
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
      reverseStrand_ = other.reverseStrand_;
      type_ = other.type_;
      info_ = other.info_.Clone();
      switch (other.ValueCase) {
        case ValueOneofCase.Variant:
          Variant = other.Variant.Clone();
          break;
        case ValueOneofCase.Transcript:
          Transcript = other.Transcript.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Annotation Clone() {
      return new Annotation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  The server-generated annotation ID, unique across all annotations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "annotation_set_id" field.</summary>
    public const int AnnotationSetIdFieldNumber = 2;
    private string annotationSetId_ = "";
    /// <summary>
    ///  The annotation set to which this annotation belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSetId {
      get { return annotationSetId_; }
      set {
        annotationSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  The display name of this annotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_id" field.</summary>
    public const int ReferenceIdFieldNumber = 4;
    private string referenceId_ = "";
    /// <summary>
    ///  The ID of the Google Genomics reference associated with this range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceId {
      get { return referenceId_; }
      set {
        referenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 5;
    private string referenceName_ = "";
    /// <summary>
    ///  The display name corresponding to the reference specified by
    ///  `referenceId`, for example `chr1`, `1`, or `chrX`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 6;
    private long start_;
    /// <summary>
    ///  The start position of the range on the reference, 0-based inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 7;
    private long end_;
    /// <summary>
    ///  The end position of the range on the reference, 0-based exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "reverse_strand" field.</summary>
    public const int ReverseStrandFieldNumber = 8;
    private bool reverseStrand_;
    /// <summary>
    ///  Whether this range refers to the reverse strand, as opposed to the forward
    ///  strand. Note that regardless of this field, the start/end position of the
    ///  range always refer to the forward strand.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReverseStrand {
      get { return reverseStrand_; }
      set {
        reverseStrand_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::Google.Genomics.V1.AnnotationType type_ = 0;
    /// <summary>
    ///  The data type for this annotation. Must match the containing annotation
    ///  set's type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.AnnotationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 10;
    /// <summary>
    ///  A variant annotation, which describes the effect of a variant on the
    ///  genome, the coding sequence, and/or higher level consequences at the
    ///  organism level e.g. pathogenicity. This field is only set for annotations
    ///  of type `VARIANT`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantAnnotation Variant {
      get { return valueCase_ == ValueOneofCase.Variant ? (global::Google.Genomics.V1.VariantAnnotation) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Variant;
      }
    }

    /// <summary>Field number for the "transcript" field.</summary>
    public const int TranscriptFieldNumber = 11;
    /// <summary>
    ///  A transcript value represents the assertion that a particular region of
    ///  the reference genome may be transcribed as RNA. An alternative splicing
    ///  pattern would be represented as a separate transcript object. This field
    ///  is only set for annotations of type `TRANSCRIPT`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Transcript Transcript {
      get { return valueCase_ == ValueOneofCase.Transcript ? (global::Google.Genomics.V1.Transcript) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Transcript;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 12;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 98);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  A map of additional read alignment information. This must be of the form
    ///  map&lt;string, string[]> (string key mapping to a list of string values).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Variant = 10,
      Transcript = 11,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Annotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Annotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AnnotationSetId != other.AnnotationSetId) return false;
      if (Name != other.Name) return false;
      if (ReferenceId != other.ReferenceId) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (ReverseStrand != other.ReverseStrand) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Variant, other.Variant)) return false;
      if (!object.Equals(Transcript, other.Transcript)) return false;
      if (!Info.Equals(other.Info)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AnnotationSetId.Length != 0) hash ^= AnnotationSetId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ReferenceId.Length != 0) hash ^= ReferenceId.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (ReverseStrand != false) hash ^= ReverseStrand.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (valueCase_ == ValueOneofCase.Variant) hash ^= Variant.GetHashCode();
      if (valueCase_ == ValueOneofCase.Transcript) hash ^= Transcript.GetHashCode();
      hash ^= Info.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AnnotationSetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnnotationSetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (ReferenceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReferenceId);
      }
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(End);
      }
      if (ReverseStrand != false) {
        output.WriteRawTag(64);
        output.WriteBool(ReverseStrand);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (valueCase_ == ValueOneofCase.Variant) {
        output.WriteRawTag(82);
        output.WriteMessage(Variant);
      }
      if (valueCase_ == ValueOneofCase.Transcript) {
        output.WriteRawTag(90);
        output.WriteMessage(Transcript);
      }
      info_.WriteTo(output, _map_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AnnotationSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSetId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ReferenceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceId);
      }
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (ReverseStrand != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (valueCase_ == ValueOneofCase.Variant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variant);
      }
      if (valueCase_ == ValueOneofCase.Transcript) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transcript);
      }
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Annotation other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AnnotationSetId.Length != 0) {
        AnnotationSetId = other.AnnotationSetId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ReferenceId.Length != 0) {
        ReferenceId = other.ReferenceId;
      }
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.ReverseStrand != false) {
        ReverseStrand = other.ReverseStrand;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      info_.Add(other.info_);
      switch (other.ValueCase) {
        case ValueOneofCase.Variant:
          Variant = other.Variant;
          break;
        case ValueOneofCase.Transcript:
          Transcript = other.Transcript;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AnnotationSetId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            ReferenceId = input.ReadString();
            break;
          }
          case 42: {
            ReferenceName = input.ReadString();
            break;
          }
          case 48: {
            Start = input.ReadInt64();
            break;
          }
          case 56: {
            End = input.ReadInt64();
            break;
          }
          case 64: {
            ReverseStrand = input.ReadBool();
            break;
          }
          case 72: {
            type_ = (global::Google.Genomics.V1.AnnotationType) input.ReadEnum();
            break;
          }
          case 82: {
            global::Google.Genomics.V1.VariantAnnotation subBuilder = new global::Google.Genomics.V1.VariantAnnotation();
            if (valueCase_ == ValueOneofCase.Variant) {
              subBuilder.MergeFrom(Variant);
            }
            input.ReadMessage(subBuilder);
            Variant = subBuilder;
            break;
          }
          case 90: {
            global::Google.Genomics.V1.Transcript subBuilder = new global::Google.Genomics.V1.Transcript();
            if (valueCase_ == ValueOneofCase.Transcript) {
              subBuilder.MergeFrom(Transcript);
            }
            input.ReadMessage(subBuilder);
            Transcript = subBuilder;
            break;
          }
          case 98: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VariantAnnotation : pb::IMessage<VariantAnnotation> {
    private static readonly pb::MessageParser<VariantAnnotation> _parser = new pb::MessageParser<VariantAnnotation>(() => new VariantAnnotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariantAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantAnnotation(VariantAnnotation other) : this() {
      type_ = other.type_;
      effect_ = other.effect_;
      alternateBases_ = other.alternateBases_;
      geneId_ = other.geneId_;
      transcriptIds_ = other.transcriptIds_.Clone();
      conditions_ = other.conditions_.Clone();
      clinicalSignificance_ = other.clinicalSignificance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariantAnnotation Clone() {
      return new VariantAnnotation(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Google.Genomics.V1.VariantAnnotation.Types.Type type_ = 0;
    /// <summary>
    ///  Type has been adapted from ClinVar's list of variant types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantAnnotation.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 2;
    private global::Google.Genomics.V1.VariantAnnotation.Types.Effect effect_ = 0;
    /// <summary>
    ///  Effect of the variant on the coding sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantAnnotation.Types.Effect Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "alternate_bases" field.</summary>
    public const int AlternateBasesFieldNumber = 3;
    private string alternateBases_ = "";
    /// <summary>
    ///  The alternate allele for this variant. If multiple alternate alleles
    ///  exist at this location, create a separate variant for each one, as they
    ///  may represent distinct conditions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlternateBases {
      get { return alternateBases_; }
      set {
        alternateBases_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gene_id" field.</summary>
    public const int GeneIdFieldNumber = 4;
    private string geneId_ = "";
    /// <summary>
    ///  Google annotation ID of the gene affected by this variant. This should
    ///  be provided when the variant is created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeneId {
      get { return geneId_; }
      set {
        geneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transcript_ids" field.</summary>
    public const int TranscriptIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_transcriptIds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> transcriptIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Google annotation IDs of the transcripts affected by this variant. These
    ///  should be provided when the variant is created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TranscriptIds {
      get { return transcriptIds_; }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition> conditions_ = new pbc::RepeatedField<global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition>();
    /// <summary>
    ///  The set of conditions associated with this variant.
    ///  A condition describes the way a variant influences human health.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalCondition> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "clinical_significance" field.</summary>
    public const int ClinicalSignificanceFieldNumber = 7;
    private global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalSignificance clinicalSignificance_ = 0;
    /// <summary>
    ///  Describes the clinical significance of a variant.
    ///  It is adapted from the ClinVar controlled vocabulary for clinical
    ///  significance described at:
    ///  http://www.ncbi.nlm.nih.gov/clinvar/docs/clinsig/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalSignificance ClinicalSignificance {
      get { return clinicalSignificance_; }
      set {
        clinicalSignificance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariantAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariantAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Effect != other.Effect) return false;
      if (AlternateBases != other.AlternateBases) return false;
      if (GeneId != other.GeneId) return false;
      if(!transcriptIds_.Equals(other.transcriptIds_)) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if (ClinicalSignificance != other.ClinicalSignificance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Effect != 0) hash ^= Effect.GetHashCode();
      if (AlternateBases.Length != 0) hash ^= AlternateBases.GetHashCode();
      if (GeneId.Length != 0) hash ^= GeneId.GetHashCode();
      hash ^= transcriptIds_.GetHashCode();
      hash ^= conditions_.GetHashCode();
      if (ClinicalSignificance != 0) hash ^= ClinicalSignificance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Effect != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Effect);
      }
      if (AlternateBases.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AlternateBases);
      }
      if (GeneId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GeneId);
      }
      transcriptIds_.WriteTo(output, _repeated_transcriptIds_codec);
      conditions_.WriteTo(output, _repeated_conditions_codec);
      if (ClinicalSignificance != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ClinicalSignificance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Effect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Effect);
      }
      if (AlternateBases.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlternateBases);
      }
      if (GeneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeneId);
      }
      size += transcriptIds_.CalculateSize(_repeated_transcriptIds_codec);
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      if (ClinicalSignificance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClinicalSignificance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariantAnnotation other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Effect != 0) {
        Effect = other.Effect;
      }
      if (other.AlternateBases.Length != 0) {
        AlternateBases = other.AlternateBases;
      }
      if (other.GeneId.Length != 0) {
        GeneId = other.GeneId;
      }
      transcriptIds_.Add(other.transcriptIds_);
      conditions_.Add(other.conditions_);
      if (other.ClinicalSignificance != 0) {
        ClinicalSignificance = other.ClinicalSignificance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Google.Genomics.V1.VariantAnnotation.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            effect_ = (global::Google.Genomics.V1.VariantAnnotation.Types.Effect) input.ReadEnum();
            break;
          }
          case 26: {
            AlternateBases = input.ReadString();
            break;
          }
          case 34: {
            GeneId = input.ReadString();
            break;
          }
          case 42: {
            transcriptIds_.AddEntriesFrom(input, _repeated_transcriptIds_codec);
            break;
          }
          case 50: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 56: {
            clinicalSignificance_ = (global::Google.Genomics.V1.VariantAnnotation.Types.ClinicalSignificance) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VariantAnnotation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  `TYPE_OTHER` should be used when no other Type will suffice.
        ///  Further explanation of the variant type may be included in the
        ///  [info][google.genomics.v1.Annotation.info] field.
        /// </summary>
        [pbr::OriginalName("TYPE_OTHER")] Other = 1,
        /// <summary>
        ///  `INSERTION` indicates an insertion.
        /// </summary>
        [pbr::OriginalName("INSERTION")] Insertion = 2,
        /// <summary>
        ///  `DELETION` indicates a deletion.
        /// </summary>
        [pbr::OriginalName("DELETION")] Deletion = 3,
        /// <summary>
        ///  `SUBSTITUTION` indicates a block substitution of
        ///  two or more nucleotides.
        /// </summary>
        [pbr::OriginalName("SUBSTITUTION")] Substitution = 4,
        /// <summary>
        ///  `SNP` indicates a single nucleotide polymorphism.
        /// </summary>
        [pbr::OriginalName("SNP")] Snp = 5,
        /// <summary>
        ///  `STRUCTURAL` indicates a large structural variant,
        ///  including chromosomal fusions, inversions, etc.
        /// </summary>
        [pbr::OriginalName("STRUCTURAL")] Structural = 6,
        /// <summary>
        ///  `CNV` indicates a variation in copy number.
        /// </summary>
        [pbr::OriginalName("CNV")] Cnv = 7,
      }

      public enum Effect {
        [pbr::OriginalName("EFFECT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  `EFFECT_OTHER` should be used when no other Effect
        ///  will suffice.
        /// </summary>
        [pbr::OriginalName("EFFECT_OTHER")] Other = 1,
        /// <summary>
        ///  `FRAMESHIFT` indicates a mutation in which the insertion or
        ///  deletion of nucleotides resulted in a frameshift change.
        /// </summary>
        [pbr::OriginalName("FRAMESHIFT")] Frameshift = 2,
        /// <summary>
        ///  `FRAME_PRESERVING_INDEL` indicates a mutation in which a
        ///  multiple of three nucleotides has been inserted or deleted, resulting
        ///  in no change to the reading frame of the coding sequence.
        /// </summary>
        [pbr::OriginalName("FRAME_PRESERVING_INDEL")] FramePreservingIndel = 3,
        /// <summary>
        ///  `SYNONYMOUS_SNP` indicates a single nucleotide polymorphism
        ///  mutation that results in no amino acid change.
        /// </summary>
        [pbr::OriginalName("SYNONYMOUS_SNP")] SynonymousSnp = 4,
        /// <summary>
        ///  `NONSYNONYMOUS_SNP` indicates a single nucleotide
        ///  polymorphism mutation that results in an amino acid change.
        /// </summary>
        [pbr::OriginalName("NONSYNONYMOUS_SNP")] NonsynonymousSnp = 5,
        /// <summary>
        ///  `STOP_GAIN` indicates a mutation that leads to the creation
        ///  of a stop codon at the variant site. Frameshift mutations creating
        ///  downstream stop codons do not count as `STOP_GAIN`.
        /// </summary>
        [pbr::OriginalName("STOP_GAIN")] StopGain = 6,
        /// <summary>
        ///  `STOP_LOSS` indicates a mutation that eliminates a
        ///  stop codon at the variant site.
        /// </summary>
        [pbr::OriginalName("STOP_LOSS")] StopLoss = 7,
        /// <summary>
        ///  `SPLICE_SITE_DISRUPTION` indicates that this variant is
        ///  found in a splice site for the associated transcript, and alters the
        ///  normal splicing pattern.
        /// </summary>
        [pbr::OriginalName("SPLICE_SITE_DISRUPTION")] SpliceSiteDisruption = 8,
      }

      public enum ClinicalSignificance {
        [pbr::OriginalName("CLINICAL_SIGNIFICANCE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  `OTHER` should be used when no other clinical significance
        ///  value will suffice.
        /// </summary>
        [pbr::OriginalName("CLINICAL_SIGNIFICANCE_OTHER")] Other = 1,
        [pbr::OriginalName("UNCERTAIN")] Uncertain = 2,
        [pbr::OriginalName("BENIGN")] Benign = 3,
        [pbr::OriginalName("LIKELY_BENIGN")] LikelyBenign = 4,
        [pbr::OriginalName("LIKELY_PATHOGENIC")] LikelyPathogenic = 5,
        [pbr::OriginalName("PATHOGENIC")] Pathogenic = 6,
        [pbr::OriginalName("DRUG_RESPONSE")] DrugResponse = 7,
        [pbr::OriginalName("HISTOCOMPATIBILITY")] Histocompatibility = 8,
        [pbr::OriginalName("CONFERS_SENSITIVITY")] ConfersSensitivity = 9,
        [pbr::OriginalName("RISK_FACTOR")] RiskFactor = 10,
        [pbr::OriginalName("ASSOCIATION")] Association = 11,
        [pbr::OriginalName("PROTECTIVE")] Protective = 12,
        /// <summary>
        ///  `MULTIPLE_REPORTED` should be used when multiple clinical
        ///  signficances are reported for a variant. The original clinical
        ///  significance values may be provided in the `info` field.
        /// </summary>
        [pbr::OriginalName("MULTIPLE_REPORTED")] MultipleReported = 13,
      }

      public sealed partial class ClinicalCondition : pb::IMessage<ClinicalCondition> {
        private static readonly pb::MessageParser<ClinicalCondition> _parser = new pb::MessageParser<ClinicalCondition>(() => new ClinicalCondition());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClinicalCondition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Genomics.V1.VariantAnnotation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClinicalCondition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClinicalCondition(ClinicalCondition other) : this() {
          names_ = other.names_.Clone();
          externalIds_ = other.externalIds_.Clone();
          conceptId_ = other.conceptId_;
          omimId_ = other.omimId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClinicalCondition Clone() {
          return new ClinicalCondition(this);
        }

        /// <summary>Field number for the "names" field.</summary>
        public const int NamesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_names_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
        /// <summary>
        ///  A set of names for the condition.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Names {
          get { return names_; }
        }

        /// <summary>Field number for the "external_ids" field.</summary>
        public const int ExternalIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Genomics.V1.ExternalId> _repeated_externalIds_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Genomics.V1.ExternalId.Parser);
        private readonly pbc::RepeatedField<global::Google.Genomics.V1.ExternalId> externalIds_ = new pbc::RepeatedField<global::Google.Genomics.V1.ExternalId>();
        /// <summary>
        ///  The set of external IDs for this condition.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Genomics.V1.ExternalId> ExternalIds {
          get { return externalIds_; }
        }

        /// <summary>Field number for the "concept_id" field.</summary>
        public const int ConceptIdFieldNumber = 3;
        private string conceptId_ = "";
        /// <summary>
        ///  The MedGen concept id associated with this gene.
        ///  Search for these IDs at http://www.ncbi.nlm.nih.gov/medgen/
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ConceptId {
          get { return conceptId_; }
          set {
            conceptId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "omim_id" field.</summary>
        public const int OmimIdFieldNumber = 4;
        private string omimId_ = "";
        /// <summary>
        ///  The OMIM id for this condition.
        ///  Search for these IDs at http://omim.org/
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OmimId {
          get { return omimId_; }
          set {
            omimId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClinicalCondition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClinicalCondition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!names_.Equals(other.names_)) return false;
          if(!externalIds_.Equals(other.externalIds_)) return false;
          if (ConceptId != other.ConceptId) return false;
          if (OmimId != other.OmimId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= names_.GetHashCode();
          hash ^= externalIds_.GetHashCode();
          if (ConceptId.Length != 0) hash ^= ConceptId.GetHashCode();
          if (OmimId.Length != 0) hash ^= OmimId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          names_.WriteTo(output, _repeated_names_codec);
          externalIds_.WriteTo(output, _repeated_externalIds_codec);
          if (ConceptId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ConceptId);
          }
          if (OmimId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(OmimId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += names_.CalculateSize(_repeated_names_codec);
          size += externalIds_.CalculateSize(_repeated_externalIds_codec);
          if (ConceptId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptId);
          }
          if (OmimId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OmimId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClinicalCondition other) {
          if (other == null) {
            return;
          }
          names_.Add(other.names_);
          externalIds_.Add(other.externalIds_);
          if (other.ConceptId.Length != 0) {
            ConceptId = other.ConceptId;
          }
          if (other.OmimId.Length != 0) {
            OmimId = other.OmimId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                names_.AddEntriesFrom(input, _repeated_names_codec);
                break;
              }
              case 18: {
                externalIds_.AddEntriesFrom(input, _repeated_externalIds_codec);
                break;
              }
              case 26: {
                ConceptId = input.ReadString();
                break;
              }
              case 34: {
                OmimId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  A transcript represents the assertion that a particular region of the
  ///  reference genome may be transcribed as RNA.
  /// </summary>
  public sealed partial class Transcript : pb::IMessage<Transcript> {
    private static readonly pb::MessageParser<Transcript> _parser = new pb::MessageParser<Transcript>(() => new Transcript());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transcript> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transcript() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transcript(Transcript other) : this() {
      geneId_ = other.geneId_;
      exons_ = other.exons_.Clone();
      CodingSequence = other.codingSequence_ != null ? other.CodingSequence.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transcript Clone() {
      return new Transcript(this);
    }

    /// <summary>Field number for the "gene_id" field.</summary>
    public const int GeneIdFieldNumber = 1;
    private string geneId_ = "";
    /// <summary>
    ///  The annotation ID of the gene from which this transcript is transcribed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeneId {
      get { return geneId_; }
      set {
        geneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exons" field.</summary>
    public const int ExonsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Transcript.Types.Exon> _repeated_exons_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Genomics.V1.Transcript.Types.Exon.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Transcript.Types.Exon> exons_ = new pbc::RepeatedField<global::Google.Genomics.V1.Transcript.Types.Exon>();
    /// <summary>
    ///  The &lt;a href="http://en.wikipedia.org/wiki/Exon">exons&lt;/a> that compose
    ///  this transcript. This field should be unset for genomes where transcript
    ///  splicing does not occur, for example prokaryotes.
    ///
    ///  Introns are regions of the transcript that are not included in the
    ///  spliced RNA product. Though not explicitly modeled here, intron ranges can
    ///  be deduced; all regions of this transcript that are not exons are introns.
    ///
    ///  Exonic sequences do not necessarily code for a translational product
    ///  (amino acids). Only the regions of exons bounded by the
    ///  [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
    ///  to coding DNA sequence.
    ///
    ///  Exons are ordered by start position and may not overlap.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Transcript.Types.Exon> Exons {
      get { return exons_; }
    }

    /// <summary>Field number for the "coding_sequence" field.</summary>
    public const int CodingSequenceFieldNumber = 3;
    private global::Google.Genomics.V1.Transcript.Types.CodingSequence codingSequence_;
    /// <summary>
    ///  The range of the coding sequence for this transcript, if any. To determine
    ///  the exact ranges of coding sequence, intersect this range with those of the
    ///  [exons][google.genomics.v1.Transcript.exons], if any. If there are any
    ///  [exons][google.genomics.v1.Transcript.exons], the
    ///  [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
    ///  and end within them.
    ///
    ///  Note that in some cases, the reference genome will not exactly match the
    ///  observed mRNA transcript e.g. due to variance in the source genome from
    ///  reference. In these cases,
    ///  [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
    ///  match the expected reference reading frame and coding exon reference bases
    ///  cannot necessarily be concatenated to produce the original transcript mRNA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Transcript.Types.CodingSequence CodingSequence {
      get { return codingSequence_; }
      set {
        codingSequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transcript);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transcript other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GeneId != other.GeneId) return false;
      if(!exons_.Equals(other.exons_)) return false;
      if (!object.Equals(CodingSequence, other.CodingSequence)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GeneId.Length != 0) hash ^= GeneId.GetHashCode();
      hash ^= exons_.GetHashCode();
      if (codingSequence_ != null) hash ^= CodingSequence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GeneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GeneId);
      }
      exons_.WriteTo(output, _repeated_exons_codec);
      if (codingSequence_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CodingSequence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GeneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeneId);
      }
      size += exons_.CalculateSize(_repeated_exons_codec);
      if (codingSequence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodingSequence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transcript other) {
      if (other == null) {
        return;
      }
      if (other.GeneId.Length != 0) {
        GeneId = other.GeneId;
      }
      exons_.Add(other.exons_);
      if (other.codingSequence_ != null) {
        if (codingSequence_ == null) {
          codingSequence_ = new global::Google.Genomics.V1.Transcript.Types.CodingSequence();
        }
        CodingSequence.MergeFrom(other.CodingSequence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GeneId = input.ReadString();
            break;
          }
          case 18: {
            exons_.AddEntriesFrom(input, _repeated_exons_codec);
            break;
          }
          case 26: {
            if (codingSequence_ == null) {
              codingSequence_ = new global::Google.Genomics.V1.Transcript.Types.CodingSequence();
            }
            input.ReadMessage(codingSequence_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transcript message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Exon : pb::IMessage<Exon> {
        private static readonly pb::MessageParser<Exon> _parser = new pb::MessageParser<Exon>(() => new Exon());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Exon> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Genomics.V1.Transcript.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exon() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exon(Exon other) : this() {
          start_ = other.start_;
          end_ = other.end_;
          Frame = other.Frame;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exon Clone() {
          return new Exon(this);
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 1;
        private long start_;
        /// <summary>
        ///  The start position of the exon on this annotation's reference sequence,
        ///  0-based inclusive. Note that this is relative to the reference start, and
        ///  **not** the containing annotation start.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Start {
          get { return start_; }
          set {
            start_ = value;
          }
        }

        /// <summary>Field number for the "end" field.</summary>
        public const int EndFieldNumber = 2;
        private long end_;
        /// <summary>
        ///  The end position of the exon on this annotation's reference sequence,
        ///  0-based exclusive. Note that this is relative to the reference start, and
        ///  *not* the containing annotation start.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long End {
          get { return end_; }
          set {
            end_ = value;
          }
        }

        /// <summary>Field number for the "frame" field.</summary>
        public const int FrameFieldNumber = 3;
        private static readonly pb::FieldCodec<int?> _single_frame_codec = pb::FieldCodec.ForStructWrapper<int>(26);
        private int? frame_;
        /// <summary>
        ///  The frame of this exon. Contains a value of 0, 1, or 2, which indicates
        ///  the offset of the first coding base of the exon within the reading frame
        ///  of the coding DNA sequence, if any. This field is dependent on the
        ///  strandedness of this annotation (see
        ///  [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
        ///  For forward stranded annotations, this offset is relative to the
        ///  [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
        ///  strand annotations, this offset is relative to the
        ///  [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
        ///
        ///  Unset if this exon does not intersect the coding sequence. Upon creation
        ///  of a transcript, the frame must be populated for all or none of the
        ///  coding exons.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? Frame {
          get { return frame_; }
          set {
            frame_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Exon);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Exon other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Start != other.Start) return false;
          if (End != other.End) return false;
          if (Frame != other.Frame) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Start != 0L) hash ^= Start.GetHashCode();
          if (End != 0L) hash ^= End.GetHashCode();
          if (frame_ != null) hash ^= Frame.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Start != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Start);
          }
          if (End != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(End);
          }
          if (frame_ != null) {
            _single_frame_codec.WriteTagAndValue(output, Frame);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Start != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
          }
          if (End != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
          }
          if (frame_ != null) {
            size += _single_frame_codec.CalculateSizeWithTag(Frame);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Exon other) {
          if (other == null) {
            return;
          }
          if (other.Start != 0L) {
            Start = other.Start;
          }
          if (other.End != 0L) {
            End = other.End;
          }
          if (other.frame_ != null) {
            if (frame_ == null || other.Frame != 0) {
              Frame = other.Frame;
            }
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Start = input.ReadInt64();
                break;
              }
              case 16: {
                End = input.ReadInt64();
                break;
              }
              case 26: {
                int? value = _single_frame_codec.Read(input);
                if (frame_ == null || value != 0) {
                  Frame = value;
                }
                break;
              }
            }
          }
        }

      }

      public sealed partial class CodingSequence : pb::IMessage<CodingSequence> {
        private static readonly pb::MessageParser<CodingSequence> _parser = new pb::MessageParser<CodingSequence>(() => new CodingSequence());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CodingSequence> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Genomics.V1.Transcript.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CodingSequence() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CodingSequence(CodingSequence other) : this() {
          start_ = other.start_;
          end_ = other.end_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CodingSequence Clone() {
          return new CodingSequence(this);
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 1;
        private long start_;
        /// <summary>
        ///  The start of the coding sequence on this annotation's reference sequence,
        ///  0-based inclusive. Note that this position is relative to the reference
        ///  start, and *not* the containing annotation start.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Start {
          get { return start_; }
          set {
            start_ = value;
          }
        }

        /// <summary>Field number for the "end" field.</summary>
        public const int EndFieldNumber = 2;
        private long end_;
        /// <summary>
        ///  The end of the coding sequence on this annotation's reference sequence,
        ///  0-based exclusive. Note that this position is relative to the reference
        ///  start, and *not* the containing annotation start.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long End {
          get { return end_; }
          set {
            end_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CodingSequence);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CodingSequence other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Start != other.Start) return false;
          if (End != other.End) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Start != 0L) hash ^= Start.GetHashCode();
          if (End != 0L) hash ^= End.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Start != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Start);
          }
          if (End != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(End);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Start != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
          }
          if (End != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CodingSequence other) {
          if (other == null) {
            return;
          }
          if (other.Start != 0L) {
            Start = other.Start;
          }
          if (other.End != 0L) {
            End = other.End;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Start = input.ReadInt64();
                break;
              }
              case 16: {
                End = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ExternalId : pb::IMessage<ExternalId> {
    private static readonly pb::MessageParser<ExternalId> _parser = new pb::MessageParser<ExternalId>(() => new ExternalId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalId(ExternalId other) : this() {
      sourceName_ = other.sourceName_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalId Clone() {
      return new ExternalId(this);
    }

    /// <summary>Field number for the "source_name" field.</summary>
    public const int SourceNameFieldNumber = 1;
    private string sourceName_ = "";
    /// <summary>
    ///  The name of the source of this data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceName {
      get { return sourceName_; }
      set {
        sourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  The id used by the source of this data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceName != other.SourceName) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceName.Length != 0) hash ^= SourceName.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourceName);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceName);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalId other) {
      if (other == null) {
        return;
      }
      if (other.SourceName.Length != 0) {
        SourceName = other.SourceName;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceName = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateAnnotationSetRequest : pb::IMessage<CreateAnnotationSetRequest> {
    private static readonly pb::MessageParser<CreateAnnotationSetRequest> _parser = new pb::MessageParser<CreateAnnotationSetRequest>(() => new CreateAnnotationSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAnnotationSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAnnotationSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAnnotationSetRequest(CreateAnnotationSetRequest other) : this() {
      AnnotationSet = other.annotationSet_ != null ? other.AnnotationSet.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAnnotationSetRequest Clone() {
      return new CreateAnnotationSetRequest(this);
    }

    /// <summary>Field number for the "annotation_set" field.</summary>
    public const int AnnotationSetFieldNumber = 1;
    private global::Google.Genomics.V1.AnnotationSet annotationSet_;
    /// <summary>
    ///  The annotation set to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.AnnotationSet AnnotationSet {
      get { return annotationSet_; }
      set {
        annotationSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAnnotationSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAnnotationSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AnnotationSet, other.AnnotationSet)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (annotationSet_ != null) hash ^= AnnotationSet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (annotationSet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AnnotationSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (annotationSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnnotationSet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAnnotationSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.annotationSet_ != null) {
        if (annotationSet_ == null) {
          annotationSet_ = new global::Google.Genomics.V1.AnnotationSet();
        }
        AnnotationSet.MergeFrom(other.AnnotationSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (annotationSet_ == null) {
              annotationSet_ = new global::Google.Genomics.V1.AnnotationSet();
            }
            input.ReadMessage(annotationSet_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAnnotationSetRequest : pb::IMessage<GetAnnotationSetRequest> {
    private static readonly pb::MessageParser<GetAnnotationSetRequest> _parser = new pb::MessageParser<GetAnnotationSetRequest>(() => new GetAnnotationSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAnnotationSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAnnotationSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAnnotationSetRequest(GetAnnotationSetRequest other) : this() {
      annotationSetId_ = other.annotationSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAnnotationSetRequest Clone() {
      return new GetAnnotationSetRequest(this);
    }

    /// <summary>Field number for the "annotation_set_id" field.</summary>
    public const int AnnotationSetIdFieldNumber = 1;
    private string annotationSetId_ = "";
    /// <summary>
    ///  The ID of the annotation set to be retrieved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSetId {
      get { return annotationSetId_; }
      set {
        annotationSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAnnotationSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAnnotationSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSetId != other.AnnotationSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSetId.Length != 0) hash ^= AnnotationSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnnotationSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAnnotationSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSetId.Length != 0) {
        AnnotationSetId = other.AnnotationSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnnotationSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAnnotationSetRequest : pb::IMessage<UpdateAnnotationSetRequest> {
    private static readonly pb::MessageParser<UpdateAnnotationSetRequest> _parser = new pb::MessageParser<UpdateAnnotationSetRequest>(() => new UpdateAnnotationSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAnnotationSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAnnotationSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAnnotationSetRequest(UpdateAnnotationSetRequest other) : this() {
      annotationSetId_ = other.annotationSetId_;
      AnnotationSet = other.annotationSet_ != null ? other.AnnotationSet.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAnnotationSetRequest Clone() {
      return new UpdateAnnotationSetRequest(this);
    }

    /// <summary>Field number for the "annotation_set_id" field.</summary>
    public const int AnnotationSetIdFieldNumber = 1;
    private string annotationSetId_ = "";
    /// <summary>
    ///  The ID of the annotation set to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSetId {
      get { return annotationSetId_; }
      set {
        annotationSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "annotation_set" field.</summary>
    public const int AnnotationSetFieldNumber = 2;
    private global::Google.Genomics.V1.AnnotationSet annotationSet_;
    /// <summary>
    ///  The new annotation set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.AnnotationSet AnnotationSet {
      get { return annotationSet_; }
      set {
        annotationSet_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  An optional mask specifying which fields to update. Mutable fields are
    ///  [name][google.genomics.v1.AnnotationSet.name],
    ///  [source_uri][google.genomics.v1.AnnotationSet.source_uri], and
    ///  [info][google.genomics.v1.AnnotationSet.info]. If unspecified, all
    ///  mutable fields will be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAnnotationSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAnnotationSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSetId != other.AnnotationSetId) return false;
      if (!object.Equals(AnnotationSet, other.AnnotationSet)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSetId.Length != 0) hash ^= AnnotationSetId.GetHashCode();
      if (annotationSet_ != null) hash ^= AnnotationSet.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnnotationSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSetId);
      }
      if (annotationSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AnnotationSet);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSetId);
      }
      if (annotationSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnnotationSet);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAnnotationSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSetId.Length != 0) {
        AnnotationSetId = other.AnnotationSetId;
      }
      if (other.annotationSet_ != null) {
        if (annotationSet_ == null) {
          annotationSet_ = new global::Google.Genomics.V1.AnnotationSet();
        }
        AnnotationSet.MergeFrom(other.AnnotationSet);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnnotationSetId = input.ReadString();
            break;
          }
          case 18: {
            if (annotationSet_ == null) {
              annotationSet_ = new global::Google.Genomics.V1.AnnotationSet();
            }
            input.ReadMessage(annotationSet_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteAnnotationSetRequest : pb::IMessage<DeleteAnnotationSetRequest> {
    private static readonly pb::MessageParser<DeleteAnnotationSetRequest> _parser = new pb::MessageParser<DeleteAnnotationSetRequest>(() => new DeleteAnnotationSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAnnotationSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAnnotationSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAnnotationSetRequest(DeleteAnnotationSetRequest other) : this() {
      annotationSetId_ = other.annotationSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAnnotationSetRequest Clone() {
      return new DeleteAnnotationSetRequest(this);
    }

    /// <summary>Field number for the "annotation_set_id" field.</summary>
    public const int AnnotationSetIdFieldNumber = 1;
    private string annotationSetId_ = "";
    /// <summary>
    ///  The ID of the annotation set to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationSetId {
      get { return annotationSetId_; }
      set {
        annotationSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAnnotationSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAnnotationSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationSetId != other.AnnotationSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationSetId.Length != 0) hash ^= AnnotationSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnnotationSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAnnotationSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationSetId.Length != 0) {
        AnnotationSetId = other.AnnotationSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnnotationSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchAnnotationSetsRequest : pb::IMessage<SearchAnnotationSetsRequest> {
    private static readonly pb::MessageParser<SearchAnnotationSetsRequest> _parser = new pb::MessageParser<SearchAnnotationSetsRequest>(() => new SearchAnnotationSetsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAnnotationSetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationSetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationSetsRequest(SearchAnnotationSetsRequest other) : this() {
      datasetIds_ = other.datasetIds_.Clone();
      referenceSetId_ = other.referenceSetId_;
      name_ = other.name_;
      types_ = other.types_.Clone();
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationSetsRequest Clone() {
      return new SearchAnnotationSetsRequest(this);
    }

    /// <summary>Field number for the "dataset_ids" field.</summary>
    public const int DatasetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_datasetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> datasetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Required. The dataset IDs to search within. Caller must have `READ` access
    ///  to these datasets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DatasetIds {
      get { return datasetIds_; }
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 2;
    private string referenceSetId_ = "";
    /// <summary>
    ///  If specified, only annotation sets associated with the given reference set
    ///  are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  Only return annotations sets for which a substring of the name matches this
    ///  string (case insensitive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.AnnotationType> _repeated_types_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Google.Genomics.V1.AnnotationType) x);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.AnnotationType> types_ = new pbc::RepeatedField<global::Google.Genomics.V1.AnnotationType>();
    /// <summary>
    ///  If specified, only annotation sets that have any of these types are
    ///  returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.AnnotationType> Types_ {
      get { return types_; }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 5;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 6;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 128. The maximum value is 1024.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchAnnotationSetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchAnnotationSetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datasetIds_.Equals(other.datasetIds_)) return false;
      if (ReferenceSetId != other.ReferenceSetId) return false;
      if (Name != other.Name) return false;
      if(!types_.Equals(other.types_)) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datasetIds_.GetHashCode();
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= types_.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datasetIds_.WriteTo(output, _repeated_datasetIds_codec);
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReferenceSetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      types_.WriteTo(output, _repeated_types_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datasetIds_.CalculateSize(_repeated_datasetIds_codec);
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += types_.CalculateSize(_repeated_types_codec);
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchAnnotationSetsRequest other) {
      if (other == null) {
        return;
      }
      datasetIds_.Add(other.datasetIds_);
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      types_.Add(other.types_);
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datasetIds_.AddEntriesFrom(input, _repeated_datasetIds_codec);
            break;
          }
          case 18: {
            ReferenceSetId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
          case 42: {
            PageToken = input.ReadString();
            break;
          }
          case 48: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchAnnotationSetsResponse : pb::IMessage<SearchAnnotationSetsResponse> {
    private static readonly pb::MessageParser<SearchAnnotationSetsResponse> _parser = new pb::MessageParser<SearchAnnotationSetsResponse>(() => new SearchAnnotationSetsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAnnotationSetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationSetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationSetsResponse(SearchAnnotationSetsResponse other) : this() {
      annotationSets_ = other.annotationSets_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationSetsResponse Clone() {
      return new SearchAnnotationSetsResponse(this);
    }

    /// <summary>Field number for the "annotation_sets" field.</summary>
    public const int AnnotationSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.AnnotationSet> _repeated_annotationSets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.AnnotationSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.AnnotationSet> annotationSets_ = new pbc::RepeatedField<global::Google.Genomics.V1.AnnotationSet>();
    /// <summary>
    ///  The matching annotation sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.AnnotationSet> AnnotationSets {
      get { return annotationSets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchAnnotationSetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchAnnotationSetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!annotationSets_.Equals(other.annotationSets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= annotationSets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      annotationSets_.WriteTo(output, _repeated_annotationSets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += annotationSets_.CalculateSize(_repeated_annotationSets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchAnnotationSetsResponse other) {
      if (other == null) {
        return;
      }
      annotationSets_.Add(other.annotationSets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            annotationSets_.AddEntriesFrom(input, _repeated_annotationSets_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateAnnotationRequest : pb::IMessage<CreateAnnotationRequest> {
    private static readonly pb::MessageParser<CreateAnnotationRequest> _parser = new pb::MessageParser<CreateAnnotationRequest>(() => new CreateAnnotationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAnnotationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAnnotationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAnnotationRequest(CreateAnnotationRequest other) : this() {
      Annotation = other.annotation_ != null ? other.Annotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAnnotationRequest Clone() {
      return new CreateAnnotationRequest(this);
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 1;
    private global::Google.Genomics.V1.Annotation annotation_;
    /// <summary>
    ///  The annotation to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAnnotationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAnnotationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Annotation, other.Annotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (annotation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Annotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAnnotationRequest other) {
      if (other == null) {
        return;
      }
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          annotation_ = new global::Google.Genomics.V1.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (annotation_ == null) {
              annotation_ = new global::Google.Genomics.V1.Annotation();
            }
            input.ReadMessage(annotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchCreateAnnotationsRequest : pb::IMessage<BatchCreateAnnotationsRequest> {
    private static readonly pb::MessageParser<BatchCreateAnnotationsRequest> _parser = new pb::MessageParser<BatchCreateAnnotationsRequest>(() => new BatchCreateAnnotationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateAnnotationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateAnnotationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateAnnotationsRequest(BatchCreateAnnotationsRequest other) : this() {
      annotations_ = other.annotations_.Clone();
      requestId_ = other.requestId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateAnnotationsRequest Clone() {
      return new BatchCreateAnnotationsRequest(this);
    }

    /// <summary>Field number for the "annotations" field.</summary>
    public const int AnnotationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Annotation> _repeated_annotations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Annotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Annotation> annotations_ = new pbc::RepeatedField<global::Google.Genomics.V1.Annotation>();
    /// <summary>
    ///  The annotations to be created. At most 4096 can be specified in a single
    ///  request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Annotation> Annotations {
      get { return annotations_; }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private string requestId_ = "";
    /// <summary>
    ///  A unique request ID which enables the server to detect duplicated requests.
    ///  If provided, duplicated requests will result in the same response; if not
    ///  provided, duplicated requests may result in duplicated data. For a given
    ///  annotation set, callers should not reuse `request_id`s when writing
    ///  different batches of annotations - behavior in this case is undefined.
    ///  A common approach is to use a UUID. For batch jobs where worker crashes are
    ///  a possibility, consider using some unique variant of a worker or run ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateAnnotationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateAnnotationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!annotations_.Equals(other.annotations_)) return false;
      if (RequestId != other.RequestId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= annotations_.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      annotations_.WriteTo(output, _repeated_annotations_codec);
      if (RequestId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequestId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += annotations_.CalculateSize(_repeated_annotations_codec);
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateAnnotationsRequest other) {
      if (other == null) {
        return;
      }
      annotations_.Add(other.annotations_);
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            annotations_.AddEntriesFrom(input, _repeated_annotations_codec);
            break;
          }
          case 18: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchCreateAnnotationsResponse : pb::IMessage<BatchCreateAnnotationsResponse> {
    private static readonly pb::MessageParser<BatchCreateAnnotationsResponse> _parser = new pb::MessageParser<BatchCreateAnnotationsResponse>(() => new BatchCreateAnnotationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateAnnotationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateAnnotationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateAnnotationsResponse(BatchCreateAnnotationsResponse other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateAnnotationsResponse Clone() {
      return new BatchCreateAnnotationsResponse(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry> entries_ = new pbc::RepeatedField<global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry>();
    /// <summary>
    ///  The resulting per-annotation entries, ordered consistently with the
    ///  original request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateAnnotationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateAnnotationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateAnnotationsResponse other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BatchCreateAnnotationsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Genomics.V1.BatchCreateAnnotationsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          Status = other.status_ != null ? other.Status.Clone() : null;
          Annotation = other.annotation_ != null ? other.Annotation.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::Google.Rpc.Status status_;
        /// <summary>
        ///  The creation status.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Rpc.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        /// <summary>Field number for the "annotation" field.</summary>
        public const int AnnotationFieldNumber = 2;
        private global::Google.Genomics.V1.Annotation annotation_;
        /// <summary>
        ///  The created annotation, if creation was successful.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Genomics.V1.Annotation Annotation {
          get { return annotation_; }
          set {
            annotation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Status, other.Status)) return false;
          if (!object.Equals(Annotation, other.Annotation)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (status_ != null) hash ^= Status.GetHashCode();
          if (annotation_ != null) hash ^= Annotation.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (status_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Status);
          }
          if (annotation_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Annotation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (status_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
          }
          if (annotation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.status_ != null) {
            if (status_ == null) {
              status_ = new global::Google.Rpc.Status();
            }
            Status.MergeFrom(other.Status);
          }
          if (other.annotation_ != null) {
            if (annotation_ == null) {
              annotation_ = new global::Google.Genomics.V1.Annotation();
            }
            Annotation.MergeFrom(other.Annotation);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (status_ == null) {
                  status_ = new global::Google.Rpc.Status();
                }
                input.ReadMessage(status_);
                break;
              }
              case 18: {
                if (annotation_ == null) {
                  annotation_ = new global::Google.Genomics.V1.Annotation();
                }
                input.ReadMessage(annotation_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetAnnotationRequest : pb::IMessage<GetAnnotationRequest> {
    private static readonly pb::MessageParser<GetAnnotationRequest> _parser = new pb::MessageParser<GetAnnotationRequest>(() => new GetAnnotationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAnnotationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAnnotationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAnnotationRequest(GetAnnotationRequest other) : this() {
      annotationId_ = other.annotationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAnnotationRequest Clone() {
      return new GetAnnotationRequest(this);
    }

    /// <summary>Field number for the "annotation_id" field.</summary>
    public const int AnnotationIdFieldNumber = 1;
    private string annotationId_ = "";
    /// <summary>
    ///  The ID of the annotation to be retrieved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationId {
      get { return annotationId_; }
      set {
        annotationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAnnotationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAnnotationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationId != other.AnnotationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationId.Length != 0) hash ^= AnnotationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnnotationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAnnotationRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationId.Length != 0) {
        AnnotationId = other.AnnotationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnnotationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAnnotationRequest : pb::IMessage<UpdateAnnotationRequest> {
    private static readonly pb::MessageParser<UpdateAnnotationRequest> _parser = new pb::MessageParser<UpdateAnnotationRequest>(() => new UpdateAnnotationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAnnotationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAnnotationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAnnotationRequest(UpdateAnnotationRequest other) : this() {
      annotationId_ = other.annotationId_;
      Annotation = other.annotation_ != null ? other.Annotation.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAnnotationRequest Clone() {
      return new UpdateAnnotationRequest(this);
    }

    /// <summary>Field number for the "annotation_id" field.</summary>
    public const int AnnotationIdFieldNumber = 1;
    private string annotationId_ = "";
    /// <summary>
    ///  The ID of the annotation to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationId {
      get { return annotationId_; }
      set {
        annotationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 2;
    private global::Google.Genomics.V1.Annotation annotation_;
    /// <summary>
    ///  The new annotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Annotation Annotation {
      get { return annotation_; }
      set {
        annotation_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  An optional mask specifying which fields to update. Mutable fields are
    ///  [name][google.genomics.v1.Annotation.name],
    ///  [variant][google.genomics.v1.Annotation.variant],
    ///  [transcript][google.genomics.v1.Annotation.transcript], and
    ///  [info][google.genomics.v1.Annotation.info]. If unspecified, all mutable
    ///  fields will be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAnnotationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAnnotationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationId != other.AnnotationId) return false;
      if (!object.Equals(Annotation, other.Annotation)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationId.Length != 0) hash ^= AnnotationId.GetHashCode();
      if (annotation_ != null) hash ^= Annotation.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnnotationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationId);
      }
      if (annotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Annotation);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationId);
      }
      if (annotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAnnotationRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationId.Length != 0) {
        AnnotationId = other.AnnotationId;
      }
      if (other.annotation_ != null) {
        if (annotation_ == null) {
          annotation_ = new global::Google.Genomics.V1.Annotation();
        }
        Annotation.MergeFrom(other.Annotation);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnnotationId = input.ReadString();
            break;
          }
          case 18: {
            if (annotation_ == null) {
              annotation_ = new global::Google.Genomics.V1.Annotation();
            }
            input.ReadMessage(annotation_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteAnnotationRequest : pb::IMessage<DeleteAnnotationRequest> {
    private static readonly pb::MessageParser<DeleteAnnotationRequest> _parser = new pb::MessageParser<DeleteAnnotationRequest>(() => new DeleteAnnotationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAnnotationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAnnotationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAnnotationRequest(DeleteAnnotationRequest other) : this() {
      annotationId_ = other.annotationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAnnotationRequest Clone() {
      return new DeleteAnnotationRequest(this);
    }

    /// <summary>Field number for the "annotation_id" field.</summary>
    public const int AnnotationIdFieldNumber = 1;
    private string annotationId_ = "";
    /// <summary>
    ///  The ID of the annotation to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnnotationId {
      get { return annotationId_; }
      set {
        annotationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAnnotationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAnnotationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnnotationId != other.AnnotationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnnotationId.Length != 0) hash ^= AnnotationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnnotationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnnotationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnnotationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnnotationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAnnotationRequest other) {
      if (other == null) {
        return;
      }
      if (other.AnnotationId.Length != 0) {
        AnnotationId = other.AnnotationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnnotationId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchAnnotationsRequest : pb::IMessage<SearchAnnotationsRequest> {
    private static readonly pb::MessageParser<SearchAnnotationsRequest> _parser = new pb::MessageParser<SearchAnnotationsRequest>(() => new SearchAnnotationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAnnotationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationsRequest(SearchAnnotationsRequest other) : this() {
      annotationSetIds_ = other.annotationSetIds_.Clone();
      start_ = other.start_;
      end_ = other.end_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      switch (other.ReferenceCase) {
        case ReferenceOneofCase.ReferenceId:
          ReferenceId = other.ReferenceId;
          break;
        case ReferenceOneofCase.ReferenceName:
          ReferenceName = other.ReferenceName;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationsRequest Clone() {
      return new SearchAnnotationsRequest(this);
    }

    /// <summary>Field number for the "annotation_set_ids" field.</summary>
    public const int AnnotationSetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_annotationSetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> annotationSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Required. The annotation sets to search within. The caller must have
    ///  `READ` access to these annotation sets.
    ///  All queried annotation sets must have the same type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AnnotationSetIds {
      get { return annotationSetIds_; }
    }

    /// <summary>Field number for the "reference_id" field.</summary>
    public const int ReferenceIdFieldNumber = 2;
    /// <summary>
    ///  The ID of the reference to query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceId {
      get { return referenceCase_ == ReferenceOneofCase.ReferenceId ? (string) reference_ : ""; }
      set {
        reference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        referenceCase_ = ReferenceOneofCase.ReferenceId;
      }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 3;
    /// <summary>
    ///  The name of the reference to query, within the reference set associated
    ///  with this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceCase_ == ReferenceOneofCase.ReferenceName ? (string) reference_ : ""; }
      set {
        reference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        referenceCase_ = ReferenceOneofCase.ReferenceName;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private long start_;
    /// <summary>
    ///  The start position of the range on the reference, 0-based inclusive. If
    ///  specified,
    ///  [referenceId][google.genomics.v1.SearchAnnotationsRequest.reference_id] or
    ///  [referenceName][google.genomics.v1.SearchAnnotationsRequest.reference_name]
    ///  must be specified. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private long end_;
    /// <summary>
    ///  The end position of the range on the reference, 0-based exclusive. If
    ///  [referenceId][google.genomics.v1.SearchAnnotationsRequest.reference_id] or
    ///  [referenceName][google.genomics.v1.SearchAnnotationsRequest.reference_name]
    ///  must be specified, Defaults to the length of the reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 6;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 7;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 256. The maximum value is 2048.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    private object reference_;
    /// <summary>Enum of possible cases for the "reference" oneof.</summary>
    public enum ReferenceOneofCase {
      None = 0,
      ReferenceId = 2,
      ReferenceName = 3,
    }
    private ReferenceOneofCase referenceCase_ = ReferenceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceOneofCase ReferenceCase {
      get { return referenceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReference() {
      referenceCase_ = ReferenceOneofCase.None;
      reference_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchAnnotationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchAnnotationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!annotationSetIds_.Equals(other.annotationSetIds_)) return false;
      if (ReferenceId != other.ReferenceId) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      if (ReferenceCase != other.ReferenceCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= annotationSetIds_.GetHashCode();
      if (referenceCase_ == ReferenceOneofCase.ReferenceId) hash ^= ReferenceId.GetHashCode();
      if (referenceCase_ == ReferenceOneofCase.ReferenceName) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      hash ^= (int) referenceCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      annotationSetIds_.WriteTo(output, _repeated_annotationSetIds_codec);
      if (referenceCase_ == ReferenceOneofCase.ReferenceId) {
        output.WriteRawTag(18);
        output.WriteString(ReferenceId);
      }
      if (referenceCase_ == ReferenceOneofCase.ReferenceName) {
        output.WriteRawTag(26);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(End);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += annotationSetIds_.CalculateSize(_repeated_annotationSetIds_codec);
      if (referenceCase_ == ReferenceOneofCase.ReferenceId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceId);
      }
      if (referenceCase_ == ReferenceOneofCase.ReferenceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchAnnotationsRequest other) {
      if (other == null) {
        return;
      }
      annotationSetIds_.Add(other.annotationSetIds_);
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      switch (other.ReferenceCase) {
        case ReferenceOneofCase.ReferenceId:
          ReferenceId = other.ReferenceId;
          break;
        case ReferenceOneofCase.ReferenceName:
          ReferenceName = other.ReferenceName;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            annotationSetIds_.AddEntriesFrom(input, _repeated_annotationSetIds_codec);
            break;
          }
          case 18: {
            ReferenceId = input.ReadString();
            break;
          }
          case 26: {
            ReferenceName = input.ReadString();
            break;
          }
          case 32: {
            Start = input.ReadInt64();
            break;
          }
          case 40: {
            End = input.ReadInt64();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
          case 56: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchAnnotationsResponse : pb::IMessage<SearchAnnotationsResponse> {
    private static readonly pb::MessageParser<SearchAnnotationsResponse> _parser = new pb::MessageParser<SearchAnnotationsResponse>(() => new SearchAnnotationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAnnotationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.AnnotationsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationsResponse(SearchAnnotationsResponse other) : this() {
      annotations_ = other.annotations_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchAnnotationsResponse Clone() {
      return new SearchAnnotationsResponse(this);
    }

    /// <summary>Field number for the "annotations" field.</summary>
    public const int AnnotationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Annotation> _repeated_annotations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Annotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Annotation> annotations_ = new pbc::RepeatedField<global::Google.Genomics.V1.Annotation>();
    /// <summary>
    ///  The matching annotations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Annotation> Annotations {
      get { return annotations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchAnnotationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchAnnotationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!annotations_.Equals(other.annotations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= annotations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      annotations_.WriteTo(output, _repeated_annotations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += annotations_.CalculateSize(_repeated_annotations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchAnnotationsResponse other) {
      if (other == null) {
        return;
      }
      annotations_.Add(other.annotations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            annotations_.AddEntriesFrom(input, _repeated_annotations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
