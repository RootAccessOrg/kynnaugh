// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/reads.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Genomics.V1 {

  /// <summary>Holder for reflection information generated from google/genomics/v1/reads.proto</summary>
  public static partial class ReadsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/genomics/v1/reads.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReadsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5nb29nbGUvZ2Vub21pY3MvdjEvcmVhZHMucHJvdG8SEmdvb2dsZS5nZW5v",
            "bWljcy52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoeZ29vZ2xl",
            "L2dlbm9taWNzL3YxL3JhbmdlLnByb3RvGiZnb29nbGUvZ2Vub21pY3MvdjEv",
            "cmVhZGFsaWdubWVudC5wcm90bxolZ29vZ2xlL2dlbm9taWNzL3YxL3JlYWRn",
            "cm91cHNldC5wcm90bxojZ29vZ2xlL2xvbmdydW5uaW5nL29wZXJhdGlvbnMu",
            "cHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90bxogZ29vZ2xlL3By",
            "b3RvYnVmL2ZpZWxkX21hc2sucHJvdG8iZgoaU2VhcmNoUmVhZEdyb3VwU2V0",
            "c1JlcXVlc3QSEwoLZGF0YXNldF9pZHMYASADKAkSDAoEbmFtZRgDIAEoCRIS",
            "CgpwYWdlX3Rva2VuGAIgASgJEhEKCXBhZ2Vfc2l6ZRgEIAEoBSJxChtTZWFy",
            "Y2hSZWFkR3JvdXBTZXRzUmVzcG9uc2USOQoPcmVhZF9ncm91cF9zZXRzGAEg",
            "AygLMiAuZ29vZ2xlLmdlbm9taWNzLnYxLlJlYWRHcm91cFNldBIXCg9uZXh0",
            "X3BhZ2VfdG9rZW4YAiABKAkingIKGkltcG9ydFJlYWRHcm91cFNldHNSZXF1",
            "ZXN0EhIKCmRhdGFzZXRfaWQYASABKAkSGAoQcmVmZXJlbmNlX3NldF9pZBgE",
            "IAEoCRITCgtzb3VyY2VfdXJpcxgCIAMoCRJcChJwYXJ0aXRpb25fc3RyYXRl",
            "Z3kYBSABKA4yQC5nb29nbGUuZ2Vub21pY3MudjEuSW1wb3J0UmVhZEdyb3Vw",
            "U2V0c1JlcXVlc3QuUGFydGl0aW9uU3RyYXRlZ3kiXwoRUGFydGl0aW9uU3Ry",
            "YXRlZ3kSIgoeUEFSVElUSU9OX1NUUkFURUdZX1VOU1BFQ0lGSUVEEAASFwoT",
            "UEVSX0ZJTEVfUEVSX1NBTVBMRRABEg0KCU1FUkdFX0FMTBACIjkKG0ltcG9y",
            "dFJlYWRHcm91cFNldHNSZXNwb25zZRIaChJyZWFkX2dyb3VwX3NldF9pZHMY",
            "ASADKAkidwoZRXhwb3J0UmVhZEdyb3VwU2V0UmVxdWVzdBISCgpwcm9qZWN0",
            "X2lkGAEgASgJEhIKCmV4cG9ydF91cmkYAiABKAkSGQoRcmVhZF9ncm91cF9z",
            "ZXRfaWQYAyABKAkSFwoPcmVmZXJlbmNlX25hbWVzGAQgAygJIqEBChlVcGRh",
            "dGVSZWFkR3JvdXBTZXRSZXF1ZXN0EhkKEXJlYWRfZ3JvdXBfc2V0X2lkGAEg",
            "ASgJEjgKDnJlYWRfZ3JvdXBfc2V0GAIgASgLMiAuZ29vZ2xlLmdlbm9taWNz",
            "LnYxLlJlYWRHcm91cFNldBIvCgt1cGRhdGVfbWFzaxgDIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5GaWVsZE1hc2siNgoZRGVsZXRlUmVhZEdyb3VwU2V0UmVx",
            "dWVzdBIZChFyZWFkX2dyb3VwX3NldF9pZBgBIAEoCSIzChZHZXRSZWFkR3Jv",
            "dXBTZXRSZXF1ZXN0EhkKEXJlYWRfZ3JvdXBfc2V0X2lkGAEgASgJIq8BChpM",
            "aXN0Q292ZXJhZ2VCdWNrZXRzUmVxdWVzdBIZChFyZWFkX2dyb3VwX3NldF9p",
            "ZBgBIAEoCRIWCg5yZWZlcmVuY2VfbmFtZRgDIAEoCRINCgVzdGFydBgEIAEo",
            "AxILCgNlbmQYBSABKAMSGwoTdGFyZ2V0X2J1Y2tldF93aWR0aBgGIAEoAxIS",
            "CgpwYWdlX3Rva2VuGAcgASgJEhEKCXBhZ2Vfc2l6ZRgIIAEoBSJRCg5Db3Zl",
            "cmFnZUJ1Y2tldBIoCgVyYW5nZRgBIAEoCzIZLmdvb2dsZS5nZW5vbWljcy52",
            "MS5SYW5nZRIVCg1tZWFuX2NvdmVyYWdlGAIgASgCIooBChtMaXN0Q292ZXJh",
            "Z2VCdWNrZXRzUmVzcG9uc2USFAoMYnVja2V0X3dpZHRoGAEgASgDEjwKEGNv",
            "dmVyYWdlX2J1Y2tldHMYAiADKAsyIi5nb29nbGUuZ2Vub21pY3MudjEuQ292",
            "ZXJhZ2VCdWNrZXQSFwoPbmV4dF9wYWdlX3Rva2VuGAMgASgJIqMBChJTZWFy",
            "Y2hSZWFkc1JlcXVlc3QSGgoScmVhZF9ncm91cF9zZXRfaWRzGAEgAygJEhYK",
            "DnJlYWRfZ3JvdXBfaWRzGAUgAygJEhYKDnJlZmVyZW5jZV9uYW1lGAcgASgJ",
            "Eg0KBXN0YXJ0GAggASgDEgsKA2VuZBgJIAEoAxISCgpwYWdlX3Rva2VuGAMg",
            "ASgJEhEKCXBhZ2Vfc2l6ZRgEIAEoBSJcChNTZWFyY2hSZWFkc1Jlc3BvbnNl",
            "EiwKCmFsaWdubWVudHMYASADKAsyGC5nb29nbGUuZ2Vub21pY3MudjEuUmVh",
            "ZBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkinAEKElN0cmVhbVJlYWRzUmVx",
            "dWVzdBISCgpwcm9qZWN0X2lkGAEgASgJEhkKEXJlYWRfZ3JvdXBfc2V0X2lk",
            "GAIgASgJEhYKDnJlZmVyZW5jZV9uYW1lGAMgASgJEg0KBXN0YXJ0GAQgASgD",
            "EgsKA2VuZBgFIAEoAxINCgVzaGFyZBgGIAEoBRIUCgx0b3RhbF9zaGFyZHMY",
            "ByABKAUiQwoTU3RyZWFtUmVhZHNSZXNwb25zZRIsCgphbGlnbm1lbnRzGAEg",
            "AygLMhguZ29vZ2xlLmdlbm9taWNzLnYxLlJlYWQylQEKFFN0cmVhbWluZ1Jl",
            "YWRTZXJ2aWNlEn0KC1N0cmVhbVJlYWRzEiYuZ29vZ2xlLmdlbm9taWNzLnYx",
            "LlN0cmVhbVJlYWRzUmVxdWVzdBonLmdvb2dsZS5nZW5vbWljcy52MS5TdHJl",
            "YW1SZWFkc1Jlc3BvbnNlIhuC0+STAhUiEC92MS9yZWFkczpzdHJlYW06ASow",
            "ATLRCQoNUmVhZFNlcnZpY2VWMRKJAQoTSW1wb3J0UmVhZEdyb3VwU2V0cxIu",
            "Lmdvb2dsZS5nZW5vbWljcy52MS5JbXBvcnRSZWFkR3JvdXBTZXRzUmVxdWVz",
            "dBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iI4LT5JMCHSIYL3Yx",
            "L3JlYWRncm91cHNldHM6aW1wb3J0OgEqEpsBChJFeHBvcnRSZWFkR3JvdXBT",
            "ZXQSLS5nb29nbGUuZ2Vub21pY3MudjEuRXhwb3J0UmVhZEdyb3VwU2V0UmVx",
            "dWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iN4LT5JMCMSIs",
            "L3YxL3JlYWRncm91cHNldHMve3JlYWRfZ3JvdXBfc2V0X2lkfTpleHBvcnQ6",
            "ASoSmwEKE1NlYXJjaFJlYWRHcm91cFNldHMSLi5nb29nbGUuZ2Vub21pY3Mu",
            "djEuU2VhcmNoUmVhZEdyb3VwU2V0c1JlcXVlc3QaLy5nb29nbGUuZ2Vub21p",
            "Y3MudjEuU2VhcmNoUmVhZEdyb3VwU2V0c1Jlc3BvbnNlIiOC0+STAh0iGC92",
            "MS9yZWFkZ3JvdXBzZXRzL3NlYXJjaDoBKhKkAQoSVXBkYXRlUmVhZEdyb3Vw",
            "U2V0Ei0uZ29vZ2xlLmdlbm9taWNzLnYxLlVwZGF0ZVJlYWRHcm91cFNldFJl",
            "cXVlc3QaIC5nb29nbGUuZ2Vub21pY3MudjEuUmVhZEdyb3VwU2V0Ij2C0+ST",
            "AjcyJS92MS9yZWFkZ3JvdXBzZXRzL3tyZWFkX2dyb3VwX3NldF9pZH06DnJl",
            "YWRfZ3JvdXBfc2V0EooBChJEZWxldGVSZWFkR3JvdXBTZXQSLS5nb29nbGUu",
            "Z2Vub21pY3MudjEuRGVsZXRlUmVhZEdyb3VwU2V0UmVxdWVzdBoWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eSItgtPkkwInKiUvdjEvcmVhZGdyb3Vwc2V0cy97",
            "cmVhZF9ncm91cF9zZXRfaWR9Eo4BCg9HZXRSZWFkR3JvdXBTZXQSKi5nb29n",
            "bGUuZ2Vub21pY3MudjEuR2V0UmVhZEdyb3VwU2V0UmVxdWVzdBogLmdvb2ds",
            "ZS5nZW5vbWljcy52MS5SZWFkR3JvdXBTZXQiLYLT5JMCJxIlL3YxL3JlYWRn",
            "cm91cHNldHMve3JlYWRfZ3JvdXBfc2V0X2lkfRK1AQoTTGlzdENvdmVyYWdl",
            "QnVja2V0cxIuLmdvb2dsZS5nZW5vbWljcy52MS5MaXN0Q292ZXJhZ2VCdWNr",
            "ZXRzUmVxdWVzdBovLmdvb2dsZS5nZW5vbWljcy52MS5MaXN0Q292ZXJhZ2VC",
            "dWNrZXRzUmVzcG9uc2UiPYLT5JMCNxI1L3YxL3JlYWRncm91cHNldHMve3Jl",
            "YWRfZ3JvdXBfc2V0X2lkfS9jb3ZlcmFnZWJ1Y2tldHMSewoLU2VhcmNoUmVh",
            "ZHMSJi5nb29nbGUuZ2Vub21pY3MudjEuU2VhcmNoUmVhZHNSZXF1ZXN0Gicu",
            "Z29vZ2xlLmdlbm9taWNzLnYxLlNlYXJjaFJlYWRzUmVzcG9uc2UiG4LT5JMC",
            "FSIQL3YxL3JlYWRzL3NlYXJjaDoBKkJlChZjb20uZ29vZ2xlLmdlbm9taWNz",
            "LnYxQgpSZWFkc1Byb3RvUAFaOmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3Rv",
            "L2dvb2dsZWFwaXMvZ2Vub21pY3MvdjE7Z2Vub21pY3P4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Genomics.V1.RangeReflection.Descriptor, global::Google.Genomics.V1.ReadalignmentReflection.Descriptor, global::Google.Genomics.V1.ReadgroupsetReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReadGroupSetsRequest), global::Google.Genomics.V1.SearchReadGroupSetsRequest.Parser, new[]{ "DatasetIds", "Name", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReadGroupSetsResponse), global::Google.Genomics.V1.SearchReadGroupSetsResponse.Parser, new[]{ "ReadGroupSets", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ImportReadGroupSetsRequest), global::Google.Genomics.V1.ImportReadGroupSetsRequest.Parser, new[]{ "DatasetId", "ReferenceSetId", "SourceUris", "PartitionStrategy" }, null, new[]{ typeof(global::Google.Genomics.V1.ImportReadGroupSetsRequest.Types.PartitionStrategy) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ImportReadGroupSetsResponse), global::Google.Genomics.V1.ImportReadGroupSetsResponse.Parser, new[]{ "ReadGroupSetIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ExportReadGroupSetRequest), global::Google.Genomics.V1.ExportReadGroupSetRequest.Parser, new[]{ "ProjectId", "ExportUri", "ReadGroupSetId", "ReferenceNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.UpdateReadGroupSetRequest), global::Google.Genomics.V1.UpdateReadGroupSetRequest.Parser, new[]{ "ReadGroupSetId", "ReadGroupSet", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.DeleteReadGroupSetRequest), global::Google.Genomics.V1.DeleteReadGroupSetRequest.Parser, new[]{ "ReadGroupSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetReadGroupSetRequest), global::Google.Genomics.V1.GetReadGroupSetRequest.Parser, new[]{ "ReadGroupSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ListCoverageBucketsRequest), global::Google.Genomics.V1.ListCoverageBucketsRequest.Parser, new[]{ "ReadGroupSetId", "ReferenceName", "Start", "End", "TargetBucketWidth", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.CoverageBucket), global::Google.Genomics.V1.CoverageBucket.Parser, new[]{ "Range", "MeanCoverage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ListCoverageBucketsResponse), global::Google.Genomics.V1.ListCoverageBucketsResponse.Parser, new[]{ "BucketWidth", "CoverageBuckets", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReadsRequest), global::Google.Genomics.V1.SearchReadsRequest.Parser, new[]{ "ReadGroupSetIds", "ReadGroupIds", "ReferenceName", "Start", "End", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReadsResponse), global::Google.Genomics.V1.SearchReadsResponse.Parser, new[]{ "Alignments", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.StreamReadsRequest), global::Google.Genomics.V1.StreamReadsRequest.Parser, new[]{ "ProjectId", "ReadGroupSetId", "ReferenceName", "Start", "End", "Shard", "TotalShards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.StreamReadsResponse), global::Google.Genomics.V1.StreamReadsResponse.Parser, new[]{ "Alignments" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  The read group set search request.
  /// </summary>
  public sealed partial class SearchReadGroupSetsRequest : pb::IMessage<SearchReadGroupSetsRequest> {
    private static readonly pb::MessageParser<SearchReadGroupSetsRequest> _parser = new pb::MessageParser<SearchReadGroupSetsRequest>(() => new SearchReadGroupSetsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReadGroupSetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadGroupSetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadGroupSetsRequest(SearchReadGroupSetsRequest other) : this() {
      datasetIds_ = other.datasetIds_.Clone();
      name_ = other.name_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadGroupSetsRequest Clone() {
      return new SearchReadGroupSetsRequest(this);
    }

    /// <summary>Field number for the "dataset_ids" field.</summary>
    public const int DatasetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_datasetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> datasetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  Restricts this query to read group sets within the given datasets. At least
    ///  one ID must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DatasetIds {
      get { return datasetIds_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  Only return read group sets for which a substring of the name matches this
    ///  string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 256. The maximum value is 1024.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReadGroupSetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReadGroupSetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datasetIds_.Equals(other.datasetIds_)) return false;
      if (Name != other.Name) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datasetIds_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datasetIds_.WriteTo(output, _repeated_datasetIds_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datasetIds_.CalculateSize(_repeated_datasetIds_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReadGroupSetsRequest other) {
      if (other == null) {
        return;
      }
      datasetIds_.Add(other.datasetIds_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datasetIds_.AddEntriesFrom(input, _repeated_datasetIds_codec);
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The read group set search response.
  /// </summary>
  public sealed partial class SearchReadGroupSetsResponse : pb::IMessage<SearchReadGroupSetsResponse> {
    private static readonly pb::MessageParser<SearchReadGroupSetsResponse> _parser = new pb::MessageParser<SearchReadGroupSetsResponse>(() => new SearchReadGroupSetsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReadGroupSetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadGroupSetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadGroupSetsResponse(SearchReadGroupSetsResponse other) : this() {
      readGroupSets_ = other.readGroupSets_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadGroupSetsResponse Clone() {
      return new SearchReadGroupSetsResponse(this);
    }

    /// <summary>Field number for the "read_group_sets" field.</summary>
    public const int ReadGroupSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.ReadGroupSet> _repeated_readGroupSets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.ReadGroupSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.ReadGroupSet> readGroupSets_ = new pbc::RepeatedField<global::Google.Genomics.V1.ReadGroupSet>();
    /// <summary>
    ///  The list of matching read group sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.ReadGroupSet> ReadGroupSets {
      get { return readGroupSets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReadGroupSetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReadGroupSetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!readGroupSets_.Equals(other.readGroupSets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= readGroupSets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      readGroupSets_.WriteTo(output, _repeated_readGroupSets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += readGroupSets_.CalculateSize(_repeated_readGroupSets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReadGroupSetsResponse other) {
      if (other == null) {
        return;
      }
      readGroupSets_.Add(other.readGroupSets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            readGroupSets_.AddEntriesFrom(input, _repeated_readGroupSets_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The read group set import request.
  /// </summary>
  public sealed partial class ImportReadGroupSetsRequest : pb::IMessage<ImportReadGroupSetsRequest> {
    private static readonly pb::MessageParser<ImportReadGroupSetsRequest> _parser = new pb::MessageParser<ImportReadGroupSetsRequest>(() => new ImportReadGroupSetsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportReadGroupSetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportReadGroupSetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportReadGroupSetsRequest(ImportReadGroupSetsRequest other) : this() {
      datasetId_ = other.datasetId_;
      referenceSetId_ = other.referenceSetId_;
      sourceUris_ = other.sourceUris_.Clone();
      partitionStrategy_ = other.partitionStrategy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportReadGroupSetsRequest Clone() {
      return new ImportReadGroupSetsRequest(this);
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 1;
    private string datasetId_ = "";
    /// <summary>
    ///  Required. The ID of the dataset these read group sets will belong to. The
    ///  caller must have WRITE permissions to this dataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 4;
    private string referenceSetId_ = "";
    /// <summary>
    ///  The reference set to which the imported read group sets are aligned to, if
    ///  any. The reference names of this reference set must be a superset of those
    ///  found in the imported file headers. If no reference set id is provided, a
    ///  best effort is made to associate with a matching reference set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_uris" field.</summary>
    public const int SourceUrisFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sourceUris_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sourceUris_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  A list of URIs pointing at [BAM
    ///  files](https://samtools.github.io/hts-specs/SAMv1.pdf)
    ///  in Google Cloud Storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SourceUris {
      get { return sourceUris_; }
    }

    /// <summary>Field number for the "partition_strategy" field.</summary>
    public const int PartitionStrategyFieldNumber = 5;
    private global::Google.Genomics.V1.ImportReadGroupSetsRequest.Types.PartitionStrategy partitionStrategy_ = 0;
    /// <summary>
    ///  The partition strategy describes how read groups are partitioned into read
    ///  group sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.ImportReadGroupSetsRequest.Types.PartitionStrategy PartitionStrategy {
      get { return partitionStrategy_; }
      set {
        partitionStrategy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportReadGroupSetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportReadGroupSetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatasetId != other.DatasetId) return false;
      if (ReferenceSetId != other.ReferenceSetId) return false;
      if(!sourceUris_.Equals(other.sourceUris_)) return false;
      if (PartitionStrategy != other.PartitionStrategy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      hash ^= sourceUris_.GetHashCode();
      if (PartitionStrategy != 0) hash ^= PartitionStrategy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatasetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatasetId);
      }
      sourceUris_.WriteTo(output, _repeated_sourceUris_codec);
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReferenceSetId);
      }
      if (PartitionStrategy != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PartitionStrategy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      size += sourceUris_.CalculateSize(_repeated_sourceUris_codec);
      if (PartitionStrategy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PartitionStrategy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportReadGroupSetsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
      sourceUris_.Add(other.sourceUris_);
      if (other.PartitionStrategy != 0) {
        PartitionStrategy = other.PartitionStrategy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DatasetId = input.ReadString();
            break;
          }
          case 18: {
            sourceUris_.AddEntriesFrom(input, _repeated_sourceUris_codec);
            break;
          }
          case 34: {
            ReferenceSetId = input.ReadString();
            break;
          }
          case 40: {
            partitionStrategy_ = (global::Google.Genomics.V1.ImportReadGroupSetsRequest.Types.PartitionStrategy) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImportReadGroupSetsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PartitionStrategy {
        [pbr::OriginalName("PARTITION_STRATEGY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  In most cases, this strategy yields one read group set per file. This is
        ///  the default behavior.
        ///
        ///  Allocate one read group set per file per sample. For BAM files, read
        ///  groups are considered to share a sample if they have identical sample
        ///  names. Furthermore, all reads for each file which do not belong to a read
        ///  group, if any, will be grouped into a single read group set per-file.
        /// </summary>
        [pbr::OriginalName("PER_FILE_PER_SAMPLE")] PerFilePerSample = 1,
        /// <summary>
        ///  Includes all read groups in all imported files into a single read group
        ///  set. Requires that the headers for all imported files are equivalent. All
        ///  reads which do not belong to a read group, if any, will be grouped into a
        ///  separate read group set.
        /// </summary>
        [pbr::OriginalName("MERGE_ALL")] MergeAll = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  The read group set import response.
  /// </summary>
  public sealed partial class ImportReadGroupSetsResponse : pb::IMessage<ImportReadGroupSetsResponse> {
    private static readonly pb::MessageParser<ImportReadGroupSetsResponse> _parser = new pb::MessageParser<ImportReadGroupSetsResponse>(() => new ImportReadGroupSetsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportReadGroupSetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportReadGroupSetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportReadGroupSetsResponse(ImportReadGroupSetsResponse other) : this() {
      readGroupSetIds_ = other.readGroupSetIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportReadGroupSetsResponse Clone() {
      return new ImportReadGroupSetsResponse(this);
    }

    /// <summary>Field number for the "read_group_set_ids" field.</summary>
    public const int ReadGroupSetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_readGroupSetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> readGroupSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  IDs of the read group sets that were created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReadGroupSetIds {
      get { return readGroupSetIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportReadGroupSetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportReadGroupSetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!readGroupSetIds_.Equals(other.readGroupSetIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= readGroupSetIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      readGroupSetIds_.WriteTo(output, _repeated_readGroupSetIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += readGroupSetIds_.CalculateSize(_repeated_readGroupSetIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportReadGroupSetsResponse other) {
      if (other == null) {
        return;
      }
      readGroupSetIds_.Add(other.readGroupSetIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            readGroupSetIds_.AddEntriesFrom(input, _repeated_readGroupSetIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The read group set export request.
  /// </summary>
  public sealed partial class ExportReadGroupSetRequest : pb::IMessage<ExportReadGroupSetRequest> {
    private static readonly pb::MessageParser<ExportReadGroupSetRequest> _parser = new pb::MessageParser<ExportReadGroupSetRequest>(() => new ExportReadGroupSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportReadGroupSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportReadGroupSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportReadGroupSetRequest(ExportReadGroupSetRequest other) : this() {
      projectId_ = other.projectId_;
      exportUri_ = other.exportUri_;
      readGroupSetId_ = other.readGroupSetId_;
      referenceNames_ = other.referenceNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportReadGroupSetRequest Clone() {
      return new ExportReadGroupSetRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  Required. The Google Developers Console project ID that owns this
    ///  export. The caller must have WRITE access to this project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "export_uri" field.</summary>
    public const int ExportUriFieldNumber = 2;
    private string exportUri_ = "";
    /// <summary>
    ///  Required. A Google Cloud Storage URI for the exported BAM file.
    ///  The currently authenticated user must have write access to the new file.
    ///  An error will be returned if the URI already contains data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExportUri {
      get { return exportUri_; }
      set {
        exportUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_group_set_id" field.</summary>
    public const int ReadGroupSetIdFieldNumber = 3;
    private string readGroupSetId_ = "";
    /// <summary>
    ///  Required. The ID of the read group set to export. The caller must have
    ///  READ access to this read group set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReadGroupSetId {
      get { return readGroupSetId_; }
      set {
        readGroupSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_names" field.</summary>
    public const int ReferenceNamesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_referenceNames_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> referenceNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The reference names to export. If this is not specified, all reference
    ///  sequences, including unmapped reads, are exported.
    ///  Use `*` to export only unmapped reads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReferenceNames {
      get { return referenceNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportReadGroupSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportReadGroupSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (ExportUri != other.ExportUri) return false;
      if (ReadGroupSetId != other.ReadGroupSetId) return false;
      if(!referenceNames_.Equals(other.referenceNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (ExportUri.Length != 0) hash ^= ExportUri.GetHashCode();
      if (ReadGroupSetId.Length != 0) hash ^= ReadGroupSetId.GetHashCode();
      hash ^= referenceNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ExportUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExportUri);
      }
      if (ReadGroupSetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReadGroupSetId);
      }
      referenceNames_.WriteTo(output, _repeated_referenceNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (ExportUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExportUri);
      }
      if (ReadGroupSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReadGroupSetId);
      }
      size += referenceNames_.CalculateSize(_repeated_referenceNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportReadGroupSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.ExportUri.Length != 0) {
        ExportUri = other.ExportUri;
      }
      if (other.ReadGroupSetId.Length != 0) {
        ReadGroupSetId = other.ReadGroupSetId;
      }
      referenceNames_.Add(other.referenceNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ExportUri = input.ReadString();
            break;
          }
          case 26: {
            ReadGroupSetId = input.ReadString();
            break;
          }
          case 34: {
            referenceNames_.AddEntriesFrom(input, _repeated_referenceNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateReadGroupSetRequest : pb::IMessage<UpdateReadGroupSetRequest> {
    private static readonly pb::MessageParser<UpdateReadGroupSetRequest> _parser = new pb::MessageParser<UpdateReadGroupSetRequest>(() => new UpdateReadGroupSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateReadGroupSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateReadGroupSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateReadGroupSetRequest(UpdateReadGroupSetRequest other) : this() {
      readGroupSetId_ = other.readGroupSetId_;
      ReadGroupSet = other.readGroupSet_ != null ? other.ReadGroupSet.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateReadGroupSetRequest Clone() {
      return new UpdateReadGroupSetRequest(this);
    }

    /// <summary>Field number for the "read_group_set_id" field.</summary>
    public const int ReadGroupSetIdFieldNumber = 1;
    private string readGroupSetId_ = "";
    /// <summary>
    ///  The ID of the read group set to be updated. The caller must have WRITE
    ///  permissions to the dataset associated with this read group set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReadGroupSetId {
      get { return readGroupSetId_; }
      set {
        readGroupSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_group_set" field.</summary>
    public const int ReadGroupSetFieldNumber = 2;
    private global::Google.Genomics.V1.ReadGroupSet readGroupSet_;
    /// <summary>
    ///  The new read group set data. See `updateMask` for details on mutability of
    ///  fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.ReadGroupSet ReadGroupSet {
      get { return readGroupSet_; }
      set {
        readGroupSet_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  An optional mask specifying which fields to update. Supported fields:
    ///
    ///  * [name][google.genomics.v1.ReadGroupSet.name].
    ///  * [referenceSetId][google.genomics.v1.ReadGroupSet.reference_set_id].
    ///
    ///  Leaving `updateMask` unset is equivalent to specifying all mutable
    ///  fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateReadGroupSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateReadGroupSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadGroupSetId != other.ReadGroupSetId) return false;
      if (!object.Equals(ReadGroupSet, other.ReadGroupSet)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReadGroupSetId.Length != 0) hash ^= ReadGroupSetId.GetHashCode();
      if (readGroupSet_ != null) hash ^= ReadGroupSet.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadGroupSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReadGroupSetId);
      }
      if (readGroupSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReadGroupSet);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadGroupSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReadGroupSetId);
      }
      if (readGroupSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadGroupSet);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateReadGroupSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReadGroupSetId.Length != 0) {
        ReadGroupSetId = other.ReadGroupSetId;
      }
      if (other.readGroupSet_ != null) {
        if (readGroupSet_ == null) {
          readGroupSet_ = new global::Google.Genomics.V1.ReadGroupSet();
        }
        ReadGroupSet.MergeFrom(other.ReadGroupSet);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReadGroupSetId = input.ReadString();
            break;
          }
          case 18: {
            if (readGroupSet_ == null) {
              readGroupSet_ = new global::Google.Genomics.V1.ReadGroupSet();
            }
            input.ReadMessage(readGroupSet_);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteReadGroupSetRequest : pb::IMessage<DeleteReadGroupSetRequest> {
    private static readonly pb::MessageParser<DeleteReadGroupSetRequest> _parser = new pb::MessageParser<DeleteReadGroupSetRequest>(() => new DeleteReadGroupSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteReadGroupSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteReadGroupSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteReadGroupSetRequest(DeleteReadGroupSetRequest other) : this() {
      readGroupSetId_ = other.readGroupSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteReadGroupSetRequest Clone() {
      return new DeleteReadGroupSetRequest(this);
    }

    /// <summary>Field number for the "read_group_set_id" field.</summary>
    public const int ReadGroupSetIdFieldNumber = 1;
    private string readGroupSetId_ = "";
    /// <summary>
    ///  The ID of the read group set to be deleted. The caller must have WRITE
    ///  permissions to the dataset associated with this read group set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReadGroupSetId {
      get { return readGroupSetId_; }
      set {
        readGroupSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteReadGroupSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteReadGroupSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadGroupSetId != other.ReadGroupSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReadGroupSetId.Length != 0) hash ^= ReadGroupSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadGroupSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReadGroupSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadGroupSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReadGroupSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteReadGroupSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReadGroupSetId.Length != 0) {
        ReadGroupSetId = other.ReadGroupSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReadGroupSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReadGroupSetRequest : pb::IMessage<GetReadGroupSetRequest> {
    private static readonly pb::MessageParser<GetReadGroupSetRequest> _parser = new pb::MessageParser<GetReadGroupSetRequest>(() => new GetReadGroupSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReadGroupSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReadGroupSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReadGroupSetRequest(GetReadGroupSetRequest other) : this() {
      readGroupSetId_ = other.readGroupSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReadGroupSetRequest Clone() {
      return new GetReadGroupSetRequest(this);
    }

    /// <summary>Field number for the "read_group_set_id" field.</summary>
    public const int ReadGroupSetIdFieldNumber = 1;
    private string readGroupSetId_ = "";
    /// <summary>
    ///  The ID of the read group set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReadGroupSetId {
      get { return readGroupSetId_; }
      set {
        readGroupSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReadGroupSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReadGroupSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadGroupSetId != other.ReadGroupSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReadGroupSetId.Length != 0) hash ^= ReadGroupSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadGroupSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReadGroupSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadGroupSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReadGroupSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReadGroupSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReadGroupSetId.Length != 0) {
        ReadGroupSetId = other.ReadGroupSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReadGroupSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCoverageBucketsRequest : pb::IMessage<ListCoverageBucketsRequest> {
    private static readonly pb::MessageParser<ListCoverageBucketsRequest> _parser = new pb::MessageParser<ListCoverageBucketsRequest>(() => new ListCoverageBucketsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCoverageBucketsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCoverageBucketsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCoverageBucketsRequest(ListCoverageBucketsRequest other) : this() {
      readGroupSetId_ = other.readGroupSetId_;
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
      targetBucketWidth_ = other.targetBucketWidth_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCoverageBucketsRequest Clone() {
      return new ListCoverageBucketsRequest(this);
    }

    /// <summary>Field number for the "read_group_set_id" field.</summary>
    public const int ReadGroupSetIdFieldNumber = 1;
    private string readGroupSetId_ = "";
    /// <summary>
    ///  Required. The ID of the read group set over which coverage is requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReadGroupSetId {
      get { return readGroupSetId_; }
      set {
        readGroupSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 3;
    private string referenceName_ = "";
    /// <summary>
    ///  The name of the reference to query, within the reference set associated
    ///  with this query. Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private long start_;
    /// <summary>
    ///  The start position of the range on the reference, 0-based inclusive. If
    ///  specified, `referenceName` must also be specified. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private long end_;
    /// <summary>
    ///  The end position of the range on the reference, 0-based exclusive. If
    ///  specified, `referenceName` must also be specified. If unset or 0, defaults
    ///  to the length of the reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "target_bucket_width" field.</summary>
    public const int TargetBucketWidthFieldNumber = 6;
    private long targetBucketWidth_;
    /// <summary>
    ///  The desired width of each reported coverage bucket in base pairs. This
    ///  will be rounded down to the nearest precomputed bucket width; the value
    ///  of which is returned as `bucketWidth` in the response. Defaults
    ///  to infinity (each bucket spans an entire reference sequence) or the length
    ///  of the target range, if specified. The smallest precomputed
    ///  `bucketWidth` is currently 2048 base pairs; this is subject to
    ///  change.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetBucketWidth {
      get { return targetBucketWidth_; }
      set {
        targetBucketWidth_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 7;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 8;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 1024. The maximum value is 2048.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCoverageBucketsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCoverageBucketsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadGroupSetId != other.ReadGroupSetId) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (TargetBucketWidth != other.TargetBucketWidth) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReadGroupSetId.Length != 0) hash ^= ReadGroupSetId.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (TargetBucketWidth != 0L) hash ^= TargetBucketWidth.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadGroupSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReadGroupSetId);
      }
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(End);
      }
      if (TargetBucketWidth != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TargetBucketWidth);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadGroupSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReadGroupSetId);
      }
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (TargetBucketWidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetBucketWidth);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCoverageBucketsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReadGroupSetId.Length != 0) {
        ReadGroupSetId = other.ReadGroupSetId;
      }
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.TargetBucketWidth != 0L) {
        TargetBucketWidth = other.TargetBucketWidth;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReadGroupSetId = input.ReadString();
            break;
          }
          case 26: {
            ReferenceName = input.ReadString();
            break;
          }
          case 32: {
            Start = input.ReadInt64();
            break;
          }
          case 40: {
            End = input.ReadInt64();
            break;
          }
          case 48: {
            TargetBucketWidth = input.ReadInt64();
            break;
          }
          case 58: {
            PageToken = input.ReadString();
            break;
          }
          case 64: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A bucket over which read coverage has been precomputed. A bucket corresponds
  ///  to a specific range of the reference sequence.
  /// </summary>
  public sealed partial class CoverageBucket : pb::IMessage<CoverageBucket> {
    private static readonly pb::MessageParser<CoverageBucket> _parser = new pb::MessageParser<CoverageBucket>(() => new CoverageBucket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoverageBucket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoverageBucket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoverageBucket(CoverageBucket other) : this() {
      Range = other.range_ != null ? other.Range.Clone() : null;
      meanCoverage_ = other.meanCoverage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoverageBucket Clone() {
      return new CoverageBucket(this);
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 1;
    private global::Google.Genomics.V1.Range range_;
    /// <summary>
    ///  The genomic coordinate range spanned by this bucket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Genomics.V1.Range Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "mean_coverage" field.</summary>
    public const int MeanCoverageFieldNumber = 2;
    private float meanCoverage_;
    /// <summary>
    ///  The average number of reads which are aligned to each individual
    ///  reference base in this bucket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeanCoverage {
      get { return meanCoverage_; }
      set {
        meanCoverage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoverageBucket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoverageBucket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Range, other.Range)) return false;
      if (MeanCoverage != other.MeanCoverage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (range_ != null) hash ^= Range.GetHashCode();
      if (MeanCoverage != 0F) hash ^= MeanCoverage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (range_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Range);
      }
      if (MeanCoverage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MeanCoverage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (MeanCoverage != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoverageBucket other) {
      if (other == null) {
        return;
      }
      if (other.range_ != null) {
        if (range_ == null) {
          range_ = new global::Google.Genomics.V1.Range();
        }
        Range.MergeFrom(other.Range);
      }
      if (other.MeanCoverage != 0F) {
        MeanCoverage = other.MeanCoverage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (range_ == null) {
              range_ = new global::Google.Genomics.V1.Range();
            }
            input.ReadMessage(range_);
            break;
          }
          case 21: {
            MeanCoverage = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListCoverageBucketsResponse : pb::IMessage<ListCoverageBucketsResponse> {
    private static readonly pb::MessageParser<ListCoverageBucketsResponse> _parser = new pb::MessageParser<ListCoverageBucketsResponse>(() => new ListCoverageBucketsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCoverageBucketsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCoverageBucketsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCoverageBucketsResponse(ListCoverageBucketsResponse other) : this() {
      bucketWidth_ = other.bucketWidth_;
      coverageBuckets_ = other.coverageBuckets_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCoverageBucketsResponse Clone() {
      return new ListCoverageBucketsResponse(this);
    }

    /// <summary>Field number for the "bucket_width" field.</summary>
    public const int BucketWidthFieldNumber = 1;
    private long bucketWidth_;
    /// <summary>
    ///  The length of each coverage bucket in base pairs. Note that buckets at the
    ///  end of a reference sequence may be shorter. This value is omitted if the
    ///  bucket width is infinity (the default behaviour, with no range or
    ///  `targetBucketWidth`).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BucketWidth {
      get { return bucketWidth_; }
      set {
        bucketWidth_ = value;
      }
    }

    /// <summary>Field number for the "coverage_buckets" field.</summary>
    public const int CoverageBucketsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.CoverageBucket> _repeated_coverageBuckets_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Genomics.V1.CoverageBucket.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.CoverageBucket> coverageBuckets_ = new pbc::RepeatedField<global::Google.Genomics.V1.CoverageBucket>();
    /// <summary>
    ///  The coverage buckets. The list of buckets is sparse; a bucket with 0
    ///  overlapping reads is not returned. A bucket never crosses more than one
    ///  reference sequence. Each bucket has width `bucketWidth`, unless
    ///  its end is the end of the reference sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.CoverageBucket> CoverageBuckets {
      get { return coverageBuckets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 3;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCoverageBucketsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCoverageBucketsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BucketWidth != other.BucketWidth) return false;
      if(!coverageBuckets_.Equals(other.coverageBuckets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BucketWidth != 0L) hash ^= BucketWidth.GetHashCode();
      hash ^= coverageBuckets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BucketWidth != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BucketWidth);
      }
      coverageBuckets_.WriteTo(output, _repeated_coverageBuckets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BucketWidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BucketWidth);
      }
      size += coverageBuckets_.CalculateSize(_repeated_coverageBuckets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCoverageBucketsResponse other) {
      if (other == null) {
        return;
      }
      if (other.BucketWidth != 0L) {
        BucketWidth = other.BucketWidth;
      }
      coverageBuckets_.Add(other.coverageBuckets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BucketWidth = input.ReadInt64();
            break;
          }
          case 18: {
            coverageBuckets_.AddEntriesFrom(input, _repeated_coverageBuckets_codec);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The read search request.
  /// </summary>
  public sealed partial class SearchReadsRequest : pb::IMessage<SearchReadsRequest> {
    private static readonly pb::MessageParser<SearchReadsRequest> _parser = new pb::MessageParser<SearchReadsRequest>(() => new SearchReadsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReadsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadsRequest(SearchReadsRequest other) : this() {
      readGroupSetIds_ = other.readGroupSetIds_.Clone();
      readGroupIds_ = other.readGroupIds_.Clone();
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadsRequest Clone() {
      return new SearchReadsRequest(this);
    }

    /// <summary>Field number for the "read_group_set_ids" field.</summary>
    public const int ReadGroupSetIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_readGroupSetIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> readGroupSetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The IDs of the read groups sets within which to search for reads. All
    ///  specified read group sets must be aligned against a common set of reference
    ///  sequences; this defines the genomic coordinates for the query. Must specify
    ///  one of `readGroupSetIds` or `readGroupIds`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReadGroupSetIds {
      get { return readGroupSetIds_; }
    }

    /// <summary>Field number for the "read_group_ids" field.</summary>
    public const int ReadGroupIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_readGroupIds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> readGroupIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The IDs of the read groups within which to search for reads. All specified
    ///  read groups must belong to the same read group sets. Must specify one of
    ///  `readGroupSetIds` or `readGroupIds`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReadGroupIds {
      get { return readGroupIds_; }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 7;
    private string referenceName_ = "";
    /// <summary>
    ///  The reference sequence name, for example `chr1`, `1`, or `chrX`. If set to
    ///  `*`, only unmapped reads are returned. If unspecified, all reads (mapped
    ///  and unmapped) are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 8;
    private long start_;
    /// <summary>
    ///  The start position of the range on the reference, 0-based inclusive. If
    ///  specified, `referenceName` must also be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 9;
    private long end_;
    /// <summary>
    ///  The end position of the range on the reference, 0-based exclusive. If
    ///  specified, `referenceName` must also be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 4;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 256. The maximum value is 2048.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReadsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReadsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!readGroupSetIds_.Equals(other.readGroupSetIds_)) return false;
      if(!readGroupIds_.Equals(other.readGroupIds_)) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= readGroupSetIds_.GetHashCode();
      hash ^= readGroupIds_.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      readGroupSetIds_.WriteTo(output, _repeated_readGroupSetIds_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageSize);
      }
      readGroupIds_.WriteTo(output, _repeated_readGroupIds_codec);
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += readGroupSetIds_.CalculateSize(_repeated_readGroupSetIds_codec);
      size += readGroupIds_.CalculateSize(_repeated_readGroupIds_codec);
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReadsRequest other) {
      if (other == null) {
        return;
      }
      readGroupSetIds_.Add(other.readGroupSetIds_);
      readGroupIds_.Add(other.readGroupIds_);
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            readGroupSetIds_.AddEntriesFrom(input, _repeated_readGroupSetIds_codec);
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 32: {
            PageSize = input.ReadInt32();
            break;
          }
          case 42: {
            readGroupIds_.AddEntriesFrom(input, _repeated_readGroupIds_codec);
            break;
          }
          case 58: {
            ReferenceName = input.ReadString();
            break;
          }
          case 64: {
            Start = input.ReadInt64();
            break;
          }
          case 72: {
            End = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The read search response.
  /// </summary>
  public sealed partial class SearchReadsResponse : pb::IMessage<SearchReadsResponse> {
    private static readonly pb::MessageParser<SearchReadsResponse> _parser = new pb::MessageParser<SearchReadsResponse>(() => new SearchReadsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReadsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadsResponse(SearchReadsResponse other) : this() {
      alignments_ = other.alignments_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReadsResponse Clone() {
      return new SearchReadsResponse(this);
    }

    /// <summary>Field number for the "alignments" field.</summary>
    public const int AlignmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Read> _repeated_alignments_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Read.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Read> alignments_ = new pbc::RepeatedField<global::Google.Genomics.V1.Read>();
    /// <summary>
    ///  The list of matching alignments sorted by mapped genomic coordinate,
    ///  if any, ascending in position within the same reference. Unmapped reads,
    ///  which have no position, are returned contiguously and are sorted in
    ///  ascending lexicographic order by fragment name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Read> Alignments {
      get { return alignments_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReadsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReadsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!alignments_.Equals(other.alignments_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= alignments_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      alignments_.WriteTo(output, _repeated_alignments_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += alignments_.CalculateSize(_repeated_alignments_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReadsResponse other) {
      if (other == null) {
        return;
      }
      alignments_.Add(other.alignments_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            alignments_.AddEntriesFrom(input, _repeated_alignments_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The stream reads request.
  /// </summary>
  public sealed partial class StreamReadsRequest : pb::IMessage<StreamReadsRequest> {
    private static readonly pb::MessageParser<StreamReadsRequest> _parser = new pb::MessageParser<StreamReadsRequest>(() => new StreamReadsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamReadsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamReadsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamReadsRequest(StreamReadsRequest other) : this() {
      projectId_ = other.projectId_;
      readGroupSetId_ = other.readGroupSetId_;
      referenceName_ = other.referenceName_;
      start_ = other.start_;
      end_ = other.end_;
      shard_ = other.shard_;
      totalShards_ = other.totalShards_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamReadsRequest Clone() {
      return new StreamReadsRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  The Google Developers Console project ID or number which will be billed
    ///  for this access. The caller must have WRITE access to this project.
    ///  Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_group_set_id" field.</summary>
    public const int ReadGroupSetIdFieldNumber = 2;
    private string readGroupSetId_ = "";
    /// <summary>
    ///  The ID of the read group set from which to stream reads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReadGroupSetId {
      get { return readGroupSetId_; }
      set {
        readGroupSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_name" field.</summary>
    public const int ReferenceNameFieldNumber = 3;
    private string referenceName_ = "";
    /// <summary>
    ///  The reference sequence name, for example `chr1`,
    ///  `1`, or `chrX`. If set to *, only unmapped reads are
    ///  returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceName {
      get { return referenceName_; }
      set {
        referenceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private long start_;
    /// <summary>
    ///  The start position of the range on the reference, 0-based inclusive. If
    ///  specified, `referenceName` must also be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private long end_;
    /// <summary>
    ///  The end position of the range on the reference, 0-based exclusive. If
    ///  specified, `referenceName` must also be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "shard" field.</summary>
    public const int ShardFieldNumber = 6;
    private int shard_;
    /// <summary>
    ///  Restricts results to a shard containing approximately `1/totalShards`
    ///  of the normal response payload for this query. Results from a sharded
    ///  request are disjoint from those returned by all queries which differ only
    ///  in their shard parameter. A shard may yield 0 results; this is especially
    ///  likely for large values of `totalShards`.
    ///
    ///  Valid values are `[0, totalShards)`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shard {
      get { return shard_; }
      set {
        shard_ = value;
      }
    }

    /// <summary>Field number for the "total_shards" field.</summary>
    public const int TotalShardsFieldNumber = 7;
    private int totalShards_;
    /// <summary>
    ///  Specifying `totalShards` causes a disjoint subset of the normal response
    ///  payload to be returned for each query with a unique `shard` parameter
    ///  specified. A best effort is made to yield equally sized shards. Sharding
    ///  can be used to distribute processing amongst workers, where each worker is
    ///  assigned a unique `shard` number and all workers specify the same
    ///  `totalShards` number. The union of reads returned for all sharded queries
    ///  `[0, totalShards)` is equal to those returned by a single unsharded query.
    ///
    ///  Queries for different values of `totalShards` with common divisors will
    ///  share shard boundaries. For example, streaming `shard` 2 of 5
    ///  `totalShards` yields the same results as streaming `shard`s 4 and 5 of 10
    ///  `totalShards`. This property can be leveraged for adaptive retries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalShards {
      get { return totalShards_; }
      set {
        totalShards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamReadsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamReadsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (ReadGroupSetId != other.ReadGroupSetId) return false;
      if (ReferenceName != other.ReferenceName) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (Shard != other.Shard) return false;
      if (TotalShards != other.TotalShards) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (ReadGroupSetId.Length != 0) hash ^= ReadGroupSetId.GetHashCode();
      if (ReferenceName.Length != 0) hash ^= ReferenceName.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (Shard != 0) hash ^= Shard.GetHashCode();
      if (TotalShards != 0) hash ^= TotalShards.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ReadGroupSetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReadGroupSetId);
      }
      if (ReferenceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferenceName);
      }
      if (Start != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(End);
      }
      if (Shard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Shard);
      }
      if (TotalShards != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalShards);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (ReadGroupSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReadGroupSetId);
      }
      if (ReferenceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceName);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (Shard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shard);
      }
      if (TotalShards != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalShards);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamReadsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.ReadGroupSetId.Length != 0) {
        ReadGroupSetId = other.ReadGroupSetId;
      }
      if (other.ReferenceName.Length != 0) {
        ReferenceName = other.ReferenceName;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.Shard != 0) {
        Shard = other.Shard;
      }
      if (other.TotalShards != 0) {
        TotalShards = other.TotalShards;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ReadGroupSetId = input.ReadString();
            break;
          }
          case 26: {
            ReferenceName = input.ReadString();
            break;
          }
          case 32: {
            Start = input.ReadInt64();
            break;
          }
          case 40: {
            End = input.ReadInt64();
            break;
          }
          case 48: {
            Shard = input.ReadInt32();
            break;
          }
          case 56: {
            TotalShards = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamReadsResponse : pb::IMessage<StreamReadsResponse> {
    private static readonly pb::MessageParser<StreamReadsResponse> _parser = new pb::MessageParser<StreamReadsResponse>(() => new StreamReadsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamReadsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamReadsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamReadsResponse(StreamReadsResponse other) : this() {
      alignments_ = other.alignments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamReadsResponse Clone() {
      return new StreamReadsResponse(this);
    }

    /// <summary>Field number for the "alignments" field.</summary>
    public const int AlignmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Read> _repeated_alignments_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Read.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Read> alignments_ = new pbc::RepeatedField<global::Google.Genomics.V1.Read>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Read> Alignments {
      get { return alignments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamReadsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamReadsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!alignments_.Equals(other.alignments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= alignments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      alignments_.WriteTo(output, _repeated_alignments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += alignments_.CalculateSize(_repeated_alignments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamReadsResponse other) {
      if (other == null) {
        return;
      }
      alignments_.Add(other.alignments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            alignments_.AddEntriesFrom(input, _repeated_alignments_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
