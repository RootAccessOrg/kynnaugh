// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_service.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Bigtable.Admin.Table.V1 {
  /// <summary>
  ///  Service for creating, configuring, and deleting Cloud Bigtable tables.
  ///  Provides access to the table schemas only, not the data stored within the tables.
  /// </summary>
  public static class BigtableTableService
  {
    static readonly string __ServiceName = "google.bigtable.admin.table.v1.BigtableTableService";

    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.CreateTableRequest> __Marshaller_CreateTableRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.CreateTableRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.Table> __Marshaller_Table = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.Table.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.ListTablesRequest> __Marshaller_ListTablesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.ListTablesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.ListTablesResponse> __Marshaller_ListTablesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.ListTablesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.GetTableRequest> __Marshaller_GetTableRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.GetTableRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest> __Marshaller_DeleteTableRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.RenameTableRequest> __Marshaller_RenameTableRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.RenameTableRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest> __Marshaller_CreateColumnFamilyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> __Marshaller_ColumnFamily = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.ColumnFamily.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest> __Marshaller_DeleteColumnFamilyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest> __Marshaller_BulkDeleteRowsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.CreateTableRequest, global::Google.Bigtable.Admin.Table.V1.Table> __Method_CreateTable = new Method<global::Google.Bigtable.Admin.Table.V1.CreateTableRequest, global::Google.Bigtable.Admin.Table.V1.Table>(
        MethodType.Unary,
        __ServiceName,
        "CreateTable",
        __Marshaller_CreateTableRequest,
        __Marshaller_Table);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.ListTablesRequest, global::Google.Bigtable.Admin.Table.V1.ListTablesResponse> __Method_ListTables = new Method<global::Google.Bigtable.Admin.Table.V1.ListTablesRequest, global::Google.Bigtable.Admin.Table.V1.ListTablesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListTables",
        __Marshaller_ListTablesRequest,
        __Marshaller_ListTablesResponse);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.GetTableRequest, global::Google.Bigtable.Admin.Table.V1.Table> __Method_GetTable = new Method<global::Google.Bigtable.Admin.Table.V1.GetTableRequest, global::Google.Bigtable.Admin.Table.V1.Table>(
        MethodType.Unary,
        __ServiceName,
        "GetTable",
        __Marshaller_GetTableRequest,
        __Marshaller_Table);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTable = new Method<global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteTable",
        __Marshaller_DeleteTableRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.RenameTableRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RenameTable = new Method<global::Google.Bigtable.Admin.Table.V1.RenameTableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "RenameTable",
        __Marshaller_RenameTableRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest, global::Google.Bigtable.Admin.Table.V1.ColumnFamily> __Method_CreateColumnFamily = new Method<global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest, global::Google.Bigtable.Admin.Table.V1.ColumnFamily>(
        MethodType.Unary,
        __ServiceName,
        "CreateColumnFamily",
        __Marshaller_CreateColumnFamilyRequest,
        __Marshaller_ColumnFamily);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.ColumnFamily, global::Google.Bigtable.Admin.Table.V1.ColumnFamily> __Method_UpdateColumnFamily = new Method<global::Google.Bigtable.Admin.Table.V1.ColumnFamily, global::Google.Bigtable.Admin.Table.V1.ColumnFamily>(
        MethodType.Unary,
        __ServiceName,
        "UpdateColumnFamily",
        __Marshaller_ColumnFamily,
        __Marshaller_ColumnFamily);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteColumnFamily = new Method<global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteColumnFamily",
        __Marshaller_DeleteColumnFamilyRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_BulkDeleteRows = new Method<global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "BulkDeleteRows",
        __Marshaller_BulkDeleteRowsRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BigtableTableService</summary>
    public abstract class BigtableTableServiceBase
    {
      /// <summary>
      ///  Creates a new table, to be served from a specified cluster.
      ///  The table can be created with a full set of initial column families,
      ///  specified in the request.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.Admin.Table.V1.Table> CreateTable(global::Google.Bigtable.Admin.Table.V1.CreateTableRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists the names of all tables served from a specified cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.Admin.Table.V1.ListTablesResponse> ListTables(global::Google.Bigtable.Admin.Table.V1.ListTablesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the schema of the specified table, including its column families.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.Admin.Table.V1.Table> GetTable(global::Google.Bigtable.Admin.Table.V1.GetTableRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Permanently deletes a specified table and all of its data.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTable(global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Changes the name of a specified table.
      ///  Cannot be used to move tables between clusters, zones, or projects.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RenameTable(global::Google.Bigtable.Admin.Table.V1.RenameTableRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a new column family within a specified table.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> CreateColumnFamily(global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Changes the configuration of a specified column family.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> UpdateColumnFamily(global::Google.Bigtable.Admin.Table.V1.ColumnFamily request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Permanently deletes a specified column family and all of its data.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteColumnFamily(global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Delete all rows in a table corresponding to a particular prefix
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> BulkDeleteRows(global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BigtableTableService</summary>
    public class BigtableTableServiceClient : ClientBase<BigtableTableServiceClient>
    {
      /// <summary>Creates a new client for BigtableTableService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BigtableTableServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BigtableTableService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BigtableTableServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BigtableTableServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BigtableTableServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Creates a new table, to be served from a specified cluster.
      ///  The table can be created with a full set of initial column families,
      ///  specified in the request.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.Table CreateTable(global::Google.Bigtable.Admin.Table.V1.CreateTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTable(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new table, to be served from a specified cluster.
      ///  The table can be created with a full set of initial column families,
      ///  specified in the request.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.Table CreateTable(global::Google.Bigtable.Admin.Table.V1.CreateTableRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      ///  Creates a new table, to be served from a specified cluster.
      ///  The table can be created with a full set of initial column families,
      ///  specified in the request.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.Table> CreateTableAsync(global::Google.Bigtable.Admin.Table.V1.CreateTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTableAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new table, to be served from a specified cluster.
      ///  The table can be created with a full set of initial column families,
      ///  specified in the request.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.Table> CreateTableAsync(global::Google.Bigtable.Admin.Table.V1.CreateTableRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      ///  Lists the names of all tables served from a specified cluster.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.ListTablesResponse ListTables(global::Google.Bigtable.Admin.Table.V1.ListTablesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTables(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the names of all tables served from a specified cluster.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.ListTablesResponse ListTables(global::Google.Bigtable.Admin.Table.V1.ListTablesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      ///  Lists the names of all tables served from a specified cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.ListTablesResponse> ListTablesAsync(global::Google.Bigtable.Admin.Table.V1.ListTablesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTablesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the names of all tables served from a specified cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.ListTablesResponse> ListTablesAsync(global::Google.Bigtable.Admin.Table.V1.ListTablesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      ///  Gets the schema of the specified table, including its column families.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.Table GetTable(global::Google.Bigtable.Admin.Table.V1.GetTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTable(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the schema of the specified table, including its column families.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.Table GetTable(global::Google.Bigtable.Admin.Table.V1.GetTableRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      ///  Gets the schema of the specified table, including its column families.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.Table> GetTableAsync(global::Google.Bigtable.Admin.Table.V1.GetTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTableAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the schema of the specified table, including its column families.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.Table> GetTableAsync(global::Google.Bigtable.Admin.Table.V1.GetTableRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      ///  Permanently deletes a specified table and all of its data.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTable(global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTable(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Permanently deletes a specified table and all of its data.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTable(global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTable, null, options, request);
      }
      /// <summary>
      ///  Permanently deletes a specified table and all of its data.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTableAsync(global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTableAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Permanently deletes a specified table and all of its data.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTableAsync(global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTable, null, options, request);
      }
      /// <summary>
      ///  Changes the name of a specified table.
      ///  Cannot be used to move tables between clusters, zones, or projects.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RenameTable(global::Google.Bigtable.Admin.Table.V1.RenameTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameTable(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Changes the name of a specified table.
      ///  Cannot be used to move tables between clusters, zones, or projects.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RenameTable(global::Google.Bigtable.Admin.Table.V1.RenameTableRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenameTable, null, options, request);
      }
      /// <summary>
      ///  Changes the name of a specified table.
      ///  Cannot be used to move tables between clusters, zones, or projects.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RenameTableAsync(global::Google.Bigtable.Admin.Table.V1.RenameTableRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameTableAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Changes the name of a specified table.
      ///  Cannot be used to move tables between clusters, zones, or projects.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RenameTableAsync(global::Google.Bigtable.Admin.Table.V1.RenameTableRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenameTable, null, options, request);
      }
      /// <summary>
      ///  Creates a new column family within a specified table.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.ColumnFamily CreateColumnFamily(global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateColumnFamily(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new column family within a specified table.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.ColumnFamily CreateColumnFamily(global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateColumnFamily, null, options, request);
      }
      /// <summary>
      ///  Creates a new column family within a specified table.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> CreateColumnFamilyAsync(global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateColumnFamilyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new column family within a specified table.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> CreateColumnFamilyAsync(global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateColumnFamily, null, options, request);
      }
      /// <summary>
      ///  Changes the configuration of a specified column family.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.ColumnFamily UpdateColumnFamily(global::Google.Bigtable.Admin.Table.V1.ColumnFamily request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateColumnFamily(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Changes the configuration of a specified column family.
      /// </summary>
      public virtual global::Google.Bigtable.Admin.Table.V1.ColumnFamily UpdateColumnFamily(global::Google.Bigtable.Admin.Table.V1.ColumnFamily request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateColumnFamily, null, options, request);
      }
      /// <summary>
      ///  Changes the configuration of a specified column family.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> UpdateColumnFamilyAsync(global::Google.Bigtable.Admin.Table.V1.ColumnFamily request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateColumnFamilyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Changes the configuration of a specified column family.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.Admin.Table.V1.ColumnFamily> UpdateColumnFamilyAsync(global::Google.Bigtable.Admin.Table.V1.ColumnFamily request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateColumnFamily, null, options, request);
      }
      /// <summary>
      ///  Permanently deletes a specified column family and all of its data.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteColumnFamily(global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteColumnFamily(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Permanently deletes a specified column family and all of its data.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteColumnFamily(global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteColumnFamily, null, options, request);
      }
      /// <summary>
      ///  Permanently deletes a specified column family and all of its data.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteColumnFamilyAsync(global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteColumnFamilyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Permanently deletes a specified column family and all of its data.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteColumnFamilyAsync(global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteColumnFamily, null, options, request);
      }
      /// <summary>
      ///  Delete all rows in a table corresponding to a particular prefix
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty BulkDeleteRows(global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BulkDeleteRows(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Delete all rows in a table corresponding to a particular prefix
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty BulkDeleteRows(global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkDeleteRows, null, options, request);
      }
      /// <summary>
      ///  Delete all rows in a table corresponding to a particular prefix
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BulkDeleteRowsAsync(global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BulkDeleteRowsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Delete all rows in a table corresponding to a particular prefix
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BulkDeleteRowsAsync(global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkDeleteRows, null, options, request);
      }
      protected override BigtableTableServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BigtableTableServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(BigtableTableServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTable, serviceImpl.CreateTable)
          .AddMethod(__Method_ListTables, serviceImpl.ListTables)
          .AddMethod(__Method_GetTable, serviceImpl.GetTable)
          .AddMethod(__Method_DeleteTable, serviceImpl.DeleteTable)
          .AddMethod(__Method_RenameTable, serviceImpl.RenameTable)
          .AddMethod(__Method_CreateColumnFamily, serviceImpl.CreateColumnFamily)
          .AddMethod(__Method_UpdateColumnFamily, serviceImpl.UpdateColumnFamily)
          .AddMethod(__Method_DeleteColumnFamily, serviceImpl.DeleteColumnFamily)
          .AddMethod(__Method_BulkDeleteRows, serviceImpl.BulkDeleteRows).Build();
    }

  }
}
#endregion
