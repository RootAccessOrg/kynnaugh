// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Container.V1 {
  /// <summary>
  ///  Google Container Engine Cluster Manager v1
  /// </summary>
  public static class ClusterManager
  {
    static readonly string __ServiceName = "google.container.v1.ClusterManager";

    static readonly Marshaller<global::Google.Container.V1.ListClustersRequest> __Marshaller_ListClustersRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ListClustersRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.ListClustersResponse> __Marshaller_ListClustersResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ListClustersResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.GetClusterRequest> __Marshaller_GetClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.GetClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.Cluster> __Marshaller_Cluster = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.Cluster.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.CreateClusterRequest> __Marshaller_CreateClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.CreateClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.UpdateClusterRequest> __Marshaller_UpdateClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.UpdateClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.DeleteClusterRequest> __Marshaller_DeleteClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.DeleteClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.ListOperationsRequest> __Marshaller_ListOperationsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ListOperationsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.ListOperationsResponse> __Marshaller_ListOperationsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ListOperationsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.GetOperationRequest> __Marshaller_GetOperationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.GetOperationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.CancelOperationRequest> __Marshaller_CancelOperationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.CancelOperationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.GetServerConfigRequest> __Marshaller_GetServerConfigRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.GetServerConfigRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.ServerConfig> __Marshaller_ServerConfig = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ServerConfig.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.ListNodePoolsRequest> __Marshaller_ListNodePoolsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ListNodePoolsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.ListNodePoolsResponse> __Marshaller_ListNodePoolsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.ListNodePoolsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.GetNodePoolRequest> __Marshaller_GetNodePoolRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.GetNodePoolRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.NodePool> __Marshaller_NodePool = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.NodePool.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.CreateNodePoolRequest> __Marshaller_CreateNodePoolRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.CreateNodePoolRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.DeleteNodePoolRequest> __Marshaller_DeleteNodePoolRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.DeleteNodePoolRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.RollbackNodePoolUpgradeRequest> __Marshaller_RollbackNodePoolUpgradeRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.RollbackNodePoolUpgradeRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Container.V1.SetNodePoolManagementRequest> __Marshaller_SetNodePoolManagementRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Container.V1.SetNodePoolManagementRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Container.V1.ListClustersRequest, global::Google.Container.V1.ListClustersResponse> __Method_ListClusters = new Method<global::Google.Container.V1.ListClustersRequest, global::Google.Container.V1.ListClustersResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListClusters",
        __Marshaller_ListClustersRequest,
        __Marshaller_ListClustersResponse);

    static readonly Method<global::Google.Container.V1.GetClusterRequest, global::Google.Container.V1.Cluster> __Method_GetCluster = new Method<global::Google.Container.V1.GetClusterRequest, global::Google.Container.V1.Cluster>(
        MethodType.Unary,
        __ServiceName,
        "GetCluster",
        __Marshaller_GetClusterRequest,
        __Marshaller_Cluster);

    static readonly Method<global::Google.Container.V1.CreateClusterRequest, global::Google.Container.V1.Operation> __Method_CreateCluster = new Method<global::Google.Container.V1.CreateClusterRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "CreateCluster",
        __Marshaller_CreateClusterRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.UpdateClusterRequest, global::Google.Container.V1.Operation> __Method_UpdateCluster = new Method<global::Google.Container.V1.UpdateClusterRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "UpdateCluster",
        __Marshaller_UpdateClusterRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.DeleteClusterRequest, global::Google.Container.V1.Operation> __Method_DeleteCluster = new Method<global::Google.Container.V1.DeleteClusterRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteCluster",
        __Marshaller_DeleteClusterRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.ListOperationsRequest, global::Google.Container.V1.ListOperationsResponse> __Method_ListOperations = new Method<global::Google.Container.V1.ListOperationsRequest, global::Google.Container.V1.ListOperationsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListOperations",
        __Marshaller_ListOperationsRequest,
        __Marshaller_ListOperationsResponse);

    static readonly Method<global::Google.Container.V1.GetOperationRequest, global::Google.Container.V1.Operation> __Method_GetOperation = new Method<global::Google.Container.V1.GetOperationRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "GetOperation",
        __Marshaller_GetOperationRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelOperation = new Method<global::Google.Container.V1.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "CancelOperation",
        __Marshaller_CancelOperationRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Container.V1.GetServerConfigRequest, global::Google.Container.V1.ServerConfig> __Method_GetServerConfig = new Method<global::Google.Container.V1.GetServerConfigRequest, global::Google.Container.V1.ServerConfig>(
        MethodType.Unary,
        __ServiceName,
        "GetServerConfig",
        __Marshaller_GetServerConfigRequest,
        __Marshaller_ServerConfig);

    static readonly Method<global::Google.Container.V1.ListNodePoolsRequest, global::Google.Container.V1.ListNodePoolsResponse> __Method_ListNodePools = new Method<global::Google.Container.V1.ListNodePoolsRequest, global::Google.Container.V1.ListNodePoolsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListNodePools",
        __Marshaller_ListNodePoolsRequest,
        __Marshaller_ListNodePoolsResponse);

    static readonly Method<global::Google.Container.V1.GetNodePoolRequest, global::Google.Container.V1.NodePool> __Method_GetNodePool = new Method<global::Google.Container.V1.GetNodePoolRequest, global::Google.Container.V1.NodePool>(
        MethodType.Unary,
        __ServiceName,
        "GetNodePool",
        __Marshaller_GetNodePoolRequest,
        __Marshaller_NodePool);

    static readonly Method<global::Google.Container.V1.CreateNodePoolRequest, global::Google.Container.V1.Operation> __Method_CreateNodePool = new Method<global::Google.Container.V1.CreateNodePoolRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "CreateNodePool",
        __Marshaller_CreateNodePoolRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.DeleteNodePoolRequest, global::Google.Container.V1.Operation> __Method_DeleteNodePool = new Method<global::Google.Container.V1.DeleteNodePoolRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteNodePool",
        __Marshaller_DeleteNodePoolRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.RollbackNodePoolUpgradeRequest, global::Google.Container.V1.Operation> __Method_RollbackNodePoolUpgrade = new Method<global::Google.Container.V1.RollbackNodePoolUpgradeRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "RollbackNodePoolUpgrade",
        __Marshaller_RollbackNodePoolUpgradeRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Container.V1.SetNodePoolManagementRequest, global::Google.Container.V1.Operation> __Method_SetNodePoolManagement = new Method<global::Google.Container.V1.SetNodePoolManagementRequest, global::Google.Container.V1.Operation>(
        MethodType.Unary,
        __ServiceName,
        "SetNodePoolManagement",
        __Marshaller_SetNodePoolManagementRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Container.V1.ClusterServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ClusterManager</summary>
    public abstract class ClusterManagerBase
    {
      /// <summary>
      ///  Lists all clusters owned by a project in either the specified zone or all
      ///  zones.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.ListClustersResponse> ListClusters(global::Google.Container.V1.ListClustersRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the details of a specific cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Cluster> GetCluster(global::Google.Container.V1.GetClusterRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a cluster, consisting of the specified number and type of Google
      ///  Compute Engine instances.
      ///
      ///  By default, the cluster is created in the project's
      ///  [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      ///  One firewall is added for the cluster. After cluster creation,
      ///  the cluster creates routes for each node to allow the containers
      ///  on that node to communicate with all other instances in the
      ///  cluster.
      ///
      ///  Finally, an entry is added to the project's global metadata indicating
      ///  which CIDR range is being used by the cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> CreateCluster(global::Google.Container.V1.CreateClusterRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Updates the settings of a specific cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> UpdateCluster(global::Google.Container.V1.UpdateClusterRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes the cluster, including the Kubernetes endpoint and all worker
      ///  nodes.
      ///
      ///  Firewalls and routes that were configured during cluster creation
      ///  are also deleted.
      ///
      ///  Other Google Compute Engine resources that might be in use by the cluster
      ///  (e.g. load balancer resources) will not be deleted if they weren't present
      ///  at the initial create time.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> DeleteCluster(global::Google.Container.V1.DeleteClusterRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.ListOperationsResponse> ListOperations(global::Google.Container.V1.ListOperationsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the specified operation.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> GetOperation(global::Google.Container.V1.GetOperationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Cancels the specified operation.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperation(global::Google.Container.V1.CancelOperationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns configuration info about the Container Engine service.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.ServerConfig> GetServerConfig(global::Google.Container.V1.GetServerConfigRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists the node pools for a cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.ListNodePoolsResponse> ListNodePools(global::Google.Container.V1.ListNodePoolsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Retrieves the node pool requested.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.NodePool> GetNodePool(global::Google.Container.V1.GetNodePoolRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a node pool for a cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> CreateNodePool(global::Google.Container.V1.CreateNodePoolRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a node pool from a cluster.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> DeleteNodePool(global::Google.Container.V1.DeleteNodePoolRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Roll back the previously Aborted or Failed NodePool upgrade.
      ///  This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> RollbackNodePoolUpgrade(global::Google.Container.V1.RollbackNodePoolUpgradeRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Sets the NodeManagement options for a node pool.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Container.V1.Operation> SetNodePoolManagement(global::Google.Container.V1.SetNodePoolManagementRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ClusterManager</summary>
    public class ClusterManagerClient : ClientBase<ClusterManagerClient>
    {
      /// <summary>Creates a new client for ClusterManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ClusterManagerClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ClusterManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ClusterManagerClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ClusterManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ClusterManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists all clusters owned by a project in either the specified zone or all
      ///  zones.
      /// </summary>
      public virtual global::Google.Container.V1.ListClustersResponse ListClusters(global::Google.Container.V1.ListClustersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListClusters(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all clusters owned by a project in either the specified zone or all
      ///  zones.
      /// </summary>
      public virtual global::Google.Container.V1.ListClustersResponse ListClusters(global::Google.Container.V1.ListClustersRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      ///  Lists all clusters owned by a project in either the specified zone or all
      ///  zones.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ListClustersResponse> ListClustersAsync(global::Google.Container.V1.ListClustersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListClustersAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all clusters owned by a project in either the specified zone or all
      ///  zones.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ListClustersResponse> ListClustersAsync(global::Google.Container.V1.ListClustersRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      ///  Gets the details of a specific cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Cluster GetCluster(global::Google.Container.V1.GetClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCluster(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the details of a specific cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Cluster GetCluster(global::Google.Container.V1.GetClusterRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCluster, null, options, request);
      }
      /// <summary>
      ///  Gets the details of a specific cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Cluster> GetClusterAsync(global::Google.Container.V1.GetClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetClusterAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the details of a specific cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Cluster> GetClusterAsync(global::Google.Container.V1.GetClusterRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCluster, null, options, request);
      }
      /// <summary>
      ///  Creates a cluster, consisting of the specified number and type of Google
      ///  Compute Engine instances.
      ///
      ///  By default, the cluster is created in the project's
      ///  [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      ///  One firewall is added for the cluster. After cluster creation,
      ///  the cluster creates routes for each node to allow the containers
      ///  on that node to communicate with all other instances in the
      ///  cluster.
      ///
      ///  Finally, an entry is added to the project's global metadata indicating
      ///  which CIDR range is being used by the cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation CreateCluster(global::Google.Container.V1.CreateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateCluster(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a cluster, consisting of the specified number and type of Google
      ///  Compute Engine instances.
      ///
      ///  By default, the cluster is created in the project's
      ///  [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      ///  One firewall is added for the cluster. After cluster creation,
      ///  the cluster creates routes for each node to allow the containers
      ///  on that node to communicate with all other instances in the
      ///  cluster.
      ///
      ///  Finally, an entry is added to the project's global metadata indicating
      ///  which CIDR range is being used by the cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation CreateCluster(global::Google.Container.V1.CreateClusterRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCluster, null, options, request);
      }
      /// <summary>
      ///  Creates a cluster, consisting of the specified number and type of Google
      ///  Compute Engine instances.
      ///
      ///  By default, the cluster is created in the project's
      ///  [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      ///  One firewall is added for the cluster. After cluster creation,
      ///  the cluster creates routes for each node to allow the containers
      ///  on that node to communicate with all other instances in the
      ///  cluster.
      ///
      ///  Finally, an entry is added to the project's global metadata indicating
      ///  which CIDR range is being used by the cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> CreateClusterAsync(global::Google.Container.V1.CreateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateClusterAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a cluster, consisting of the specified number and type of Google
      ///  Compute Engine instances.
      ///
      ///  By default, the cluster is created in the project's
      ///  [default network](/compute/docs/networks-and-firewalls#networks).
      ///
      ///  One firewall is added for the cluster. After cluster creation,
      ///  the cluster creates routes for each node to allow the containers
      ///  on that node to communicate with all other instances in the
      ///  cluster.
      ///
      ///  Finally, an entry is added to the project's global metadata indicating
      ///  which CIDR range is being used by the cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> CreateClusterAsync(global::Google.Container.V1.CreateClusterRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCluster, null, options, request);
      }
      /// <summary>
      ///  Updates the settings of a specific cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation UpdateCluster(global::Google.Container.V1.UpdateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateCluster(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the settings of a specific cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation UpdateCluster(global::Google.Container.V1.UpdateClusterRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCluster, null, options, request);
      }
      /// <summary>
      ///  Updates the settings of a specific cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> UpdateClusterAsync(global::Google.Container.V1.UpdateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateClusterAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the settings of a specific cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> UpdateClusterAsync(global::Google.Container.V1.UpdateClusterRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCluster, null, options, request);
      }
      /// <summary>
      ///  Deletes the cluster, including the Kubernetes endpoint and all worker
      ///  nodes.
      ///
      ///  Firewalls and routes that were configured during cluster creation
      ///  are also deleted.
      ///
      ///  Other Google Compute Engine resources that might be in use by the cluster
      ///  (e.g. load balancer resources) will not be deleted if they weren't present
      ///  at the initial create time.
      /// </summary>
      public virtual global::Google.Container.V1.Operation DeleteCluster(global::Google.Container.V1.DeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteCluster(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes the cluster, including the Kubernetes endpoint and all worker
      ///  nodes.
      ///
      ///  Firewalls and routes that were configured during cluster creation
      ///  are also deleted.
      ///
      ///  Other Google Compute Engine resources that might be in use by the cluster
      ///  (e.g. load balancer resources) will not be deleted if they weren't present
      ///  at the initial create time.
      /// </summary>
      public virtual global::Google.Container.V1.Operation DeleteCluster(global::Google.Container.V1.DeleteClusterRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCluster, null, options, request);
      }
      /// <summary>
      ///  Deletes the cluster, including the Kubernetes endpoint and all worker
      ///  nodes.
      ///
      ///  Firewalls and routes that were configured during cluster creation
      ///  are also deleted.
      ///
      ///  Other Google Compute Engine resources that might be in use by the cluster
      ///  (e.g. load balancer resources) will not be deleted if they weren't present
      ///  at the initial create time.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> DeleteClusterAsync(global::Google.Container.V1.DeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteClusterAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes the cluster, including the Kubernetes endpoint and all worker
      ///  nodes.
      ///
      ///  Firewalls and routes that were configured during cluster creation
      ///  are also deleted.
      ///
      ///  Other Google Compute Engine resources that might be in use by the cluster
      ///  (e.g. load balancer resources) will not be deleted if they weren't present
      ///  at the initial create time.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> DeleteClusterAsync(global::Google.Container.V1.DeleteClusterRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCluster, null, options, request);
      }
      /// <summary>
      ///  Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      public virtual global::Google.Container.V1.ListOperationsResponse ListOperations(global::Google.Container.V1.ListOperationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListOperations(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      public virtual global::Google.Container.V1.ListOperationsResponse ListOperations(global::Google.Container.V1.ListOperationsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      ///  Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ListOperationsResponse> ListOperationsAsync(global::Google.Container.V1.ListOperationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListOperationsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all operations in a project in a specific zone or all zones.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ListOperationsResponse> ListOperationsAsync(global::Google.Container.V1.ListOperationsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      ///  Gets the specified operation.
      /// </summary>
      public virtual global::Google.Container.V1.Operation GetOperation(global::Google.Container.V1.GetOperationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOperation(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the specified operation.
      /// </summary>
      public virtual global::Google.Container.V1.Operation GetOperation(global::Google.Container.V1.GetOperationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperation, null, options, request);
      }
      /// <summary>
      ///  Gets the specified operation.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> GetOperationAsync(global::Google.Container.V1.GetOperationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetOperationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the specified operation.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> GetOperationAsync(global::Google.Container.V1.GetOperationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperation, null, options, request);
      }
      /// <summary>
      ///  Cancels the specified operation.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelOperation(global::Google.Container.V1.CancelOperationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CancelOperation(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Cancels the specified operation.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelOperation(global::Google.Container.V1.CancelOperationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelOperation, null, options, request);
      }
      /// <summary>
      ///  Cancels the specified operation.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperationAsync(global::Google.Container.V1.CancelOperationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CancelOperationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Cancels the specified operation.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperationAsync(global::Google.Container.V1.CancelOperationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelOperation, null, options, request);
      }
      /// <summary>
      ///  Returns configuration info about the Container Engine service.
      /// </summary>
      public virtual global::Google.Container.V1.ServerConfig GetServerConfig(global::Google.Container.V1.GetServerConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServerConfig(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns configuration info about the Container Engine service.
      /// </summary>
      public virtual global::Google.Container.V1.ServerConfig GetServerConfig(global::Google.Container.V1.GetServerConfigRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServerConfig, null, options, request);
      }
      /// <summary>
      ///  Returns configuration info about the Container Engine service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ServerConfig> GetServerConfigAsync(global::Google.Container.V1.GetServerConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServerConfigAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns configuration info about the Container Engine service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ServerConfig> GetServerConfigAsync(global::Google.Container.V1.GetServerConfigRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServerConfig, null, options, request);
      }
      /// <summary>
      ///  Lists the node pools for a cluster.
      /// </summary>
      public virtual global::Google.Container.V1.ListNodePoolsResponse ListNodePools(global::Google.Container.V1.ListNodePoolsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNodePools(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the node pools for a cluster.
      /// </summary>
      public virtual global::Google.Container.V1.ListNodePoolsResponse ListNodePools(global::Google.Container.V1.ListNodePoolsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodePools, null, options, request);
      }
      /// <summary>
      ///  Lists the node pools for a cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ListNodePoolsResponse> ListNodePoolsAsync(global::Google.Container.V1.ListNodePoolsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListNodePoolsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the node pools for a cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.ListNodePoolsResponse> ListNodePoolsAsync(global::Google.Container.V1.ListNodePoolsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodePools, null, options, request);
      }
      /// <summary>
      ///  Retrieves the node pool requested.
      /// </summary>
      public virtual global::Google.Container.V1.NodePool GetNodePool(global::Google.Container.V1.GetNodePoolRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNodePool(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Retrieves the node pool requested.
      /// </summary>
      public virtual global::Google.Container.V1.NodePool GetNodePool(global::Google.Container.V1.GetNodePoolRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodePool, null, options, request);
      }
      /// <summary>
      ///  Retrieves the node pool requested.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.NodePool> GetNodePoolAsync(global::Google.Container.V1.GetNodePoolRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNodePoolAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Retrieves the node pool requested.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.NodePool> GetNodePoolAsync(global::Google.Container.V1.GetNodePoolRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodePool, null, options, request);
      }
      /// <summary>
      ///  Creates a node pool for a cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation CreateNodePool(global::Google.Container.V1.CreateNodePoolRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateNodePool(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a node pool for a cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation CreateNodePool(global::Google.Container.V1.CreateNodePoolRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNodePool, null, options, request);
      }
      /// <summary>
      ///  Creates a node pool for a cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> CreateNodePoolAsync(global::Google.Container.V1.CreateNodePoolRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateNodePoolAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a node pool for a cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> CreateNodePoolAsync(global::Google.Container.V1.CreateNodePoolRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNodePool, null, options, request);
      }
      /// <summary>
      ///  Deletes a node pool from a cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation DeleteNodePool(global::Google.Container.V1.DeleteNodePoolRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteNodePool(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a node pool from a cluster.
      /// </summary>
      public virtual global::Google.Container.V1.Operation DeleteNodePool(global::Google.Container.V1.DeleteNodePoolRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNodePool, null, options, request);
      }
      /// <summary>
      ///  Deletes a node pool from a cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> DeleteNodePoolAsync(global::Google.Container.V1.DeleteNodePoolRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteNodePoolAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a node pool from a cluster.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> DeleteNodePoolAsync(global::Google.Container.V1.DeleteNodePoolRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNodePool, null, options, request);
      }
      /// <summary>
      ///  Roll back the previously Aborted or Failed NodePool upgrade.
      ///  This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      public virtual global::Google.Container.V1.Operation RollbackNodePoolUpgrade(global::Google.Container.V1.RollbackNodePoolUpgradeRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackNodePoolUpgrade(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Roll back the previously Aborted or Failed NodePool upgrade.
      ///  This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      public virtual global::Google.Container.V1.Operation RollbackNodePoolUpgrade(global::Google.Container.V1.RollbackNodePoolUpgradeRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackNodePoolUpgrade, null, options, request);
      }
      /// <summary>
      ///  Roll back the previously Aborted or Failed NodePool upgrade.
      ///  This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> RollbackNodePoolUpgradeAsync(global::Google.Container.V1.RollbackNodePoolUpgradeRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RollbackNodePoolUpgradeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Roll back the previously Aborted or Failed NodePool upgrade.
      ///  This will be an no-op if the last upgrade successfully completed.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> RollbackNodePoolUpgradeAsync(global::Google.Container.V1.RollbackNodePoolUpgradeRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackNodePoolUpgrade, null, options, request);
      }
      /// <summary>
      ///  Sets the NodeManagement options for a node pool.
      /// </summary>
      public virtual global::Google.Container.V1.Operation SetNodePoolManagement(global::Google.Container.V1.SetNodePoolManagementRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolManagement(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the NodeManagement options for a node pool.
      /// </summary>
      public virtual global::Google.Container.V1.Operation SetNodePoolManagement(global::Google.Container.V1.SetNodePoolManagementRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetNodePoolManagement, null, options, request);
      }
      /// <summary>
      ///  Sets the NodeManagement options for a node pool.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> SetNodePoolManagementAsync(global::Google.Container.V1.SetNodePoolManagementRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetNodePoolManagementAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the NodeManagement options for a node pool.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Container.V1.Operation> SetNodePoolManagementAsync(global::Google.Container.V1.SetNodePoolManagementRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetNodePoolManagement, null, options, request);
      }
      protected override ClusterManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ClusterManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ClusterManagerBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListClusters, serviceImpl.ListClusters)
          .AddMethod(__Method_GetCluster, serviceImpl.GetCluster)
          .AddMethod(__Method_CreateCluster, serviceImpl.CreateCluster)
          .AddMethod(__Method_UpdateCluster, serviceImpl.UpdateCluster)
          .AddMethod(__Method_DeleteCluster, serviceImpl.DeleteCluster)
          .AddMethod(__Method_ListOperations, serviceImpl.ListOperations)
          .AddMethod(__Method_GetOperation, serviceImpl.GetOperation)
          .AddMethod(__Method_CancelOperation, serviceImpl.CancelOperation)
          .AddMethod(__Method_GetServerConfig, serviceImpl.GetServerConfig)
          .AddMethod(__Method_ListNodePools, serviceImpl.ListNodePools)
          .AddMethod(__Method_GetNodePool, serviceImpl.GetNodePool)
          .AddMethod(__Method_CreateNodePool, serviceImpl.CreateNodePool)
          .AddMethod(__Method_DeleteNodePool, serviceImpl.DeleteNodePool)
          .AddMethod(__Method_RollbackNodePoolUpgrade, serviceImpl.RollbackNodePoolUpgrade)
          .AddMethod(__Method_SetNodePoolManagement, serviceImpl.SetNodePoolManagement).Build();
    }

  }
}
#endregion
