// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/image_annotator.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Cloud.Vision.V1 {
  /// <summary>
  ///  Service that performs Google Cloud Vision API detection tasks, such as face,
  ///  landmark, logo, label, and text detection, over client images, and returns
  ///  detected entities from the images.
  /// </summary>
  public static class ImageAnnotator
  {
    static readonly string __ServiceName = "google.cloud.vision.v1.ImageAnnotator";

    static readonly Marshaller<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest> __Marshaller_BatchAnnotateImagesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> __Marshaller_BatchAnnotateImagesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> __Method_BatchAnnotateImages = new Method<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse>(
        MethodType.Unary,
        __ServiceName,
        "BatchAnnotateImages",
        __Marshaller_BatchAnnotateImagesRequest,
        __Marshaller_BatchAnnotateImagesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ImageAnnotator</summary>
    public abstract class ImageAnnotatorBase
    {
      /// <summary>
      ///  Run image detection and annotation for a batch of images.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> BatchAnnotateImages(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ImageAnnotator</summary>
    public class ImageAnnotatorClient : ClientBase<ImageAnnotatorClient>
    {
      /// <summary>Creates a new client for ImageAnnotator</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ImageAnnotatorClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ImageAnnotator that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ImageAnnotatorClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ImageAnnotatorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ImageAnnotatorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Run image detection and annotation for a batch of images.
      /// </summary>
      public virtual global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse BatchAnnotateImages(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BatchAnnotateImages(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Run image detection and annotation for a batch of images.
      /// </summary>
      public virtual global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse BatchAnnotateImages(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchAnnotateImages, null, options, request);
      }
      /// <summary>
      ///  Run image detection and annotation for a batch of images.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> BatchAnnotateImagesAsync(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BatchAnnotateImagesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Run image detection and annotation for a batch of images.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> BatchAnnotateImagesAsync(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchAnnotateImages, null, options, request);
      }
      protected override ImageAnnotatorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImageAnnotatorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ImageAnnotatorBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_BatchAnnotateImages, serviceImpl.BatchAnnotateImages).Build();
    }

  }
}
#endregion
