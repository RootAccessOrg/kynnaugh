// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api.Servicecontrol.V1 {

  /// <summary>Holder for reflection information generated from google/api/servicecontrol/v1/service_controller.proto</summary>
  public static partial class ServiceControllerReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/servicecontrol/v1/service_controller.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceControllerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVnb29nbGUvYXBpL3NlcnZpY2Vjb250cm9sL3YxL3NlcnZpY2VfY29udHJv",
            "bGxlci5wcm90bxIcZ29vZ2xlLmFwaS5zZXJ2aWNlY29udHJvbC52MRocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxouZ29vZ2xlL2FwaS9zZXJ2aWNl",
            "Y29udHJvbC92MS9jaGVja19lcnJvci5wcm90bxosZ29vZ2xlL2FwaS9zZXJ2",
            "aWNlY29udHJvbC92MS9vcGVyYXRpb24ucHJvdG8aF2dvb2dsZS9ycGMvc3Rh",
            "dHVzLnByb3RvInsKDENoZWNrUmVxdWVzdBIUCgxzZXJ2aWNlX25hbWUYASAB",
            "KAkSOgoJb3BlcmF0aW9uGAIgASgLMicuZ29vZ2xlLmFwaS5zZXJ2aWNlY29u",
            "dHJvbC52MS5PcGVyYXRpb24SGQoRc2VydmljZV9jb25maWdfaWQYBCABKAki",
            "gAEKDUNoZWNrUmVzcG9uc2USFAoMb3BlcmF0aW9uX2lkGAEgASgJEj4KDGNo",
            "ZWNrX2Vycm9ycxgCIAMoCzIoLmdvb2dsZS5hcGkuc2VydmljZWNvbnRyb2wu",
            "djEuQ2hlY2tFcnJvchIZChFzZXJ2aWNlX2NvbmZpZ19pZBgFIAEoCSJ9Cg1S",
            "ZXBvcnRSZXF1ZXN0EhQKDHNlcnZpY2VfbmFtZRgBIAEoCRI7CgpvcGVyYXRp",
            "b25zGAIgAygLMicuZ29vZ2xlLmFwaS5zZXJ2aWNlY29udHJvbC52MS5PcGVy",
            "YXRpb24SGQoRc2VydmljZV9jb25maWdfaWQYAyABKAkixQEKDlJlcG9ydFJl",
            "c3BvbnNlEk8KDXJlcG9ydF9lcnJvcnMYASADKAsyOC5nb29nbGUuYXBpLnNl",
            "cnZpY2Vjb250cm9sLnYxLlJlcG9ydFJlc3BvbnNlLlJlcG9ydEVycm9yEhkK",
            "EXNlcnZpY2VfY29uZmlnX2lkGAIgASgJGkcKC1JlcG9ydEVycm9yEhQKDG9w",
            "ZXJhdGlvbl9pZBgBIAEoCRIiCgZzdGF0dXMYAiABKAsyEi5nb29nbGUucnBj",
            "LlN0YXR1czK5AgoRU2VydmljZUNvbnRyb2xsZXISjgEKBUNoZWNrEiouZ29v",
            "Z2xlLmFwaS5zZXJ2aWNlY29udHJvbC52MS5DaGVja1JlcXVlc3QaKy5nb29n",
            "bGUuYXBpLnNlcnZpY2Vjb250cm9sLnYxLkNoZWNrUmVzcG9uc2UiLILT5JMC",
            "JiIhL3YxL3NlcnZpY2VzL3tzZXJ2aWNlX25hbWV9OmNoZWNrOgEqEpIBCgZS",
            "ZXBvcnQSKy5nb29nbGUuYXBpLnNlcnZpY2Vjb250cm9sLnYxLlJlcG9ydFJl",
            "cXVlc3QaLC5nb29nbGUuYXBpLnNlcnZpY2Vjb250cm9sLnYxLlJlcG9ydFJl",
            "c3BvbnNlIi2C0+STAiciIi92MS9zZXJ2aWNlcy97c2VydmljZV9uYW1lfTpy",
            "ZXBvcnQ6ASpCkgEKIGNvbS5nb29nbGUuYXBpLnNlcnZpY2Vjb250cm9sLnYx",
            "QhZTZXJ2aWNlQ29udHJvbGxlclByb3RvUAFaSmdvb2dsZS5nb2xhbmcub3Jn",
            "L2dlbnByb3RvL2dvb2dsZWFwaXMvYXBpL3NlcnZpY2Vjb250cm9sL3YxO3Nl",
            "cnZpY2Vjb250cm9s+AEBogIER0FTQ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.Servicecontrol.V1.CheckErrorReflection.Descriptor, global::Google.Api.Servicecontrol.V1.OperationReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicecontrol.V1.CheckRequest), global::Google.Api.Servicecontrol.V1.CheckRequest.Parser, new[]{ "ServiceName", "Operation", "ServiceConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicecontrol.V1.CheckResponse), global::Google.Api.Servicecontrol.V1.CheckResponse.Parser, new[]{ "OperationId", "CheckErrors", "ServiceConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicecontrol.V1.ReportRequest), global::Google.Api.Servicecontrol.V1.ReportRequest.Parser, new[]{ "ServiceName", "Operations", "ServiceConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicecontrol.V1.ReportResponse), global::Google.Api.Servicecontrol.V1.ReportResponse.Parser, new[]{ "ReportErrors", "ServiceConfigId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError), global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError.Parser, new[]{ "OperationId", "Status" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request message for the Check method.
  /// </summary>
  public sealed partial class CheckRequest : pb::IMessage<CheckRequest> {
    private static readonly pb::MessageParser<CheckRequest> _parser = new pb::MessageParser<CheckRequest>(() => new CheckRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicecontrol.V1.ServiceControllerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRequest(CheckRequest other) : this() {
      serviceName_ = other.serviceName_;
      Operation = other.operation_ != null ? other.Operation.Clone() : null;
      serviceConfigId_ = other.serviceConfigId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRequest Clone() {
      return new CheckRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The service name as specified in its service configuration. For example,
    ///  `"pubsub.googleapis.com"`.
    ///
    ///  See [google.api.Service][google.api.Service] for the definition of a service name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private global::Google.Api.Servicecontrol.V1.Operation operation_;
    /// <summary>
    ///  The operation to be checked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Servicecontrol.V1.Operation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "service_config_id" field.</summary>
    public const int ServiceConfigIdFieldNumber = 4;
    private string serviceConfigId_ = "";
    /// <summary>
    ///  Specifies which version of service configuration should be used to process
    ///  the request.
    ///
    ///  If unspecified or no matching version can be found, the
    ///  latest one will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceConfigId {
      get { return serviceConfigId_; }
      set {
        serviceConfigId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      if (ServiceConfigId != other.ServiceConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      if (ServiceConfigId.Length != 0) hash ^= ServiceConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (operation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Operation);
      }
      if (ServiceConfigId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      if (ServiceConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.operation_ != null) {
        if (operation_ == null) {
          operation_ = new global::Google.Api.Servicecontrol.V1.Operation();
        }
        Operation.MergeFrom(other.Operation);
      }
      if (other.ServiceConfigId.Length != 0) {
        ServiceConfigId = other.ServiceConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            if (operation_ == null) {
              operation_ = new global::Google.Api.Servicecontrol.V1.Operation();
            }
            input.ReadMessage(operation_);
            break;
          }
          case 34: {
            ServiceConfigId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for the Check method.
  /// </summary>
  public sealed partial class CheckResponse : pb::IMessage<CheckResponse> {
    private static readonly pb::MessageParser<CheckResponse> _parser = new pb::MessageParser<CheckResponse>(() => new CheckResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicecontrol.V1.ServiceControllerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponse(CheckResponse other) : this() {
      operationId_ = other.operationId_;
      checkErrors_ = other.checkErrors_.Clone();
      serviceConfigId_ = other.serviceConfigId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponse Clone() {
      return new CheckResponse(this);
    }

    /// <summary>Field number for the "operation_id" field.</summary>
    public const int OperationIdFieldNumber = 1;
    private string operationId_ = "";
    /// <summary>
    ///  The same operation_id value used in the CheckRequest.
    ///  Used for logging and diagnostics purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationId {
      get { return operationId_; }
      set {
        operationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "check_errors" field.</summary>
    public const int CheckErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Api.Servicecontrol.V1.CheckError> _repeated_checkErrors_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Api.Servicecontrol.V1.CheckError.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.CheckError> checkErrors_ = new pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.CheckError>();
    /// <summary>
    ///  Indicate the decision of the check.
    ///
    ///  If no check errors are present, the service should process the operation.
    ///  Otherwise the service should use the list of errors to determine the
    ///  appropriate action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.CheckError> CheckErrors {
      get { return checkErrors_; }
    }

    /// <summary>Field number for the "service_config_id" field.</summary>
    public const int ServiceConfigIdFieldNumber = 5;
    private string serviceConfigId_ = "";
    /// <summary>
    ///  The actual config id used to process the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceConfigId {
      get { return serviceConfigId_; }
      set {
        serviceConfigId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperationId != other.OperationId) return false;
      if(!checkErrors_.Equals(other.checkErrors_)) return false;
      if (ServiceConfigId != other.ServiceConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperationId.Length != 0) hash ^= OperationId.GetHashCode();
      hash ^= checkErrors_.GetHashCode();
      if (ServiceConfigId.Length != 0) hash ^= ServiceConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OperationId);
      }
      checkErrors_.WriteTo(output, _repeated_checkErrors_codec);
      if (ServiceConfigId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServiceConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationId);
      }
      size += checkErrors_.CalculateSize(_repeated_checkErrors_codec);
      if (ServiceConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckResponse other) {
      if (other == null) {
        return;
      }
      if (other.OperationId.Length != 0) {
        OperationId = other.OperationId;
      }
      checkErrors_.Add(other.checkErrors_);
      if (other.ServiceConfigId.Length != 0) {
        ServiceConfigId = other.ServiceConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OperationId = input.ReadString();
            break;
          }
          case 18: {
            checkErrors_.AddEntriesFrom(input, _repeated_checkErrors_codec);
            break;
          }
          case 42: {
            ServiceConfigId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for the Report method.
  /// </summary>
  public sealed partial class ReportRequest : pb::IMessage<ReportRequest> {
    private static readonly pb::MessageParser<ReportRequest> _parser = new pb::MessageParser<ReportRequest>(() => new ReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicecontrol.V1.ServiceControllerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest(ReportRequest other) : this() {
      serviceName_ = other.serviceName_;
      operations_ = other.operations_.Clone();
      serviceConfigId_ = other.serviceConfigId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest Clone() {
      return new ReportRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The service name as specified in its service configuration. For example,
    ///  `"pubsub.googleapis.com"`.
    ///
    ///  See [google.api.Service][google.api.Service] for the definition of a service name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Api.Servicecontrol.V1.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Api.Servicecontrol.V1.Operation.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.Operation> operations_ = new pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.Operation>();
    /// <summary>
    ///  Operations to be reported.
    ///
    ///  Typically the service should report one operation per request.
    ///  Putting multiple operations into a single request is allowed, but should
    ///  be used only when multiple operations are natually available at the time
    ///  of the report.
    ///
    ///  If multiple operations are in a single request, the total request size
    ///  should be no larger than 1MB. See [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors] for
    ///  partial failure behavior.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "service_config_id" field.</summary>
    public const int ServiceConfigIdFieldNumber = 3;
    private string serviceConfigId_ = "";
    /// <summary>
    ///  Specifies which version of service config should be used to process the
    ///  request.
    ///
    ///  If unspecified or no matching version can be found, the
    ///  latest one will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceConfigId {
      get { return serviceConfigId_; }
      set {
        serviceConfigId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if(!operations_.Equals(other.operations_)) return false;
      if (ServiceConfigId != other.ServiceConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      hash ^= operations_.GetHashCode();
      if (ServiceConfigId.Length != 0) hash ^= ServiceConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      operations_.WriteTo(output, _repeated_operations_codec);
      if (ServiceConfigId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (ServiceConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      operations_.Add(other.operations_);
      if (other.ServiceConfigId.Length != 0) {
        ServiceConfigId = other.ServiceConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 26: {
            ServiceConfigId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for the Report method.
  /// </summary>
  public sealed partial class ReportResponse : pb::IMessage<ReportResponse> {
    private static readonly pb::MessageParser<ReportResponse> _parser = new pb::MessageParser<ReportResponse>(() => new ReportResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicecontrol.V1.ServiceControllerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse(ReportResponse other) : this() {
      reportErrors_ = other.reportErrors_.Clone();
      serviceConfigId_ = other.serviceConfigId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportResponse Clone() {
      return new ReportResponse(this);
    }

    /// <summary>Field number for the "report_errors" field.</summary>
    public const int ReportErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError> _repeated_reportErrors_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError> reportErrors_ = new pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError>();
    /// <summary>
    ///  Partial failures, one for each `Operation` in the request that failed
    ///  processing. There are three possible combinations of the RPC status:
    ///
    ///  1. The combination of a successful RPC status and an empty `report_errors`
    ///     list indicates a complete success where all `Operations` in the
    ///     request are processed successfully.
    ///  2. The combination of a successful RPC status and a non-empty
    ///     `report_errors` list indicates a partial success where some
    ///     `Operations` in the request succeeded. Each
    ///     `Operation` that failed processing has a corresponding item
    ///     in this list.
    ///  3. A failed RPC status indicates a complete failure where none of the
    ///     `Operations` in the request succeeded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.ReportResponse.Types.ReportError> ReportErrors {
      get { return reportErrors_; }
    }

    /// <summary>Field number for the "service_config_id" field.</summary>
    public const int ServiceConfigIdFieldNumber = 2;
    private string serviceConfigId_ = "";
    /// <summary>
    ///  The actual config id used to process the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceConfigId {
      get { return serviceConfigId_; }
      set {
        serviceConfigId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reportErrors_.Equals(other.reportErrors_)) return false;
      if (ServiceConfigId != other.ServiceConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reportErrors_.GetHashCode();
      if (ServiceConfigId.Length != 0) hash ^= ServiceConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reportErrors_.WriteTo(output, _repeated_reportErrors_codec);
      if (ServiceConfigId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reportErrors_.CalculateSize(_repeated_reportErrors_codec);
      if (ServiceConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportResponse other) {
      if (other == null) {
        return;
      }
      reportErrors_.Add(other.reportErrors_);
      if (other.ServiceConfigId.Length != 0) {
        ServiceConfigId = other.ServiceConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reportErrors_.AddEntriesFrom(input, _repeated_reportErrors_codec);
            break;
          }
          case 18: {
            ServiceConfigId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReportResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Represents the processing error of one `Operation` in the request.
      /// </summary>
      public sealed partial class ReportError : pb::IMessage<ReportError> {
        private static readonly pb::MessageParser<ReportError> _parser = new pb::MessageParser<ReportError>(() => new ReportError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReportError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Api.Servicecontrol.V1.ReportResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportError() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportError(ReportError other) : this() {
          operationId_ = other.operationId_;
          Status = other.status_ != null ? other.Status.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReportError Clone() {
          return new ReportError(this);
        }

        /// <summary>Field number for the "operation_id" field.</summary>
        public const int OperationIdFieldNumber = 1;
        private string operationId_ = "";
        /// <summary>
        ///  The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OperationId {
          get { return operationId_; }
          set {
            operationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 2;
        private global::Google.Rpc.Status status_;
        /// <summary>
        ///  Details of the error when processing the `Operation`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Rpc.Status Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReportError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReportError other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OperationId != other.OperationId) return false;
          if (!object.Equals(Status, other.Status)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OperationId.Length != 0) hash ^= OperationId.GetHashCode();
          if (status_ != null) hash ^= Status.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OperationId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(OperationId);
          }
          if (status_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Status);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OperationId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationId);
          }
          if (status_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReportError other) {
          if (other == null) {
            return;
          }
          if (other.OperationId.Length != 0) {
            OperationId = other.OperationId;
          }
          if (other.status_ != null) {
            if (status_ == null) {
              status_ = new global::Google.Rpc.Status();
            }
            Status.MergeFrom(other.Status);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                OperationId = input.ReadString();
                break;
              }
              case 18: {
                if (status_ == null) {
                  status_ = new global::Google.Rpc.Status();
                }
                input.ReadMessage(status_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
