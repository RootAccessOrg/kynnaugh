// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1beta2/pubsub.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Pubsub.V1Beta2 {
  /// <summary>
  ///  The service that an application uses to manipulate subscriptions and to
  ///  consume messages from a subscription via the Pull method.
  /// </summary>
  public static class Subscriber
  {
    static readonly string __ServiceName = "google.pubsub.v1beta2.Subscriber";

    static readonly Marshaller<global::Google.Pubsub.V1Beta2.Subscription> __Marshaller_Subscription = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.Subscription.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.GetSubscriptionRequest> __Marshaller_GetSubscriptionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.GetSubscriptionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest> __Marshaller_ListSubscriptionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse> __Marshaller_ListSubscriptionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest> __Marshaller_DeleteSubscriptionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest> __Marshaller_ModifyAckDeadlineRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.AcknowledgeRequest> __Marshaller_AcknowledgeRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.AcknowledgeRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.PullRequest> __Marshaller_PullRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.PullRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.PullResponse> __Marshaller_PullResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.PullResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest> __Marshaller_ModifyPushConfigRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Pubsub.V1Beta2.Subscription, global::Google.Pubsub.V1Beta2.Subscription> __Method_CreateSubscription = new Method<global::Google.Pubsub.V1Beta2.Subscription, global::Google.Pubsub.V1Beta2.Subscription>(
        MethodType.Unary,
        __ServiceName,
        "CreateSubscription",
        __Marshaller_Subscription,
        __Marshaller_Subscription);

    static readonly Method<global::Google.Pubsub.V1Beta2.GetSubscriptionRequest, global::Google.Pubsub.V1Beta2.Subscription> __Method_GetSubscription = new Method<global::Google.Pubsub.V1Beta2.GetSubscriptionRequest, global::Google.Pubsub.V1Beta2.Subscription>(
        MethodType.Unary,
        __ServiceName,
        "GetSubscription",
        __Marshaller_GetSubscriptionRequest,
        __Marshaller_Subscription);

    static readonly Method<global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest, global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse> __Method_ListSubscriptions = new Method<global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest, global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListSubscriptions",
        __Marshaller_ListSubscriptionsRequest,
        __Marshaller_ListSubscriptionsResponse);

    static readonly Method<global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSubscription = new Method<global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteSubscription",
        __Marshaller_DeleteSubscriptionRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ModifyAckDeadline = new Method<global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "ModifyAckDeadline",
        __Marshaller_ModifyAckDeadlineRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Pubsub.V1Beta2.AcknowledgeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Acknowledge = new Method<global::Google.Pubsub.V1Beta2.AcknowledgeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "Acknowledge",
        __Marshaller_AcknowledgeRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Pubsub.V1Beta2.PullRequest, global::Google.Pubsub.V1Beta2.PullResponse> __Method_Pull = new Method<global::Google.Pubsub.V1Beta2.PullRequest, global::Google.Pubsub.V1Beta2.PullResponse>(
        MethodType.Unary,
        __ServiceName,
        "Pull",
        __Marshaller_PullRequest,
        __Marshaller_PullResponse);

    static readonly Method<global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ModifyPushConfig = new Method<global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "ModifyPushConfig",
        __Marshaller_ModifyPushConfigRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Pubsub.V1Beta2.PubsubReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Subscriber</summary>
    public abstract class SubscriberBase
    {
      /// <summary>
      ///  Creates a subscription to a given topic for a given subscriber.
      ///  If the subscription already exists, returns ALREADY_EXISTS.
      ///  If the corresponding topic doesn't exist, returns NOT_FOUND.
      ///
      ///  If the name is not provided in the request, the server will assign a random
      ///  name for this subscription on the same project as the topic.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.Subscription> CreateSubscription(global::Google.Pubsub.V1Beta2.Subscription request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the configuration details of a subscription.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.Subscription> GetSubscription(global::Google.Pubsub.V1Beta2.GetSubscriptionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists matching subscriptions.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse> ListSubscriptions(global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes an existing subscription. All pending messages in the subscription
      ///  are immediately dropped. Calls to Pull after deletion will return
      ///  NOT_FOUND. After a subscription is deleted, a new one may be created with
      ///  the same name, but the new one has no association with the old
      ///  subscription, or its topic unless the same topic is specified.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscription(global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Modifies the ack deadline for a specific message. This method is useful to
      ///  indicate that more time is needed to process a message by the subscriber,
      ///  or to make the message available for redelivery if the processing was
      ///  interrupted.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ModifyAckDeadline(global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Acknowledges the messages associated with the ack tokens in the
      ///  AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
      ///  from the subscription.
      ///
      ///  Acknowledging a message whose ack deadline has expired may succeed,
      ///  but such a message may be redelivered later. Acknowledging a message more
      ///  than once will not result in an error.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Acknowledge(global::Google.Pubsub.V1Beta2.AcknowledgeRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Pulls messages from the server. Returns an empty list if there are no
      ///  messages available in the backlog. The server may return UNAVAILABLE if
      ///  there are too many concurrent pull requests pending for the given
      ///  subscription.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.PullResponse> Pull(global::Google.Pubsub.V1Beta2.PullRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Modifies the PushConfig for a specified subscription.
      ///
      ///  This may be used to change a push subscription to a pull one (signified
      ///  by an empty PushConfig) or vice versa, or change the endpoint URL and other
      ///  attributes of a push subscription. Messages will accumulate for
      ///  delivery continuously through the call regardless of changes to the
      ///  PushConfig.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ModifyPushConfig(global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Subscriber</summary>
    public class SubscriberClient : ClientBase<SubscriberClient>
    {
      /// <summary>Creates a new client for Subscriber</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SubscriberClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Subscriber that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SubscriberClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SubscriberClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SubscriberClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Creates a subscription to a given topic for a given subscriber.
      ///  If the subscription already exists, returns ALREADY_EXISTS.
      ///  If the corresponding topic doesn't exist, returns NOT_FOUND.
      ///
      ///  If the name is not provided in the request, the server will assign a random
      ///  name for this subscription on the same project as the topic.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Subscription CreateSubscription(global::Google.Pubsub.V1Beta2.Subscription request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSubscription(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a subscription to a given topic for a given subscriber.
      ///  If the subscription already exists, returns ALREADY_EXISTS.
      ///  If the corresponding topic doesn't exist, returns NOT_FOUND.
      ///
      ///  If the name is not provided in the request, the server will assign a random
      ///  name for this subscription on the same project as the topic.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Subscription CreateSubscription(global::Google.Pubsub.V1Beta2.Subscription request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSubscription, null, options, request);
      }
      /// <summary>
      ///  Creates a subscription to a given topic for a given subscriber.
      ///  If the subscription already exists, returns ALREADY_EXISTS.
      ///  If the corresponding topic doesn't exist, returns NOT_FOUND.
      ///
      ///  If the name is not provided in the request, the server will assign a random
      ///  name for this subscription on the same project as the topic.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Subscription> CreateSubscriptionAsync(global::Google.Pubsub.V1Beta2.Subscription request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSubscriptionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a subscription to a given topic for a given subscriber.
      ///  If the subscription already exists, returns ALREADY_EXISTS.
      ///  If the corresponding topic doesn't exist, returns NOT_FOUND.
      ///
      ///  If the name is not provided in the request, the server will assign a random
      ///  name for this subscription on the same project as the topic.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Subscription> CreateSubscriptionAsync(global::Google.Pubsub.V1Beta2.Subscription request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSubscription, null, options, request);
      }
      /// <summary>
      ///  Gets the configuration details of a subscription.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Subscription GetSubscription(global::Google.Pubsub.V1Beta2.GetSubscriptionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSubscription(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the configuration details of a subscription.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Subscription GetSubscription(global::Google.Pubsub.V1Beta2.GetSubscriptionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      ///  Gets the configuration details of a subscription.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Subscription> GetSubscriptionAsync(global::Google.Pubsub.V1Beta2.GetSubscriptionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSubscriptionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the configuration details of a subscription.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Subscription> GetSubscriptionAsync(global::Google.Pubsub.V1Beta2.GetSubscriptionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      ///  Lists matching subscriptions.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse ListSubscriptions(global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSubscriptions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists matching subscriptions.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse ListSubscriptions(global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      ///  Lists matching subscriptions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListSubscriptionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists matching subscriptions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Pubsub.V1Beta2.ListSubscriptionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      ///  Deletes an existing subscription. All pending messages in the subscription
      ///  are immediately dropped. Calls to Pull after deletion will return
      ///  NOT_FOUND. After a subscription is deleted, a new one may be created with
      ///  the same name, but the new one has no association with the old
      ///  subscription, or its topic unless the same topic is specified.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSubscription(global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSubscription(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes an existing subscription. All pending messages in the subscription
      ///  are immediately dropped. Calls to Pull after deletion will return
      ///  NOT_FOUND. After a subscription is deleted, a new one may be created with
      ///  the same name, but the new one has no association with the old
      ///  subscription, or its topic unless the same topic is specified.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSubscription(global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      ///  Deletes an existing subscription. All pending messages in the subscription
      ///  are immediately dropped. Calls to Pull after deletion will return
      ///  NOT_FOUND. After a subscription is deleted, a new one may be created with
      ///  the same name, but the new one has no association with the old
      ///  subscription, or its topic unless the same topic is specified.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscriptionAsync(global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSubscriptionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes an existing subscription. All pending messages in the subscription
      ///  are immediately dropped. Calls to Pull after deletion will return
      ///  NOT_FOUND. After a subscription is deleted, a new one may be created with
      ///  the same name, but the new one has no association with the old
      ///  subscription, or its topic unless the same topic is specified.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSubscriptionAsync(global::Google.Pubsub.V1Beta2.DeleteSubscriptionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      ///  Modifies the ack deadline for a specific message. This method is useful to
      ///  indicate that more time is needed to process a message by the subscriber,
      ///  or to make the message available for redelivery if the processing was
      ///  interrupted.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyAckDeadline(global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyAckDeadline(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Modifies the ack deadline for a specific message. This method is useful to
      ///  indicate that more time is needed to process a message by the subscriber,
      ///  or to make the message available for redelivery if the processing was
      ///  interrupted.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyAckDeadline(global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyAckDeadline, null, options, request);
      }
      /// <summary>
      ///  Modifies the ack deadline for a specific message. This method is useful to
      ///  indicate that more time is needed to process a message by the subscriber,
      ///  or to make the message available for redelivery if the processing was
      ///  interrupted.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyAckDeadlineAsync(global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyAckDeadlineAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Modifies the ack deadline for a specific message. This method is useful to
      ///  indicate that more time is needed to process a message by the subscriber,
      ///  or to make the message available for redelivery if the processing was
      ///  interrupted.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyAckDeadlineAsync(global::Google.Pubsub.V1Beta2.ModifyAckDeadlineRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyAckDeadline, null, options, request);
      }
      /// <summary>
      ///  Acknowledges the messages associated with the ack tokens in the
      ///  AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
      ///  from the subscription.
      ///
      ///  Acknowledging a message whose ack deadline has expired may succeed,
      ///  but such a message may be redelivered later. Acknowledging a message more
      ///  than once will not result in an error.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Acknowledge(global::Google.Pubsub.V1Beta2.AcknowledgeRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Acknowledge(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Acknowledges the messages associated with the ack tokens in the
      ///  AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
      ///  from the subscription.
      ///
      ///  Acknowledging a message whose ack deadline has expired may succeed,
      ///  but such a message may be redelivered later. Acknowledging a message more
      ///  than once will not result in an error.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Acknowledge(global::Google.Pubsub.V1Beta2.AcknowledgeRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Acknowledge, null, options, request);
      }
      /// <summary>
      ///  Acknowledges the messages associated with the ack tokens in the
      ///  AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
      ///  from the subscription.
      ///
      ///  Acknowledging a message whose ack deadline has expired may succeed,
      ///  but such a message may be redelivered later. Acknowledging a message more
      ///  than once will not result in an error.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeAsync(global::Google.Pubsub.V1Beta2.AcknowledgeRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AcknowledgeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Acknowledges the messages associated with the ack tokens in the
      ///  AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
      ///  from the subscription.
      ///
      ///  Acknowledging a message whose ack deadline has expired may succeed,
      ///  but such a message may be redelivered later. Acknowledging a message more
      ///  than once will not result in an error.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AcknowledgeAsync(global::Google.Pubsub.V1Beta2.AcknowledgeRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Acknowledge, null, options, request);
      }
      /// <summary>
      ///  Pulls messages from the server. Returns an empty list if there are no
      ///  messages available in the backlog. The server may return UNAVAILABLE if
      ///  there are too many concurrent pull requests pending for the given
      ///  subscription.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.PullResponse Pull(global::Google.Pubsub.V1Beta2.PullRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Pull(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Pulls messages from the server. Returns an empty list if there are no
      ///  messages available in the backlog. The server may return UNAVAILABLE if
      ///  there are too many concurrent pull requests pending for the given
      ///  subscription.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.PullResponse Pull(global::Google.Pubsub.V1Beta2.PullRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Pull, null, options, request);
      }
      /// <summary>
      ///  Pulls messages from the server. Returns an empty list if there are no
      ///  messages available in the backlog. The server may return UNAVAILABLE if
      ///  there are too many concurrent pull requests pending for the given
      ///  subscription.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.PullResponse> PullAsync(global::Google.Pubsub.V1Beta2.PullRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PullAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Pulls messages from the server. Returns an empty list if there are no
      ///  messages available in the backlog. The server may return UNAVAILABLE if
      ///  there are too many concurrent pull requests pending for the given
      ///  subscription.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.PullResponse> PullAsync(global::Google.Pubsub.V1Beta2.PullRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Pull, null, options, request);
      }
      /// <summary>
      ///  Modifies the PushConfig for a specified subscription.
      ///
      ///  This may be used to change a push subscription to a pull one (signified
      ///  by an empty PushConfig) or vice versa, or change the endpoint URL and other
      ///  attributes of a push subscription. Messages will accumulate for
      ///  delivery continuously through the call regardless of changes to the
      ///  PushConfig.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyPushConfig(global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyPushConfig(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Modifies the PushConfig for a specified subscription.
      ///
      ///  This may be used to change a push subscription to a pull one (signified
      ///  by an empty PushConfig) or vice versa, or change the endpoint URL and other
      ///  attributes of a push subscription. Messages will accumulate for
      ///  delivery continuously through the call regardless of changes to the
      ///  PushConfig.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ModifyPushConfig(global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyPushConfig, null, options, request);
      }
      /// <summary>
      ///  Modifies the PushConfig for a specified subscription.
      ///
      ///  This may be used to change a push subscription to a pull one (signified
      ///  by an empty PushConfig) or vice versa, or change the endpoint URL and other
      ///  attributes of a push subscription. Messages will accumulate for
      ///  delivery continuously through the call regardless of changes to the
      ///  PushConfig.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyPushConfigAsync(global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ModifyPushConfigAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Modifies the PushConfig for a specified subscription.
      ///
      ///  This may be used to change a push subscription to a pull one (signified
      ///  by an empty PushConfig) or vice versa, or change the endpoint URL and other
      ///  attributes of a push subscription. Messages will accumulate for
      ///  delivery continuously through the call regardless of changes to the
      ///  PushConfig.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ModifyPushConfigAsync(global::Google.Pubsub.V1Beta2.ModifyPushConfigRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyPushConfig, null, options, request);
      }
      protected override SubscriberClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubscriberClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SubscriberBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSubscription, serviceImpl.CreateSubscription)
          .AddMethod(__Method_GetSubscription, serviceImpl.GetSubscription)
          .AddMethod(__Method_ListSubscriptions, serviceImpl.ListSubscriptions)
          .AddMethod(__Method_DeleteSubscription, serviceImpl.DeleteSubscription)
          .AddMethod(__Method_ModifyAckDeadline, serviceImpl.ModifyAckDeadline)
          .AddMethod(__Method_Acknowledge, serviceImpl.Acknowledge)
          .AddMethod(__Method_Pull, serviceImpl.Pull)
          .AddMethod(__Method_ModifyPushConfig, serviceImpl.ModifyPushConfig).Build();
    }

  }
  /// <summary>
  ///  The service that an application uses to manipulate topics, and to send
  ///  messages to a topic.
  /// </summary>
  public static class Publisher
  {
    static readonly string __ServiceName = "google.pubsub.v1beta2.Publisher";

    static readonly Marshaller<global::Google.Pubsub.V1Beta2.Topic> __Marshaller_Topic = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.Topic.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.PublishRequest> __Marshaller_PublishRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.PublishRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.PublishResponse> __Marshaller_PublishResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.PublishResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.GetTopicRequest> __Marshaller_GetTopicRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.GetTopicRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ListTopicsRequest> __Marshaller_ListTopicsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ListTopicsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ListTopicsResponse> __Marshaller_ListTopicsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ListTopicsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest> __Marshaller_ListTopicSubscriptionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse> __Marshaller_ListTopicSubscriptionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Pubsub.V1Beta2.DeleteTopicRequest> __Marshaller_DeleteTopicRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Pubsub.V1Beta2.DeleteTopicRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly Method<global::Google.Pubsub.V1Beta2.Topic, global::Google.Pubsub.V1Beta2.Topic> __Method_CreateTopic = new Method<global::Google.Pubsub.V1Beta2.Topic, global::Google.Pubsub.V1Beta2.Topic>(
        MethodType.Unary,
        __ServiceName,
        "CreateTopic",
        __Marshaller_Topic,
        __Marshaller_Topic);

    static readonly Method<global::Google.Pubsub.V1Beta2.PublishRequest, global::Google.Pubsub.V1Beta2.PublishResponse> __Method_Publish = new Method<global::Google.Pubsub.V1Beta2.PublishRequest, global::Google.Pubsub.V1Beta2.PublishResponse>(
        MethodType.Unary,
        __ServiceName,
        "Publish",
        __Marshaller_PublishRequest,
        __Marshaller_PublishResponse);

    static readonly Method<global::Google.Pubsub.V1Beta2.GetTopicRequest, global::Google.Pubsub.V1Beta2.Topic> __Method_GetTopic = new Method<global::Google.Pubsub.V1Beta2.GetTopicRequest, global::Google.Pubsub.V1Beta2.Topic>(
        MethodType.Unary,
        __ServiceName,
        "GetTopic",
        __Marshaller_GetTopicRequest,
        __Marshaller_Topic);

    static readonly Method<global::Google.Pubsub.V1Beta2.ListTopicsRequest, global::Google.Pubsub.V1Beta2.ListTopicsResponse> __Method_ListTopics = new Method<global::Google.Pubsub.V1Beta2.ListTopicsRequest, global::Google.Pubsub.V1Beta2.ListTopicsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListTopics",
        __Marshaller_ListTopicsRequest,
        __Marshaller_ListTopicsResponse);

    static readonly Method<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest, global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse> __Method_ListTopicSubscriptions = new Method<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest, global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListTopicSubscriptions",
        __Marshaller_ListTopicSubscriptionsRequest,
        __Marshaller_ListTopicSubscriptionsResponse);

    static readonly Method<global::Google.Pubsub.V1Beta2.DeleteTopicRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTopic = new Method<global::Google.Pubsub.V1Beta2.DeleteTopicRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteTopic",
        __Marshaller_DeleteTopicRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Pubsub.V1Beta2.PubsubReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Publisher</summary>
    public abstract class PublisherBase
    {
      /// <summary>
      ///  Creates the given topic with the given name.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.Topic> CreateTopic(global::Google.Pubsub.V1Beta2.Topic request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
      ///  not exist.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.PublishResponse> Publish(global::Google.Pubsub.V1Beta2.PublishRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the configuration of a topic.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.Topic> GetTopic(global::Google.Pubsub.V1Beta2.GetTopicRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists matching topics.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.ListTopicsResponse> ListTopics(global::Google.Pubsub.V1Beta2.ListTopicsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists the name of the subscriptions for this topic.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse> ListTopicSubscriptions(global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes the topic with the given name. Returns NOT_FOUND if the topic does
      ///  not exist. After a topic is deleted, a new topic may be created with the
      ///  same name; this is an entirely new topic with none of the old
      ///  configuration or subscriptions. Existing subscriptions to this topic are
      ///  not deleted.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTopic(global::Google.Pubsub.V1Beta2.DeleteTopicRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Publisher</summary>
    public class PublisherClient : ClientBase<PublisherClient>
    {
      /// <summary>Creates a new client for Publisher</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PublisherClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Publisher that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PublisherClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PublisherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PublisherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Creates the given topic with the given name.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Topic CreateTopic(global::Google.Pubsub.V1Beta2.Topic request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTopic(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates the given topic with the given name.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Topic CreateTopic(global::Google.Pubsub.V1Beta2.Topic request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTopic, null, options, request);
      }
      /// <summary>
      ///  Creates the given topic with the given name.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Topic> CreateTopicAsync(global::Google.Pubsub.V1Beta2.Topic request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateTopicAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates the given topic with the given name.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Topic> CreateTopicAsync(global::Google.Pubsub.V1Beta2.Topic request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTopic, null, options, request);
      }
      /// <summary>
      ///  Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
      ///  not exist.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.PublishResponse Publish(global::Google.Pubsub.V1Beta2.PublishRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Publish(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
      ///  not exist.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.PublishResponse Publish(global::Google.Pubsub.V1Beta2.PublishRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      ///  Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
      ///  not exist.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.PublishResponse> PublishAsync(global::Google.Pubsub.V1Beta2.PublishRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PublishAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
      ///  not exist.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.PublishResponse> PublishAsync(global::Google.Pubsub.V1Beta2.PublishRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      ///  Gets the configuration of a topic.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Topic GetTopic(global::Google.Pubsub.V1Beta2.GetTopicRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTopic(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the configuration of a topic.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.Topic GetTopic(global::Google.Pubsub.V1Beta2.GetTopicRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTopic, null, options, request);
      }
      /// <summary>
      ///  Gets the configuration of a topic.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Topic> GetTopicAsync(global::Google.Pubsub.V1Beta2.GetTopicRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTopicAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the configuration of a topic.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.Topic> GetTopicAsync(global::Google.Pubsub.V1Beta2.GetTopicRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTopic, null, options, request);
      }
      /// <summary>
      ///  Lists matching topics.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.ListTopicsResponse ListTopics(global::Google.Pubsub.V1Beta2.ListTopicsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopics(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists matching topics.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.ListTopicsResponse ListTopics(global::Google.Pubsub.V1Beta2.ListTopicsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTopics, null, options, request);
      }
      /// <summary>
      ///  Lists matching topics.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.ListTopicsResponse> ListTopicsAsync(global::Google.Pubsub.V1Beta2.ListTopicsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopicsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists matching topics.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.ListTopicsResponse> ListTopicsAsync(global::Google.Pubsub.V1Beta2.ListTopicsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTopics, null, options, request);
      }
      /// <summary>
      ///  Lists the name of the subscriptions for this topic.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse ListTopicSubscriptions(global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopicSubscriptions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the name of the subscriptions for this topic.
      /// </summary>
      public virtual global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse ListTopicSubscriptions(global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTopicSubscriptions, null, options, request);
      }
      /// <summary>
      ///  Lists the name of the subscriptions for this topic.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse> ListTopicSubscriptionsAsync(global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListTopicSubscriptionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the name of the subscriptions for this topic.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsResponse> ListTopicSubscriptionsAsync(global::Google.Pubsub.V1Beta2.ListTopicSubscriptionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTopicSubscriptions, null, options, request);
      }
      /// <summary>
      ///  Deletes the topic with the given name. Returns NOT_FOUND if the topic does
      ///  not exist. After a topic is deleted, a new topic may be created with the
      ///  same name; this is an entirely new topic with none of the old
      ///  configuration or subscriptions. Existing subscriptions to this topic are
      ///  not deleted.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTopic(global::Google.Pubsub.V1Beta2.DeleteTopicRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTopic(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes the topic with the given name. Returns NOT_FOUND if the topic does
      ///  not exist. After a topic is deleted, a new topic may be created with the
      ///  same name; this is an entirely new topic with none of the old
      ///  configuration or subscriptions. Existing subscriptions to this topic are
      ///  not deleted.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTopic(global::Google.Pubsub.V1Beta2.DeleteTopicRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTopic, null, options, request);
      }
      /// <summary>
      ///  Deletes the topic with the given name. Returns NOT_FOUND if the topic does
      ///  not exist. After a topic is deleted, a new topic may be created with the
      ///  same name; this is an entirely new topic with none of the old
      ///  configuration or subscriptions. Existing subscriptions to this topic are
      ///  not deleted.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTopicAsync(global::Google.Pubsub.V1Beta2.DeleteTopicRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteTopicAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes the topic with the given name. Returns NOT_FOUND if the topic does
      ///  not exist. After a topic is deleted, a new topic may be created with the
      ///  same name; this is an entirely new topic with none of the old
      ///  configuration or subscriptions. Existing subscriptions to this topic are
      ///  not deleted.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTopicAsync(global::Google.Pubsub.V1Beta2.DeleteTopicRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTopic, null, options, request);
      }
      protected override PublisherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PublisherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(PublisherBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTopic, serviceImpl.CreateTopic)
          .AddMethod(__Method_Publish, serviceImpl.Publish)
          .AddMethod(__Method_GetTopic, serviceImpl.GetTopic)
          .AddMethod(__Method_ListTopics, serviceImpl.ListTopics)
          .AddMethod(__Method_ListTopicSubscriptions, serviceImpl.ListTopicSubscriptions)
          .AddMethod(__Method_DeleteTopic, serviceImpl.DeleteTopic).Build();
    }

  }
}
#endregion
