// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/functions/v1beta2/functions.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Functions.V1Beta2 {

  /// <summary>Holder for reflection information generated from google/cloud/functions/v1beta2/functions.proto</summary>
  public static partial class FunctionsReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/functions/v1beta2/functions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FunctionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5nb29nbGUvY2xvdWQvZnVuY3Rpb25zL3YxYmV0YTIvZnVuY3Rpb25zLnBy",
            "b3RvEh5nb29nbGUuY2xvdWQuZnVuY3Rpb25zLnYxYmV0YTIaHGdvb2dsZS9h",
            "cGkvYW5ub3RhdGlvbnMucHJvdG8aFWdvb2dsZS9hcGkvYXV0aC5wcm90bxov",
            "Z29vZ2xlL2Nsb3VkL2Z1bmN0aW9ucy92MWJldGEyL29wZXJhdGlvbnMucHJv",
            "dG8aI2dvb2dsZS9sb25ncnVubmluZy9vcGVyYXRpb25zLnByb3RvGh5nb29n",
            "bGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8izAQKDUNsb3VkRnVuY3Rpb24S",
            "DAoEbmFtZRgBIAEoCRIRCgdnY3NfdXJsGAIgASgJSAASHAoSc291cmNlX2Fy",
            "Y2hpdmVfdXJsGA4gASgJSAASTQoRc291cmNlX3JlcG9zaXRvcnkYAyABKAsy",
            "MC5nb29nbGUuY2xvdWQuZnVuY3Rpb25zLnYxYmV0YTIuU291cmNlUmVwb3Np",
            "dG9yeUgAEhgKDnB1YnN1Yl90cmlnZ2VyGAQgASgJSAESFQoLZ2NzX3RyaWdn",
            "ZXIYBSABKAlIARJFCg1odHRwc190cmlnZ2VyGAYgASgLMiwuZ29vZ2xlLmNs",
            "b3VkLmZ1bmN0aW9ucy52MWJldGEyLkhUVFBTVHJpZ2dlckgBEkUKDWV2ZW50",
            "X3RyaWdnZXIYDCABKAsyLC5nb29nbGUuY2xvdWQuZnVuY3Rpb25zLnYxYmV0",
            "YTIuRXZlbnRUcmlnZ2VySAESQwoGc3RhdHVzGAcgASgOMjMuZ29vZ2xlLmNs",
            "b3VkLmZ1bmN0aW9ucy52MWJldGEyLkNsb3VkRnVuY3Rpb25TdGF0dXMSGAoQ",
            "bGF0ZXN0X29wZXJhdGlvbhgIIAEoCRITCgtlbnRyeV9wb2ludBgJIAEoCRIq",
            "Cgd0aW1lb3V0GAogASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEhsK",
            "E2F2YWlsYWJsZV9tZW1vcnlfbWIYCyABKAUSFwoPc2VydmljZV9hY2NvdW50",
            "GA0gASgJQg0KC3NvdXJjZV9jb2RlQgkKB3RyaWdnZXIiGwoMSFRUUFNUcmln",
            "Z2VyEgsKA3VybBgBIAEoCSJCCgxFdmVudFRyaWdnZXISEgoKZXZlbnRfdHlw",
            "ZRgBIAEoCRIQCghyZXNvdXJjZRgCIAEoCRIMCgRwYXRoGAMgASgJIpoBChBT",
            "b3VyY2VSZXBvc2l0b3J5EhYKDnJlcG9zaXRvcnlfdXJsGAEgASgJEhMKC3Nv",
            "dXJjZV9wYXRoGAIgASgJEhAKBmJyYW5jaBgDIAEoCUgAEg0KA3RhZxgEIAEo",
            "CUgAEhIKCHJldmlzaW9uGAUgASgJSAASGQoRZGVwbG95ZWRfcmV2aXNpb24Y",
            "BiABKAlCCQoHdmVyc2lvbiJqChVDcmVhdGVGdW5jdGlvblJlcXVlc3QSEAoI",
            "bG9jYXRpb24YASABKAkSPwoIZnVuY3Rpb24YAiABKAsyLS5nb29nbGUuY2xv",
            "dWQuZnVuY3Rpb25zLnYxYmV0YTIuQ2xvdWRGdW5jdGlvbiJmChVVcGRhdGVG",
            "dW5jdGlvblJlcXVlc3QSDAoEbmFtZRgBIAEoCRI/CghmdW5jdGlvbhgCIAEo",
            "CzItLmdvb2dsZS5jbG91ZC5mdW5jdGlvbnMudjFiZXRhMi5DbG91ZEZ1bmN0",
            "aW9uIiIKEkdldEZ1bmN0aW9uUmVxdWVzdBIMCgRuYW1lGAEgASgJIk8KFExp",
            "c3RGdW5jdGlvbnNSZXF1ZXN0EhAKCGxvY2F0aW9uGAEgASgJEhEKCXBhZ2Vf",
            "c2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJInIKFUxpc3RGdW5jdGlv",
            "bnNSZXNwb25zZRJACglmdW5jdGlvbnMYASADKAsyLS5nb29nbGUuY2xvdWQu",
            "ZnVuY3Rpb25zLnYxYmV0YTIuQ2xvdWRGdW5jdGlvbhIXCg9uZXh0X3BhZ2Vf",
            "dG9rZW4YAiABKAkiJQoVRGVsZXRlRnVuY3Rpb25SZXF1ZXN0EgwKBG5hbWUY",
            "ASABKAkiMQoTQ2FsbEZ1bmN0aW9uUmVxdWVzdBIMCgRuYW1lGAEgASgJEgwK",
            "BGRhdGEYAiABKAkiSwoUQ2FsbEZ1bmN0aW9uUmVzcG9uc2USFAoMZXhlY3V0",
            "aW9uX2lkGAEgASgJEg4KBnJlc3VsdBgCIAEoCRINCgVlcnJvchgDIAEoCSph",
            "ChNDbG91ZEZ1bmN0aW9uU3RhdHVzEhYKElNUQVRVU19VTlNQRUNJRklFRBAA",
            "EgkKBVJFQURZEAESCgoGRkFJTEVEEAISDQoJREVQTE9ZSU5HEAMSDAoIREVM",
            "RVRJTkcQBDLICAoVQ2xvdWRGdW5jdGlvbnNTZXJ2aWNlEroBCg1MaXN0RnVu",
            "Y3Rpb25zEjQuZ29vZ2xlLmNsb3VkLmZ1bmN0aW9ucy52MWJldGEyLkxpc3RG",
            "dW5jdGlvbnNSZXF1ZXN0GjUuZ29vZ2xlLmNsb3VkLmZ1bmN0aW9ucy52MWJl",
            "dGEyLkxpc3RGdW5jdGlvbnNSZXNwb25zZSI8gtPkkwI2EjQvdjFiZXRhMi97",
            "bG9jYXRpb249cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vZnVuY3Rpb25zEqwB",
            "CgtHZXRGdW5jdGlvbhIyLmdvb2dsZS5jbG91ZC5mdW5jdGlvbnMudjFiZXRh",
            "Mi5HZXRGdW5jdGlvblJlcXVlc3QaLS5nb29nbGUuY2xvdWQuZnVuY3Rpb25z",
            "LnYxYmV0YTIuQ2xvdWRGdW5jdGlvbiI6gtPkkwI0EjIvdjFiZXRhMi97bmFt",
            "ZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2Z1bmN0aW9ucy8qfRKuAQoOQ3Jl",
            "YXRlRnVuY3Rpb24SNS5nb29nbGUuY2xvdWQuZnVuY3Rpb25zLnYxYmV0YTIu",
            "Q3JlYXRlRnVuY3Rpb25SZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9w",
            "ZXJhdGlvbiJGgtPkkwJAIjQvdjFiZXRhMi97bG9jYXRpb249cHJvamVjdHMv",
            "Ki9sb2NhdGlvbnMvKn0vZnVuY3Rpb25zOghmdW5jdGlvbhKsAQoOVXBkYXRl",
            "RnVuY3Rpb24SNS5nb29nbGUuY2xvdWQuZnVuY3Rpb25zLnYxYmV0YTIuVXBk",
            "YXRlRnVuY3Rpb25SZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJh",
            "dGlvbiJEgtPkkwI+GjIvdjFiZXRhMi97bmFtZT1wcm9qZWN0cy8qL2xvY2F0",
            "aW9ucy8qL2Z1bmN0aW9ucy8qfToIZnVuY3Rpb24SogEKDkRlbGV0ZUZ1bmN0",
            "aW9uEjUuZ29vZ2xlLmNsb3VkLmZ1bmN0aW9ucy52MWJldGEyLkRlbGV0ZUZ1",
            "bmN0aW9uUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24i",
            "OoLT5JMCNCoyL3YxYmV0YTIve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMv",
            "Ki9mdW5jdGlvbnMvKn0SvQEKDENhbGxGdW5jdGlvbhIzLmdvb2dsZS5jbG91",
            "ZC5mdW5jdGlvbnMudjFiZXRhMi5DYWxsRnVuY3Rpb25SZXF1ZXN0GjQuZ29v",
            "Z2xlLmNsb3VkLmZ1bmN0aW9ucy52MWJldGEyLkNhbGxGdW5jdGlvblJlc3Bv",
            "bnNlIkKC0+STAjwiNy92MWJldGEyL3tuYW1lPXByb2plY3RzLyovbG9jYXRp",
            "b25zLyovZnVuY3Rpb25zLyp9OmNhbGw6ASpChQEKImNvbS5nb29nbGUuY2xv",
            "dWQuZnVuY3Rpb25zLnYxYmV0YTJCDkZ1bmN0aW9uc1Byb3RvUAFaR2dvb2ds",
            "ZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvY2xvdWQvZnVuY3Rp",
            "b25zL3YxYmV0YTI7ZnVuY3Rpb25zogIDR0NGYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.AuthReflection.Descriptor, global::Google.Cloud.Functions.V1Beta2.OperationsReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Functions.V1Beta2.CloudFunctionStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.CloudFunction), global::Google.Cloud.Functions.V1Beta2.CloudFunction.Parser, new[]{ "Name", "GcsUrl", "SourceArchiveUrl", "SourceRepository", "PubsubTrigger", "GcsTrigger", "HttpsTrigger", "EventTrigger", "Status", "LatestOperation", "EntryPoint", "Timeout", "AvailableMemoryMb", "ServiceAccount" }, new[]{ "SourceCode", "Trigger" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.HTTPSTrigger), global::Google.Cloud.Functions.V1Beta2.HTTPSTrigger.Parser, new[]{ "Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.EventTrigger), global::Google.Cloud.Functions.V1Beta2.EventTrigger.Parser, new[]{ "EventType", "Resource", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.SourceRepository), global::Google.Cloud.Functions.V1Beta2.SourceRepository.Parser, new[]{ "RepositoryUrl", "SourcePath", "Branch", "Tag", "Revision", "DeployedRevision" }, new[]{ "Version" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.CreateFunctionRequest), global::Google.Cloud.Functions.V1Beta2.CreateFunctionRequest.Parser, new[]{ "Location", "Function" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.UpdateFunctionRequest), global::Google.Cloud.Functions.V1Beta2.UpdateFunctionRequest.Parser, new[]{ "Name", "Function" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.GetFunctionRequest), global::Google.Cloud.Functions.V1Beta2.GetFunctionRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.ListFunctionsRequest), global::Google.Cloud.Functions.V1Beta2.ListFunctionsRequest.Parser, new[]{ "Location", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.ListFunctionsResponse), global::Google.Cloud.Functions.V1Beta2.ListFunctionsResponse.Parser, new[]{ "Functions", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.DeleteFunctionRequest), global::Google.Cloud.Functions.V1Beta2.DeleteFunctionRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.CallFunctionRequest), global::Google.Cloud.Functions.V1Beta2.CallFunctionRequest.Parser, new[]{ "Name", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Functions.V1Beta2.CallFunctionResponse), global::Google.Cloud.Functions.V1Beta2.CallFunctionResponse.Parser, new[]{ "ExecutionId", "Result", "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Describes the current stage of a deployment.
  /// </summary>
  public enum CloudFunctionStatus {
    /// <summary>
    ///  Status not specified.
    /// </summary>
    [pbr::OriginalName("STATUS_UNSPECIFIED")] StatusUnspecified = 0,
    /// <summary>
    ///  Successfully deployed.
    /// </summary>
    [pbr::OriginalName("READY")] Ready = 1,
    /// <summary>
    ///  Not deployed correctly - behavior is undefined. The item should be updated
    ///  or deleted to move it out of this state.
    /// </summary>
    [pbr::OriginalName("FAILED")] Failed = 2,
    /// <summary>
    ///  Creation or update in progress.
    /// </summary>
    [pbr::OriginalName("DEPLOYING")] Deploying = 3,
    /// <summary>
    ///  Deletion in progress.
    /// </summary>
    [pbr::OriginalName("DELETING")] Deleting = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Describes a cloud function that contains user computation executed in
  ///  response to an event. It encapsulate function and triggers configurations.
  /// </summary>
  public sealed partial class CloudFunction : pb::IMessage<CloudFunction> {
    private static readonly pb::MessageParser<CloudFunction> _parser = new pb::MessageParser<CloudFunction>(() => new CloudFunction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudFunction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudFunction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudFunction(CloudFunction other) : this() {
      name_ = other.name_;
      status_ = other.status_;
      latestOperation_ = other.latestOperation_;
      entryPoint_ = other.entryPoint_;
      Timeout = other.timeout_ != null ? other.Timeout.Clone() : null;
      availableMemoryMb_ = other.availableMemoryMb_;
      serviceAccount_ = other.serviceAccount_;
      switch (other.SourceCodeCase) {
        case SourceCodeOneofCase.GcsUrl:
          GcsUrl = other.GcsUrl;
          break;
        case SourceCodeOneofCase.SourceArchiveUrl:
          SourceArchiveUrl = other.SourceArchiveUrl;
          break;
        case SourceCodeOneofCase.SourceRepository:
          SourceRepository = other.SourceRepository.Clone();
          break;
      }

      switch (other.TriggerCase) {
        case TriggerOneofCase.PubsubTrigger:
          PubsubTrigger = other.PubsubTrigger;
          break;
        case TriggerOneofCase.GcsTrigger:
          GcsTrigger = other.GcsTrigger;
          break;
        case TriggerOneofCase.HttpsTrigger:
          HttpsTrigger = other.HttpsTrigger.Clone();
          break;
        case TriggerOneofCase.EventTrigger:
          EventTrigger = other.EventTrigger.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudFunction Clone() {
      return new CloudFunction(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  A user-defined name of the function. Function names must be unique
    ///  globally and match pattern: projects/*/locations/*/functions/*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gcs_url" field.</summary>
    public const int GcsUrlFieldNumber = 2;
    /// <summary>
    ///  Google Cloud Storage URL pointing to the zip archive which contains the
    ///  function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GcsUrl {
      get { return sourceCodeCase_ == SourceCodeOneofCase.GcsUrl ? (string) sourceCode_ : ""; }
      set {
        sourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCodeCase_ = SourceCodeOneofCase.GcsUrl;
      }
    }

    /// <summary>Field number for the "source_archive_url" field.</summary>
    public const int SourceArchiveUrlFieldNumber = 14;
    /// <summary>
    ///  The URL, starting with gs://, pointing to the zip archive which contains
    ///  the function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceArchiveUrl {
      get { return sourceCodeCase_ == SourceCodeOneofCase.SourceArchiveUrl ? (string) sourceCode_ : ""; }
      set {
        sourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCodeCase_ = SourceCodeOneofCase.SourceArchiveUrl;
      }
    }

    /// <summary>Field number for the "source_repository" field.</summary>
    public const int SourceRepositoryFieldNumber = 3;
    /// <summary>
    ///  The hosted repository where the function is defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Functions.V1Beta2.SourceRepository SourceRepository {
      get { return sourceCodeCase_ == SourceCodeOneofCase.SourceRepository ? (global::Google.Cloud.Functions.V1Beta2.SourceRepository) sourceCode_ : null; }
      set {
        sourceCode_ = value;
        sourceCodeCase_ = value == null ? SourceCodeOneofCase.None : SourceCodeOneofCase.SourceRepository;
      }
    }

    /// <summary>Field number for the "pubsub_trigger" field.</summary>
    public const int PubsubTriggerFieldNumber = 4;
    /// <summary>
    ///  A pub/sub type of source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubsubTrigger {
      get { return triggerCase_ == TriggerOneofCase.PubsubTrigger ? (string) trigger_ : ""; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        triggerCase_ = TriggerOneofCase.PubsubTrigger;
      }
    }

    /// <summary>Field number for the "gcs_trigger" field.</summary>
    public const int GcsTriggerFieldNumber = 5;
    /// <summary>
    ///  Google Cloud Storage resource whose changes trigger the events.
    ///  Currently, it must have the form gs://&lt;bucket>/ (that is, it must refer
    ///  to a bucket, rather than an object).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GcsTrigger {
      get { return triggerCase_ == TriggerOneofCase.GcsTrigger ? (string) trigger_ : ""; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        triggerCase_ = TriggerOneofCase.GcsTrigger;
      }
    }

    /// <summary>Field number for the "https_trigger" field.</summary>
    public const int HttpsTriggerFieldNumber = 6;
    /// <summary>
    ///  A https endpoint type of source that can be trigger via URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Functions.V1Beta2.HTTPSTrigger HttpsTrigger {
      get { return triggerCase_ == TriggerOneofCase.HttpsTrigger ? (global::Google.Cloud.Functions.V1Beta2.HTTPSTrigger) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.HttpsTrigger;
      }
    }

    /// <summary>Field number for the "event_trigger" field.</summary>
    public const int EventTriggerFieldNumber = 12;
    /// <summary>
    ///  A source that fires events in response to a condition in another service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Functions.V1Beta2.EventTrigger EventTrigger {
      get { return triggerCase_ == TriggerOneofCase.EventTrigger ? (global::Google.Cloud.Functions.V1Beta2.EventTrigger) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.EventTrigger;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Google.Cloud.Functions.V1Beta2.CloudFunctionStatus status_ = 0;
    /// <summary>
    ///  Status of the function deployment. Output only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Functions.V1Beta2.CloudFunctionStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "latest_operation" field.</summary>
    public const int LatestOperationFieldNumber = 8;
    private string latestOperation_ = "";
    /// <summary>
    ///  Name of the most recent operation modifying the function. If
    ///  the function status is DEPLOYING or DELETING, then it points to the active
    ///  operation. Output only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LatestOperation {
      get { return latestOperation_; }
      set {
        latestOperation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entry_point" field.</summary>
    public const int EntryPointFieldNumber = 9;
    private string entryPoint_ = "";
    /// <summary>
    ///  The name of the function (as defined in source code) that will be
    ///  executed. Defaults to the resource name suffix, if not specified. For
    ///  backward compatibility, if function with given name is not found, then the
    ///  system will try to use function named 'function'.
    ///  For Node.js this is name of a function exported by the module specified
    ///  in source_location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntryPoint {
      get { return entryPoint_; }
      set {
        entryPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Duration timeout_;
    /// <summary>
    ///  The function execution timeout. Execution is considered failed and
    ///  can be terminated if the function is not completed at the end of the
    ///  timeout period. Defaults to 60 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "available_memory_mb" field.</summary>
    public const int AvailableMemoryMbFieldNumber = 11;
    private int availableMemoryMb_;
    /// <summary>
    ///  The amount of memory in MB available for a function.
    ///  Defaults to 256MB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableMemoryMb {
      get { return availableMemoryMb_; }
      set {
        availableMemoryMb_ = value;
      }
    }

    /// <summary>Field number for the "service_account" field.</summary>
    public const int ServiceAccountFieldNumber = 13;
    private string serviceAccount_ = "";
    /// <summary>
    ///  The service account of the function. Output only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccount {
      get { return serviceAccount_; }
      set {
        serviceAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object sourceCode_;
    /// <summary>Enum of possible cases for the "source_code" oneof.</summary>
    public enum SourceCodeOneofCase {
      None = 0,
      GcsUrl = 2,
      SourceArchiveUrl = 14,
      SourceRepository = 3,
    }
    private SourceCodeOneofCase sourceCodeCase_ = SourceCodeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceCodeOneofCase SourceCodeCase {
      get { return sourceCodeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceCode() {
      sourceCodeCase_ = SourceCodeOneofCase.None;
      sourceCode_ = null;
    }

    private object trigger_;
    /// <summary>Enum of possible cases for the "trigger" oneof.</summary>
    public enum TriggerOneofCase {
      None = 0,
      PubsubTrigger = 4,
      GcsTrigger = 5,
      HttpsTrigger = 6,
      EventTrigger = 12,
    }
    private TriggerOneofCase triggerCase_ = TriggerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerOneofCase TriggerCase {
      get { return triggerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrigger() {
      triggerCase_ = TriggerOneofCase.None;
      trigger_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudFunction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudFunction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (GcsUrl != other.GcsUrl) return false;
      if (SourceArchiveUrl != other.SourceArchiveUrl) return false;
      if (!object.Equals(SourceRepository, other.SourceRepository)) return false;
      if (PubsubTrigger != other.PubsubTrigger) return false;
      if (GcsTrigger != other.GcsTrigger) return false;
      if (!object.Equals(HttpsTrigger, other.HttpsTrigger)) return false;
      if (!object.Equals(EventTrigger, other.EventTrigger)) return false;
      if (Status != other.Status) return false;
      if (LatestOperation != other.LatestOperation) return false;
      if (EntryPoint != other.EntryPoint) return false;
      if (!object.Equals(Timeout, other.Timeout)) return false;
      if (AvailableMemoryMb != other.AvailableMemoryMb) return false;
      if (ServiceAccount != other.ServiceAccount) return false;
      if (SourceCodeCase != other.SourceCodeCase) return false;
      if (TriggerCase != other.TriggerCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (sourceCodeCase_ == SourceCodeOneofCase.GcsUrl) hash ^= GcsUrl.GetHashCode();
      if (sourceCodeCase_ == SourceCodeOneofCase.SourceArchiveUrl) hash ^= SourceArchiveUrl.GetHashCode();
      if (sourceCodeCase_ == SourceCodeOneofCase.SourceRepository) hash ^= SourceRepository.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.PubsubTrigger) hash ^= PubsubTrigger.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.GcsTrigger) hash ^= GcsTrigger.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.HttpsTrigger) hash ^= HttpsTrigger.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.EventTrigger) hash ^= EventTrigger.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LatestOperation.Length != 0) hash ^= LatestOperation.GetHashCode();
      if (EntryPoint.Length != 0) hash ^= EntryPoint.GetHashCode();
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (AvailableMemoryMb != 0) hash ^= AvailableMemoryMb.GetHashCode();
      if (ServiceAccount.Length != 0) hash ^= ServiceAccount.GetHashCode();
      hash ^= (int) sourceCodeCase_;
      hash ^= (int) triggerCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (sourceCodeCase_ == SourceCodeOneofCase.GcsUrl) {
        output.WriteRawTag(18);
        output.WriteString(GcsUrl);
      }
      if (sourceCodeCase_ == SourceCodeOneofCase.SourceRepository) {
        output.WriteRawTag(26);
        output.WriteMessage(SourceRepository);
      }
      if (triggerCase_ == TriggerOneofCase.PubsubTrigger) {
        output.WriteRawTag(34);
        output.WriteString(PubsubTrigger);
      }
      if (triggerCase_ == TriggerOneofCase.GcsTrigger) {
        output.WriteRawTag(42);
        output.WriteString(GcsTrigger);
      }
      if (triggerCase_ == TriggerOneofCase.HttpsTrigger) {
        output.WriteRawTag(50);
        output.WriteMessage(HttpsTrigger);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (LatestOperation.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LatestOperation);
      }
      if (EntryPoint.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(EntryPoint);
      }
      if (timeout_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Timeout);
      }
      if (AvailableMemoryMb != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AvailableMemoryMb);
      }
      if (triggerCase_ == TriggerOneofCase.EventTrigger) {
        output.WriteRawTag(98);
        output.WriteMessage(EventTrigger);
      }
      if (ServiceAccount.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ServiceAccount);
      }
      if (sourceCodeCase_ == SourceCodeOneofCase.SourceArchiveUrl) {
        output.WriteRawTag(114);
        output.WriteString(SourceArchiveUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (sourceCodeCase_ == SourceCodeOneofCase.GcsUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GcsUrl);
      }
      if (sourceCodeCase_ == SourceCodeOneofCase.SourceArchiveUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceArchiveUrl);
      }
      if (sourceCodeCase_ == SourceCodeOneofCase.SourceRepository) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceRepository);
      }
      if (triggerCase_ == TriggerOneofCase.PubsubTrigger) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubsubTrigger);
      }
      if (triggerCase_ == TriggerOneofCase.GcsTrigger) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GcsTrigger);
      }
      if (triggerCase_ == TriggerOneofCase.HttpsTrigger) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpsTrigger);
      }
      if (triggerCase_ == TriggerOneofCase.EventTrigger) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventTrigger);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (LatestOperation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LatestOperation);
      }
      if (EntryPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntryPoint);
      }
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (AvailableMemoryMb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableMemoryMb);
      }
      if (ServiceAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudFunction other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LatestOperation.Length != 0) {
        LatestOperation = other.LatestOperation;
      }
      if (other.EntryPoint.Length != 0) {
        EntryPoint = other.EntryPoint;
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          timeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      if (other.AvailableMemoryMb != 0) {
        AvailableMemoryMb = other.AvailableMemoryMb;
      }
      if (other.ServiceAccount.Length != 0) {
        ServiceAccount = other.ServiceAccount;
      }
      switch (other.SourceCodeCase) {
        case SourceCodeOneofCase.GcsUrl:
          GcsUrl = other.GcsUrl;
          break;
        case SourceCodeOneofCase.SourceArchiveUrl:
          SourceArchiveUrl = other.SourceArchiveUrl;
          break;
        case SourceCodeOneofCase.SourceRepository:
          SourceRepository = other.SourceRepository;
          break;
      }

      switch (other.TriggerCase) {
        case TriggerOneofCase.PubsubTrigger:
          PubsubTrigger = other.PubsubTrigger;
          break;
        case TriggerOneofCase.GcsTrigger:
          GcsTrigger = other.GcsTrigger;
          break;
        case TriggerOneofCase.HttpsTrigger:
          HttpsTrigger = other.HttpsTrigger;
          break;
        case TriggerOneofCase.EventTrigger:
          EventTrigger = other.EventTrigger;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            GcsUrl = input.ReadString();
            break;
          }
          case 26: {
            global::Google.Cloud.Functions.V1Beta2.SourceRepository subBuilder = new global::Google.Cloud.Functions.V1Beta2.SourceRepository();
            if (sourceCodeCase_ == SourceCodeOneofCase.SourceRepository) {
              subBuilder.MergeFrom(SourceRepository);
            }
            input.ReadMessage(subBuilder);
            SourceRepository = subBuilder;
            break;
          }
          case 34: {
            PubsubTrigger = input.ReadString();
            break;
          }
          case 42: {
            GcsTrigger = input.ReadString();
            break;
          }
          case 50: {
            global::Google.Cloud.Functions.V1Beta2.HTTPSTrigger subBuilder = new global::Google.Cloud.Functions.V1Beta2.HTTPSTrigger();
            if (triggerCase_ == TriggerOneofCase.HttpsTrigger) {
              subBuilder.MergeFrom(HttpsTrigger);
            }
            input.ReadMessage(subBuilder);
            HttpsTrigger = subBuilder;
            break;
          }
          case 56: {
            status_ = (global::Google.Cloud.Functions.V1Beta2.CloudFunctionStatus) input.ReadEnum();
            break;
          }
          case 66: {
            LatestOperation = input.ReadString();
            break;
          }
          case 74: {
            EntryPoint = input.ReadString();
            break;
          }
          case 82: {
            if (timeout_ == null) {
              timeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeout_);
            break;
          }
          case 88: {
            AvailableMemoryMb = input.ReadInt32();
            break;
          }
          case 98: {
            global::Google.Cloud.Functions.V1Beta2.EventTrigger subBuilder = new global::Google.Cloud.Functions.V1Beta2.EventTrigger();
            if (triggerCase_ == TriggerOneofCase.EventTrigger) {
              subBuilder.MergeFrom(EventTrigger);
            }
            input.ReadMessage(subBuilder);
            EventTrigger = subBuilder;
            break;
          }
          case 106: {
            ServiceAccount = input.ReadString();
            break;
          }
          case 114: {
            SourceArchiveUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Describes HTTPSTrigger, could be used to connect web hooks to function.
  /// </summary>
  public sealed partial class HTTPSTrigger : pb::IMessage<HTTPSTrigger> {
    private static readonly pb::MessageParser<HTTPSTrigger> _parser = new pb::MessageParser<HTTPSTrigger>(() => new HTTPSTrigger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPSTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPSTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPSTrigger(HTTPSTrigger other) : this() {
      url_ = other.url_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPSTrigger Clone() {
      return new HTTPSTrigger(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    ///  [Output only] The deployed url for the function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPSTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPSTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPSTrigger other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Describes EventTrigger, used to request events be sent from another
  ///  service.
  /// </summary>
  public sealed partial class EventTrigger : pb::IMessage<EventTrigger> {
    private static readonly pb::MessageParser<EventTrigger> _parser = new pb::MessageParser<EventTrigger>(() => new EventTrigger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrigger(EventTrigger other) : this() {
      eventType_ = other.eventType_;
      resource_ = other.resource_;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrigger Clone() {
      return new EventTrigger(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private string eventType_ = "";
    /// <summary>
    ///  event_type names contain the service that is sending an event and the kind
    ///  of event that was fired. Must be of the form providers/*/eventTypes/*
    ///  e.g. Directly handle a Message published to Google Cloud PubSub
    ///       providers/cloud.pubsub/eventTypes/topic.publish
    ///
    ///       Handle an object changing in Google Cloud Storage
    ///       providers/cloud.storage/eventTypes/object.change
    ///
    ///       Handle a write to the Firebase Realtime Database
    ///       providers/firebase.database/eventTypes/data.write
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private string resource_ = "";
    /// <summary>
    ///  Which instance of the source's service should send events. E.g. for PubSub
    ///  this would be a PubSub topic at projects/*/topics/*. For Google Cloud
    ///  Storage this would be a bucket at projects/*/buckets/*. For any source
    ///  that only supports one instance per-project, this should be the name of the
    ///  project (projects/*)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    /// <summary>
    ///  Optional path within the resource that should be used to filter events.
    ///  Named wildcards may be written in curly brackets (e.g. {variable}). The
    ///  value that matched this parameter will be included  in the event
    ///  parameters. e.g. users/{userId}/profilePic
    ///  Path is not supported for all actions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (Resource != other.Resource) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventType);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resource);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTrigger other) {
      if (other == null) {
        return;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventType = input.ReadString();
            break;
          }
          case 18: {
            Resource = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Describes the location of the function source in a remote repository.
  /// </summary>
  public sealed partial class SourceRepository : pb::IMessage<SourceRepository> {
    private static readonly pb::MessageParser<SourceRepository> _parser = new pb::MessageParser<SourceRepository>(() => new SourceRepository());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceRepository> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceRepository() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceRepository(SourceRepository other) : this() {
      repositoryUrl_ = other.repositoryUrl_;
      sourcePath_ = other.sourcePath_;
      deployedRevision_ = other.deployedRevision_;
      switch (other.VersionCase) {
        case VersionOneofCase.Branch:
          Branch = other.Branch;
          break;
        case VersionOneofCase.Tag:
          Tag = other.Tag;
          break;
        case VersionOneofCase.Revision:
          Revision = other.Revision;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceRepository Clone() {
      return new SourceRepository(this);
    }

    /// <summary>Field number for the "repository_url" field.</summary>
    public const int RepositoryUrlFieldNumber = 1;
    private string repositoryUrl_ = "";
    /// <summary>
    ///  URL to the hosted repository where the function is defined. Only paths in
    ///  https://source.developers.google.com domain are supported. The path should
    ///  contain the name of the repository.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepositoryUrl {
      get { return repositoryUrl_; }
      set {
        repositoryUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_path" field.</summary>
    public const int SourcePathFieldNumber = 2;
    private string sourcePath_ = "";
    /// <summary>
    ///  The path within the repository where the function is defined. The path
    ///  should point to the directory where cloud functions files are located. Use
    ///  '/' if the function is defined directly in the root directory of a
    ///  repository.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourcePath {
      get { return sourcePath_; }
      set {
        sourcePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "branch" field.</summary>
    public const int BranchFieldNumber = 3;
    /// <summary>
    ///  The name of the branch from which the function should be fetched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Branch {
      get { return versionCase_ == VersionOneofCase.Branch ? (string) version_ : ""; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        versionCase_ = VersionOneofCase.Branch;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 4;
    /// <summary>
    ///  The name of the tag that captures the state of the repository from
    ///  which the function should be fetched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return versionCase_ == VersionOneofCase.Tag ? (string) version_ : ""; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        versionCase_ = VersionOneofCase.Tag;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 5;
    /// <summary>
    ///  The id of the revision that captures the state of the repository from
    ///  which the function should be fetched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Revision {
      get { return versionCase_ == VersionOneofCase.Revision ? (string) version_ : ""; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        versionCase_ = VersionOneofCase.Revision;
      }
    }

    /// <summary>Field number for the "deployed_revision" field.</summary>
    public const int DeployedRevisionFieldNumber = 6;
    private string deployedRevision_ = "";
    /// <summary>
    ///  The id of the revision that was resolved at the moment of
    ///  function creation or update. For example when a user deployed from a
    ///  branch, it will be the revision id of the latest change on this branch at
    ///  that time. If user deployed from revision then this value will be always
    ///  equal to the revision specified by the user. Output only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeployedRevision {
      get { return deployedRevision_; }
      set {
        deployedRevision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object version_;
    /// <summary>Enum of possible cases for the "version" oneof.</summary>
    public enum VersionOneofCase {
      None = 0,
      Branch = 3,
      Tag = 4,
      Revision = 5,
    }
    private VersionOneofCase versionCase_ = VersionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionOneofCase VersionCase {
      get { return versionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      versionCase_ = VersionOneofCase.None;
      version_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceRepository);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceRepository other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RepositoryUrl != other.RepositoryUrl) return false;
      if (SourcePath != other.SourcePath) return false;
      if (Branch != other.Branch) return false;
      if (Tag != other.Tag) return false;
      if (Revision != other.Revision) return false;
      if (DeployedRevision != other.DeployedRevision) return false;
      if (VersionCase != other.VersionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RepositoryUrl.Length != 0) hash ^= RepositoryUrl.GetHashCode();
      if (SourcePath.Length != 0) hash ^= SourcePath.GetHashCode();
      if (versionCase_ == VersionOneofCase.Branch) hash ^= Branch.GetHashCode();
      if (versionCase_ == VersionOneofCase.Tag) hash ^= Tag.GetHashCode();
      if (versionCase_ == VersionOneofCase.Revision) hash ^= Revision.GetHashCode();
      if (DeployedRevision.Length != 0) hash ^= DeployedRevision.GetHashCode();
      hash ^= (int) versionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RepositoryUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RepositoryUrl);
      }
      if (SourcePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SourcePath);
      }
      if (versionCase_ == VersionOneofCase.Branch) {
        output.WriteRawTag(26);
        output.WriteString(Branch);
      }
      if (versionCase_ == VersionOneofCase.Tag) {
        output.WriteRawTag(34);
        output.WriteString(Tag);
      }
      if (versionCase_ == VersionOneofCase.Revision) {
        output.WriteRawTag(42);
        output.WriteString(Revision);
      }
      if (DeployedRevision.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeployedRevision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RepositoryUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepositoryUrl);
      }
      if (SourcePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePath);
      }
      if (versionCase_ == VersionOneofCase.Branch) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Branch);
      }
      if (versionCase_ == VersionOneofCase.Tag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (versionCase_ == VersionOneofCase.Revision) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Revision);
      }
      if (DeployedRevision.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeployedRevision);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceRepository other) {
      if (other == null) {
        return;
      }
      if (other.RepositoryUrl.Length != 0) {
        RepositoryUrl = other.RepositoryUrl;
      }
      if (other.SourcePath.Length != 0) {
        SourcePath = other.SourcePath;
      }
      if (other.DeployedRevision.Length != 0) {
        DeployedRevision = other.DeployedRevision;
      }
      switch (other.VersionCase) {
        case VersionOneofCase.Branch:
          Branch = other.Branch;
          break;
        case VersionOneofCase.Tag:
          Tag = other.Tag;
          break;
        case VersionOneofCase.Revision:
          Revision = other.Revision;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RepositoryUrl = input.ReadString();
            break;
          }
          case 18: {
            SourcePath = input.ReadString();
            break;
          }
          case 26: {
            Branch = input.ReadString();
            break;
          }
          case 34: {
            Tag = input.ReadString();
            break;
          }
          case 42: {
            Revision = input.ReadString();
            break;
          }
          case 50: {
            DeployedRevision = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for the CreateFunction method.
  /// </summary>
  public sealed partial class CreateFunctionRequest : pb::IMessage<CreateFunctionRequest> {
    private static readonly pb::MessageParser<CreateFunctionRequest> _parser = new pb::MessageParser<CreateFunctionRequest>(() => new CreateFunctionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFunctionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFunctionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFunctionRequest(CreateFunctionRequest other) : this() {
      location_ = other.location_;
      Function = other.function_ != null ? other.Function.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFunctionRequest Clone() {
      return new CreateFunctionRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private string location_ = "";
    /// <summary>
    ///  The project and location in which the function should be created, specified
    ///  in the format: projects/*/locations/*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 2;
    private global::Google.Cloud.Functions.V1Beta2.CloudFunction function_;
    /// <summary>
    ///  Function to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Functions.V1Beta2.CloudFunction Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFunctionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFunctionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (!object.Equals(Function, other.Function)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (function_ != null) hash ^= Function.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Location.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Location);
      }
      if (function_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Function);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (function_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Function);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFunctionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.function_ != null) {
        if (function_ == null) {
          function_ = new global::Google.Cloud.Functions.V1Beta2.CloudFunction();
        }
        Function.MergeFrom(other.Function);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Location = input.ReadString();
            break;
          }
          case 18: {
            if (function_ == null) {
              function_ = new global::Google.Cloud.Functions.V1Beta2.CloudFunction();
            }
            input.ReadMessage(function_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for the UpdateFunction method.
  /// </summary>
  public sealed partial class UpdateFunctionRequest : pb::IMessage<UpdateFunctionRequest> {
    private static readonly pb::MessageParser<UpdateFunctionRequest> _parser = new pb::MessageParser<UpdateFunctionRequest>(() => new UpdateFunctionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateFunctionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFunctionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFunctionRequest(UpdateFunctionRequest other) : this() {
      name_ = other.name_;
      Function = other.function_ != null ? other.Function.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFunctionRequest Clone() {
      return new UpdateFunctionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The name of the function to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 2;
    private global::Google.Cloud.Functions.V1Beta2.CloudFunction function_;
    /// <summary>
    ///  New version of the function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Functions.V1Beta2.CloudFunction Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateFunctionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateFunctionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Function, other.Function)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (function_ != null) hash ^= Function.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (function_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Function);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (function_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Function);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateFunctionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.function_ != null) {
        if (function_ == null) {
          function_ = new global::Google.Cloud.Functions.V1Beta2.CloudFunction();
        }
        Function.MergeFrom(other.Function);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (function_ == null) {
              function_ = new global::Google.Cloud.Functions.V1Beta2.CloudFunction();
            }
            input.ReadMessage(function_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for the GetFunction method.
  /// </summary>
  public sealed partial class GetFunctionRequest : pb::IMessage<GetFunctionRequest> {
    private static readonly pb::MessageParser<GetFunctionRequest> _parser = new pb::MessageParser<GetFunctionRequest>(() => new GetFunctionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFunctionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionRequest(GetFunctionRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFunctionRequest Clone() {
      return new GetFunctionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The name of the function which details should be obtained.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFunctionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFunctionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFunctionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for the ListFunctions method.
  /// </summary>
  public sealed partial class ListFunctionsRequest : pb::IMessage<ListFunctionsRequest> {
    private static readonly pb::MessageParser<ListFunctionsRequest> _parser = new pb::MessageParser<ListFunctionsRequest>(() => new ListFunctionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFunctionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFunctionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFunctionsRequest(ListFunctionsRequest other) : this() {
      location_ = other.location_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFunctionsRequest Clone() {
      return new ListFunctionsRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private string location_ = "";
    /// <summary>
    ///  The project and location from which the function should be listed,
    ///  specified in the format: projects/*/locations/*
    ///  If you want to list functions in all locations, use '-' in place of a
    ///  location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///  Maximum number of functions to return per call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    ///  The value returned by the last ListFunctionsResponse; indicates that
    ///  this is a continuation of a prior ListFunctions call, and that the
    ///  system should return the next page of data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFunctionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFunctionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Location.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Location);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFunctionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Location = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response for the ListFunctions method.
  /// </summary>
  public sealed partial class ListFunctionsResponse : pb::IMessage<ListFunctionsResponse> {
    private static readonly pb::MessageParser<ListFunctionsResponse> _parser = new pb::MessageParser<ListFunctionsResponse>(() => new ListFunctionsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFunctionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFunctionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFunctionsResponse(ListFunctionsResponse other) : this() {
      functions_ = other.functions_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFunctionsResponse Clone() {
      return new ListFunctionsResponse(this);
    }

    /// <summary>Field number for the "functions" field.</summary>
    public const int FunctionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Functions.V1Beta2.CloudFunction> _repeated_functions_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Functions.V1Beta2.CloudFunction.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Functions.V1Beta2.CloudFunction> functions_ = new pbc::RepeatedField<global::Google.Cloud.Functions.V1Beta2.CloudFunction>();
    /// <summary>
    ///  The functions that match the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Functions.V1Beta2.CloudFunction> Functions {
      get { return functions_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  If not empty, indicates that there may be more functions that match
    ///  the request; this value should be passed in a new ListFunctionsRequest
    ///  to get more functions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFunctionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFunctionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!functions_.Equals(other.functions_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= functions_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      functions_.WriteTo(output, _repeated_functions_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += functions_.CalculateSize(_repeated_functions_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFunctionsResponse other) {
      if (other == null) {
        return;
      }
      functions_.Add(other.functions_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            functions_.AddEntriesFrom(input, _repeated_functions_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for the DeleteFunction method.
  /// </summary>
  public sealed partial class DeleteFunctionRequest : pb::IMessage<DeleteFunctionRequest> {
    private static readonly pb::MessageParser<DeleteFunctionRequest> _parser = new pb::MessageParser<DeleteFunctionRequest>(() => new DeleteFunctionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteFunctionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFunctionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFunctionRequest(DeleteFunctionRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFunctionRequest Clone() {
      return new DeleteFunctionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The name of the function which should be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteFunctionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteFunctionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteFunctionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for the CallFunction method.
  /// </summary>
  public sealed partial class CallFunctionRequest : pb::IMessage<CallFunctionRequest> {
    private static readonly pb::MessageParser<CallFunctionRequest> _parser = new pb::MessageParser<CallFunctionRequest>(() => new CallFunctionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallFunctionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFunctionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFunctionRequest(CallFunctionRequest other) : this() {
      name_ = other.name_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFunctionRequest Clone() {
      return new CallFunctionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The name of the function to be called.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    /// <summary>
    ///  Input to be passed to the function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallFunctionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallFunctionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallFunctionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response of CallFunction method.
  /// </summary>
  public sealed partial class CallFunctionResponse : pb::IMessage<CallFunctionResponse> {
    private static readonly pb::MessageParser<CallFunctionResponse> _parser = new pb::MessageParser<CallFunctionResponse>(() => new CallFunctionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallFunctionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Functions.V1Beta2.FunctionsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFunctionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFunctionResponse(CallFunctionResponse other) : this() {
      executionId_ = other.executionId_;
      result_ = other.result_;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFunctionResponse Clone() {
      return new CallFunctionResponse(this);
    }

    /// <summary>Field number for the "execution_id" field.</summary>
    public const int ExecutionIdFieldNumber = 1;
    private string executionId_ = "";
    /// <summary>
    ///  Execution id of function invocation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecutionId {
      get { return executionId_; }
      set {
        executionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private string result_ = "";
    /// <summary>
    ///  Result populated for successful execution of synchronous function. Will
    ///  not be populated if function does not return a result through context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    ///  Either system or user-function generated error. Set if execution
    ///  was not successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallFunctionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallFunctionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecutionId != other.ExecutionId) return false;
      if (Result != other.Result) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExecutionId.Length != 0) hash ^= ExecutionId.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExecutionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExecutionId);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Result);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExecutionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutionId);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallFunctionResponse other) {
      if (other == null) {
        return;
      }
      if (other.ExecutionId.Length != 0) {
        ExecutionId = other.ExecutionId;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ExecutionId = input.ReadString();
            break;
          }
          case 18: {
            Result = input.ReadString();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
