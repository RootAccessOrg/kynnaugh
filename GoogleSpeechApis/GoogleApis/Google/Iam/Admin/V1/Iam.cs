// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/admin/v1/iam.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Iam.Admin.V1 {

  /// <summary>Holder for reflection information generated from google/iam/admin/v1/iam.proto</summary>
  public static partial class IamReflection {

    #region Descriptor
    /// <summary>File descriptor for google/iam/admin/v1/iam.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1nb29nbGUvaWFtL2FkbWluL3YxL2lhbS5wcm90bxITZ29vZ2xlLmlhbS5h",
            "ZG1pbi52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoeZ29vZ2xl",
            "L2lhbS92MS9pYW1fcG9saWN5LnByb3RvGhpnb29nbGUvaWFtL3YxL3BvbGlj",
            "eS5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGiBnb29nbGUv",
            "cHJvdG9idWYvZmllbGRfbWFzay5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90byKSAQoOU2VydmljZUFjY291bnQSDAoEbmFtZRgBIAEo",
            "CRISCgpwcm9qZWN0X2lkGAIgASgJEhEKCXVuaXF1ZV9pZBgEIAEoCRINCgVl",
            "bWFpbBgFIAEoCRIUCgxkaXNwbGF5X25hbWUYBiABKAkSDAoEZXRhZxgHIAEo",
            "DBIYChBvYXV0aDJfY2xpZW50X2lkGAkgASgJIn0KG0NyZWF0ZVNlcnZpY2VB",
            "Y2NvdW50UmVxdWVzdBIMCgRuYW1lGAEgASgJEhIKCmFjY291bnRfaWQYAiAB",
            "KAkSPAoPc2VydmljZV9hY2NvdW50GAMgASgLMiMuZ29vZ2xlLmlhbS5hZG1p",
            "bi52MS5TZXJ2aWNlQWNjb3VudCJRChpMaXN0U2VydmljZUFjY291bnRzUmVx",
            "dWVzdBIMCgRuYW1lGAEgASgJEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdl",
            "X3Rva2VuGAMgASgJIm0KG0xpc3RTZXJ2aWNlQWNjb3VudHNSZXNwb25zZRI1",
            "CghhY2NvdW50cxgBIAMoCzIjLmdvb2dsZS5pYW0uYWRtaW4udjEuU2Vydmlj",
            "ZUFjY291bnQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIigKGEdldFNlcnZp",
            "Y2VBY2NvdW50UmVxdWVzdBIMCgRuYW1lGAEgASgJIisKG0RlbGV0ZVNlcnZp",
            "Y2VBY2NvdW50UmVxdWVzdBIMCgRuYW1lGAEgASgJIscBCh1MaXN0U2Vydmlj",
            "ZUFjY291bnRLZXlzUmVxdWVzdBIMCgRuYW1lGAEgASgJEk0KCWtleV90eXBl",
            "cxgCIAMoDjI6Lmdvb2dsZS5pYW0uYWRtaW4udjEuTGlzdFNlcnZpY2VBY2Nv",
            "dW50S2V5c1JlcXVlc3QuS2V5VHlwZSJJCgdLZXlUeXBlEhgKFEtFWV9UWVBF",
            "X1VOU1BFQ0lGSUVEEAASEAoMVVNFUl9NQU5BR0VEEAESEgoOU1lTVEVNX01B",
            "TkFHRUQQAiJWCh5MaXN0U2VydmljZUFjY291bnRLZXlzUmVzcG9uc2USNAoE",
            "a2V5cxgBIAMoCzImLmdvb2dsZS5pYW0uYWRtaW4udjEuU2VydmljZUFjY291",
            "bnRLZXkidgobR2V0U2VydmljZUFjY291bnRLZXlSZXF1ZXN0EgwKBG5hbWUY",
            "ASABKAkSSQoPcHVibGljX2tleV90eXBlGAIgASgOMjAuZ29vZ2xlLmlhbS5h",
            "ZG1pbi52MS5TZXJ2aWNlQWNjb3VudFB1YmxpY0tleVR5cGUi1gIKEVNlcnZp",
            "Y2VBY2NvdW50S2V5EgwKBG5hbWUYASABKAkSSwoQcHJpdmF0ZV9rZXlfdHlw",
            "ZRgCIAEoDjIxLmdvb2dsZS5pYW0uYWRtaW4udjEuU2VydmljZUFjY291bnRQ",
            "cml2YXRlS2V5VHlwZRJGCg1rZXlfYWxnb3JpdGhtGAggASgOMi8uZ29vZ2xl",
            "LmlhbS5hZG1pbi52MS5TZXJ2aWNlQWNjb3VudEtleUFsZ29yaXRobRIYChBw",
            "cml2YXRlX2tleV9kYXRhGAMgASgMEhcKD3B1YmxpY19rZXlfZGF0YRgHIAEo",
            "DBI0ChB2YWxpZF9hZnRlcl90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBI1ChF2YWxpZF9iZWZvcmVfdGltZRgFIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXAiwwEKHkNyZWF0ZVNlcnZpY2VBY2NvdW50",
            "S2V5UmVxdWVzdBIMCgRuYW1lGAEgASgJEksKEHByaXZhdGVfa2V5X3R5cGUY",
            "AiABKA4yMS5nb29nbGUuaWFtLmFkbWluLnYxLlNlcnZpY2VBY2NvdW50UHJp",
            "dmF0ZUtleVR5cGUSRgoNa2V5X2FsZ29yaXRobRgDIAEoDjIvLmdvb2dsZS5p",
            "YW0uYWRtaW4udjEuU2VydmljZUFjY291bnRLZXlBbGdvcml0aG0iLgoeRGVs",
            "ZXRlU2VydmljZUFjY291bnRLZXlSZXF1ZXN0EgwKBG5hbWUYASABKAkiNgoP",
            "U2lnbkJsb2JSZXF1ZXN0EgwKBG5hbWUYASABKAkSFQoNYnl0ZXNfdG9fc2ln",
            "bhgCIAEoDCI1ChBTaWduQmxvYlJlc3BvbnNlEg4KBmtleV9pZBgBIAEoCRIR",
            "CglzaWduYXR1cmUYAiABKAwiOAoEUm9sZRIMCgRuYW1lGAEgASgJEg0KBXRp",
            "dGxlGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJIjgKGlF1ZXJ5R3JhbnRh",
            "YmxlUm9sZXNSZXF1ZXN0EhoKEmZ1bGxfcmVzb3VyY2VfbmFtZRgBIAEoCSJH",
            "ChtRdWVyeUdyYW50YWJsZVJvbGVzUmVzcG9uc2USKAoFcm9sZXMYASADKAsy",
            "GS5nb29nbGUuaWFtLmFkbWluLnYxLlJvbGUqYQoaU2VydmljZUFjY291bnRL",
            "ZXlBbGdvcml0aG0SFwoTS0VZX0FMR19VTlNQRUNJRklFRBAAEhQKEEtFWV9B",
            "TEdfUlNBXzEwMjQQARIUChBLRVlfQUxHX1JTQV8yMDQ4EAIqbAocU2Vydmlj",
            "ZUFjY291bnRQcml2YXRlS2V5VHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAAS",
            "FAoQVFlQRV9QS0NTMTJfRklMRRABEiAKHFRZUEVfR09PR0xFX0NSRURFTlRJ",
            "QUxTX0ZJTEUQAipdChtTZXJ2aWNlQWNjb3VudFB1YmxpY0tleVR5cGUSDQoJ",
            "VFlQRV9OT05FEAASFgoSVFlQRV9YNTA5X1BFTV9GSUxFEAESFwoTVFlQRV9S",
            "QVdfUFVCTElDX0tFWRACMuERCgNJQU0SpwEKE0xpc3RTZXJ2aWNlQWNjb3Vu",
            "dHMSLy5nb29nbGUuaWFtLmFkbWluLnYxLkxpc3RTZXJ2aWNlQWNjb3VudHNS",
            "ZXF1ZXN0GjAuZ29vZ2xlLmlhbS5hZG1pbi52MS5MaXN0U2VydmljZUFjY291",
            "bnRzUmVzcG9uc2UiLYLT5JMCJxIlL3YxL3tuYW1lPXByb2plY3RzLyp9L3Nl",
            "cnZpY2VBY2NvdW50cxKYAQoRR2V0U2VydmljZUFjY291bnQSLS5nb29nbGUu",
            "aWFtLmFkbWluLnYxLkdldFNlcnZpY2VBY2NvdW50UmVxdWVzdBojLmdvb2ds",
            "ZS5pYW0uYWRtaW4udjEuU2VydmljZUFjY291bnQiL4LT5JMCKRInL3YxL3tu",
            "YW1lPXByb2plY3RzLyovc2VydmljZUFjY291bnRzLyp9Ep8BChRDcmVhdGVT",
            "ZXJ2aWNlQWNjb3VudBIwLmdvb2dsZS5pYW0uYWRtaW4udjEuQ3JlYXRlU2Vy",
            "dmljZUFjY291bnRSZXF1ZXN0GiMuZ29vZ2xlLmlhbS5hZG1pbi52MS5TZXJ2",
            "aWNlQWNjb3VudCIwgtPkkwIqIiUvdjEve25hbWU9cHJvamVjdHMvKn0vc2Vy",
            "dmljZUFjY291bnRzOgEqEpQBChRVcGRhdGVTZXJ2aWNlQWNjb3VudBIjLmdv",
            "b2dsZS5pYW0uYWRtaW4udjEuU2VydmljZUFjY291bnQaIy5nb29nbGUuaWFt",
            "LmFkbWluLnYxLlNlcnZpY2VBY2NvdW50IjKC0+STAiwaJy92MS97bmFtZT1w",
            "cm9qZWN0cy8qL3NlcnZpY2VBY2NvdW50cy8qfToBKhKRAQoURGVsZXRlU2Vy",
            "dmljZUFjY291bnQSMC5nb29nbGUuaWFtLmFkbWluLnYxLkRlbGV0ZVNlcnZp",
            "Y2VBY2NvdW50UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIvgtPk",
            "kwIpKicvdjEve25hbWU9cHJvamVjdHMvKi9zZXJ2aWNlQWNjb3VudHMvKn0S",
            "twEKFkxpc3RTZXJ2aWNlQWNjb3VudEtleXMSMi5nb29nbGUuaWFtLmFkbWlu",
            "LnYxLkxpc3RTZXJ2aWNlQWNjb3VudEtleXNSZXF1ZXN0GjMuZ29vZ2xlLmlh",
            "bS5hZG1pbi52MS5MaXN0U2VydmljZUFjY291bnRLZXlzUmVzcG9uc2UiNILT",
            "5JMCLhIsL3YxL3tuYW1lPXByb2plY3RzLyovc2VydmljZUFjY291bnRzLyp9",
            "L2tleXMSqAEKFEdldFNlcnZpY2VBY2NvdW50S2V5EjAuZ29vZ2xlLmlhbS5h",
            "ZG1pbi52MS5HZXRTZXJ2aWNlQWNjb3VudEtleVJlcXVlc3QaJi5nb29nbGUu",
            "aWFtLmFkbWluLnYxLlNlcnZpY2VBY2NvdW50S2V5IjaC0+STAjASLi92MS97",
            "bmFtZT1wcm9qZWN0cy8qL3NlcnZpY2VBY2NvdW50cy8qL2tleXMvKn0SrwEK",
            "F0NyZWF0ZVNlcnZpY2VBY2NvdW50S2V5EjMuZ29vZ2xlLmlhbS5hZG1pbi52",
            "MS5DcmVhdGVTZXJ2aWNlQWNjb3VudEtleVJlcXVlc3QaJi5nb29nbGUuaWFt",
            "LmFkbWluLnYxLlNlcnZpY2VBY2NvdW50S2V5IjeC0+STAjEiLC92MS97bmFt",
            "ZT1wcm9qZWN0cy8qL3NlcnZpY2VBY2NvdW50cy8qfS9rZXlzOgEqEp4BChdE",
            "ZWxldGVTZXJ2aWNlQWNjb3VudEtleRIzLmdvb2dsZS5pYW0uYWRtaW4udjEu",
            "RGVsZXRlU2VydmljZUFjY291bnRLZXlSZXF1ZXN0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IjaC0+STAjAqLi92MS97bmFtZT1wcm9qZWN0cy8qL3NlcnZp",
            "Y2VBY2NvdW50cy8qL2tleXMvKn0SlAEKCFNpZ25CbG9iEiQuZ29vZ2xlLmlh",
            "bS5hZG1pbi52MS5TaWduQmxvYlJlcXVlc3QaJS5nb29nbGUuaWFtLmFkbWlu",
            "LnYxLlNpZ25CbG9iUmVzcG9uc2UiO4LT5JMCNSIwL3YxL3tuYW1lPXByb2pl",
            "Y3RzLyovc2VydmljZUFjY291bnRzLyp9OnNpZ25CbG9iOgEqEosBCgxHZXRJ",
            "YW1Qb2xpY3kSIi5nb29nbGUuaWFtLnYxLkdldElhbVBvbGljeVJlcXVlc3Qa",
            "FS5nb29nbGUuaWFtLnYxLlBvbGljeSJAgtPkkwI6IjgvdjEve3Jlc291cmNl",
            "PXByb2plY3RzLyovc2VydmljZUFjY291bnRzLyp9OmdldElhbVBvbGljeRKO",
            "AQoMU2V0SWFtUG9saWN5EiIuZ29vZ2xlLmlhbS52MS5TZXRJYW1Qb2xpY3lS",
            "ZXF1ZXN0GhUuZ29vZ2xlLmlhbS52MS5Qb2xpY3kiQ4LT5JMCPSI4L3YxL3ty",
            "ZXNvdXJjZT1wcm9qZWN0cy8qL3NlcnZpY2VBY2NvdW50cy8qfTpzZXRJYW1Q",
            "b2xpY3k6ASoStAEKElRlc3RJYW1QZXJtaXNzaW9ucxIoLmdvb2dsZS5pYW0u",
            "djEuVGVzdElhbVBlcm1pc3Npb25zUmVxdWVzdBopLmdvb2dsZS5pYW0udjEu",
            "VGVzdElhbVBlcm1pc3Npb25zUmVzcG9uc2UiSYLT5JMCQyI+L3YxL3tyZXNv",
            "dXJjZT1wcm9qZWN0cy8qL3NlcnZpY2VBY2NvdW50cy8qfTp0ZXN0SWFtUGVy",
            "bWlzc2lvbnM6ASoSogEKE1F1ZXJ5R3JhbnRhYmxlUm9sZXMSLy5nb29nbGUu",
            "aWFtLmFkbWluLnYxLlF1ZXJ5R3JhbnRhYmxlUm9sZXNSZXF1ZXN0GjAuZ29v",
            "Z2xlLmlhbS5hZG1pbi52MS5RdWVyeUdyYW50YWJsZVJvbGVzUmVzcG9uc2Ui",
            "KILT5JMCIiIdL3YxL3JvbGVzOnF1ZXJ5R3JhbnRhYmxlUm9sZXM6ASpCYgoX",
            "Y29tLmdvb2dsZS5pYW0uYWRtaW4udjFCCElhbVByb3RvUAFaOGdvb2dsZS5n",
            "b2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvaWFtL2FkbWluL3YxO2Fk",
            "bWlu+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Iam.V1.IamPolicyReflection.Descriptor, global::Google.Cloud.Iam.V1.PolicyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm), typeof(global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType), typeof(global::Google.Iam.Admin.V1.ServiceAccountPublicKeyType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.ServiceAccount), global::Google.Iam.Admin.V1.ServiceAccount.Parser, new[]{ "Name", "ProjectId", "UniqueId", "Email", "DisplayName", "Etag", "Oauth2ClientId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.CreateServiceAccountRequest), global::Google.Iam.Admin.V1.CreateServiceAccountRequest.Parser, new[]{ "Name", "AccountId", "ServiceAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.ListServiceAccountsRequest), global::Google.Iam.Admin.V1.ListServiceAccountsRequest.Parser, new[]{ "Name", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.ListServiceAccountsResponse), global::Google.Iam.Admin.V1.ListServiceAccountsResponse.Parser, new[]{ "Accounts", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.GetServiceAccountRequest), global::Google.Iam.Admin.V1.GetServiceAccountRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.DeleteServiceAccountRequest), global::Google.Iam.Admin.V1.DeleteServiceAccountRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest), global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Parser, new[]{ "Name", "KeyTypes" }, null, new[]{ typeof(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Types.KeyType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse), global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse.Parser, new[]{ "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest), global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest.Parser, new[]{ "Name", "PublicKeyType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.ServiceAccountKey), global::Google.Iam.Admin.V1.ServiceAccountKey.Parser, new[]{ "Name", "PrivateKeyType", "KeyAlgorithm", "PrivateKeyData", "PublicKeyData", "ValidAfterTime", "ValidBeforeTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest), global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest.Parser, new[]{ "Name", "PrivateKeyType", "KeyAlgorithm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest), global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.SignBlobRequest), global::Google.Iam.Admin.V1.SignBlobRequest.Parser, new[]{ "Name", "BytesToSign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.SignBlobResponse), global::Google.Iam.Admin.V1.SignBlobResponse.Parser, new[]{ "KeyId", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.Role), global::Google.Iam.Admin.V1.Role.Parser, new[]{ "Name", "Title", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.QueryGrantableRolesRequest), global::Google.Iam.Admin.V1.QueryGrantableRolesRequest.Parser, new[]{ "FullResourceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Iam.Admin.V1.QueryGrantableRolesResponse), global::Google.Iam.Admin.V1.QueryGrantableRolesResponse.Parser, new[]{ "Roles" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Supported key algorithms.
  /// </summary>
  public enum ServiceAccountKeyAlgorithm {
    /// <summary>
    ///  An unspecified key algorithm.
    /// </summary>
    [pbr::OriginalName("KEY_ALG_UNSPECIFIED")] KeyAlgUnspecified = 0,
    /// <summary>
    ///  1k RSA Key.
    /// </summary>
    [pbr::OriginalName("KEY_ALG_RSA_1024")] KeyAlgRsa1024 = 1,
    /// <summary>
    ///  2k RSA Key.
    /// </summary>
    [pbr::OriginalName("KEY_ALG_RSA_2048")] KeyAlgRsa2048 = 2,
  }

  /// <summary>
  ///  Supported private key output formats.
  /// </summary>
  public enum ServiceAccountPrivateKeyType {
    /// <summary>
    ///  Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
    /// </summary>
    [pbr::OriginalName("TYPE_UNSPECIFIED")] TypeUnspecified = 0,
    /// <summary>
    ///  PKCS12 format.
    ///  The password for the PKCS12 file is `notasecret`.
    ///  For more information, see https://tools.ietf.org/html/rfc7292.
    /// </summary>
    [pbr::OriginalName("TYPE_PKCS12_FILE")] TypePkcs12File = 1,
    /// <summary>
    ///  Google Credentials File format.
    /// </summary>
    [pbr::OriginalName("TYPE_GOOGLE_CREDENTIALS_FILE")] TypeGoogleCredentialsFile = 2,
  }

  /// <summary>
  ///  Supported public key output formats.
  /// </summary>
  public enum ServiceAccountPublicKeyType {
    /// <summary>
    ///  Unspecified. Returns nothing here.
    /// </summary>
    [pbr::OriginalName("TYPE_NONE")] TypeNone = 0,
    /// <summary>
    ///  X509 PEM format.
    /// </summary>
    [pbr::OriginalName("TYPE_X509_PEM_FILE")] TypeX509PemFile = 1,
    /// <summary>
    ///  Raw public key.
    /// </summary>
    [pbr::OriginalName("TYPE_RAW_PUBLIC_KEY")] TypeRawPublicKey = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  A service account in the Identity and Access Management API.
  ///
  ///  To create a service account, specify the `project_id` and the `account_id`
  ///  for the account.  The `account_id` is unique within the project, and is used
  ///  to generate the service account email address and a stable
  ///  `unique_id`.
  ///
  ///  If the account already exists, the account's resource name is returned
  ///  in util::Status's ResourceInfo.resource_name in the format of
  ///  projects/{project}/serviceAccounts/{email}. The caller can use the name in
  ///  other methods to access the account.
  ///
  ///  All other methods can identify the service account using the format
  ///  `projects/{project}/serviceAccounts/{account}`.
  ///  Using `-` as a wildcard for the project will infer the project from
  ///  the account. The `account` value can be the `email` address or the
  ///  `unique_id` of the service account.
  /// </summary>
  public sealed partial class ServiceAccount : pb::IMessage<ServiceAccount> {
    private static readonly pb::MessageParser<ServiceAccount> _parser = new pb::MessageParser<ServiceAccount>(() => new ServiceAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAccount(ServiceAccount other) : this() {
      name_ = other.name_;
      projectId_ = other.projectId_;
      uniqueId_ = other.uniqueId_;
      email_ = other.email_;
      displayName_ = other.displayName_;
      etag_ = other.etag_;
      oauth2ClientId_ = other.oauth2ClientId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAccount Clone() {
      return new ServiceAccount(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account in the following format:
    ///  `projects/{project}/serviceAccounts/{account}`.
    ///
    ///  Requests using `-` as a wildcard for the project will infer the project
    ///  from the `account` and the `account` value can be the `email` address or
    ///  the `unique_id` of the service account.
    ///
    ///  In responses the resource name will always be in the format
    ///  `projects/{project}/serviceAccounts/{email}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private string projectId_ = "";
    /// <summary>
    ///  @OutputOnly The id of the project that owns the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 4;
    private string uniqueId_ = "";
    /// <summary>
    ///  @OutputOnly The unique and stable id of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 5;
    private string email_ = "";
    /// <summary>
    ///  @OutputOnly The email address of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 6;
    private string displayName_ = "";
    /// <summary>
    ///  Optional. A user-specified description of the service account.  Must be
    ///  fewer than 100 UTF-8 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "etag" field.</summary>
    public const int EtagFieldNumber = 7;
    private pb::ByteString etag_ = pb::ByteString.Empty;
    /// <summary>
    ///  Used to perform a consistent read-modify-write.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Etag {
      get { return etag_; }
      set {
        etag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oauth2_client_id" field.</summary>
    public const int Oauth2ClientIdFieldNumber = 9;
    private string oauth2ClientId_ = "";
    /// <summary>
    ///  @OutputOnly. The OAuth2 client id for the service account.
    ///  This is used in conjunction with the OAuth2 clientconfig API to make
    ///  three legged OAuth2 (3LO) flows to access the data of Google users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oauth2ClientId {
      get { return oauth2ClientId_; }
      set {
        oauth2ClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ProjectId != other.ProjectId) return false;
      if (UniqueId != other.UniqueId) return false;
      if (Email != other.Email) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Etag != other.Etag) return false;
      if (Oauth2ClientId != other.Oauth2ClientId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Etag.Length != 0) hash ^= Etag.GetHashCode();
      if (Oauth2ClientId.Length != 0) hash ^= Oauth2ClientId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectId);
      }
      if (UniqueId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UniqueId);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Email);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DisplayName);
      }
      if (Etag.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Etag);
      }
      if (Oauth2ClientId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Oauth2ClientId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Etag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Etag);
      }
      if (Oauth2ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oauth2ClientId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceAccount other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Etag.Length != 0) {
        Etag = other.Etag;
      }
      if (other.Oauth2ClientId.Length != 0) {
        Oauth2ClientId = other.Oauth2ClientId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ProjectId = input.ReadString();
            break;
          }
          case 34: {
            UniqueId = input.ReadString();
            break;
          }
          case 42: {
            Email = input.ReadString();
            break;
          }
          case 50: {
            DisplayName = input.ReadString();
            break;
          }
          case 58: {
            Etag = input.ReadBytes();
            break;
          }
          case 74: {
            Oauth2ClientId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account create request.
  /// </summary>
  public sealed partial class CreateServiceAccountRequest : pb::IMessage<CreateServiceAccountRequest> {
    private static readonly pb::MessageParser<CreateServiceAccountRequest> _parser = new pb::MessageParser<CreateServiceAccountRequest>(() => new CreateServiceAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateServiceAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceAccountRequest(CreateServiceAccountRequest other) : this() {
      name_ = other.name_;
      accountId_ = other.accountId_;
      ServiceAccount = other.serviceAccount_ != null ? other.ServiceAccount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceAccountRequest Clone() {
      return new CreateServiceAccountRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Required. The resource name of the project associated with the service
    ///  accounts, such as `projects/my-project-123`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///  Required. The account id that is used to generate the service account
    ///  email address and a stable unique id. It is unique within a project,
    ///  must be 6-30 characters long, and match the regular expression
    ///  `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_account" field.</summary>
    public const int ServiceAccountFieldNumber = 3;
    private global::Google.Iam.Admin.V1.ServiceAccount serviceAccount_;
    /// <summary>
    ///  The [ServiceAccount][google.iam.admin.v1.ServiceAccount] resource to create.
    ///  Currently, only the following values are user assignable:
    ///  `display_name` .
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Iam.Admin.V1.ServiceAccount ServiceAccount {
      get { return serviceAccount_; }
      set {
        serviceAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateServiceAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateServiceAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(ServiceAccount, other.ServiceAccount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (serviceAccount_ != null) hash ^= ServiceAccount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (serviceAccount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServiceAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (serviceAccount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateServiceAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.serviceAccount_ != null) {
        if (serviceAccount_ == null) {
          serviceAccount_ = new global::Google.Iam.Admin.V1.ServiceAccount();
        }
        ServiceAccount.MergeFrom(other.ServiceAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            if (serviceAccount_ == null) {
              serviceAccount_ = new global::Google.Iam.Admin.V1.ServiceAccount();
            }
            input.ReadMessage(serviceAccount_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account list request.
  /// </summary>
  public sealed partial class ListServiceAccountsRequest : pb::IMessage<ListServiceAccountsRequest> {
    private static readonly pb::MessageParser<ListServiceAccountsRequest> _parser = new pb::MessageParser<ListServiceAccountsRequest>(() => new ListServiceAccountsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceAccountsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountsRequest(ListServiceAccountsRequest other) : this() {
      name_ = other.name_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountsRequest Clone() {
      return new ListServiceAccountsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Required. The resource name of the project associated with the service
    ///  accounts, such as `projects/my-project-123`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///  Optional limit on the number of service accounts to include in the
    ///  response. Further accounts can subsequently be obtained by including the
    ///  [ListServiceAccountsResponse.next_page_token][google.iam.admin.v1.ListServiceAccountsResponse.next_page_token]
    ///  in a subsequent request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    ///  Optional pagination token returned in an earlier
    ///  [ListServiceAccountsResponse.next_page_token][google.iam.admin.v1.ListServiceAccountsResponse.next_page_token].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceAccountsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceAccountsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceAccountsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account list response.
  /// </summary>
  public sealed partial class ListServiceAccountsResponse : pb::IMessage<ListServiceAccountsResponse> {
    private static readonly pb::MessageParser<ListServiceAccountsResponse> _parser = new pb::MessageParser<ListServiceAccountsResponse>(() => new ListServiceAccountsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceAccountsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountsResponse(ListServiceAccountsResponse other) : this() {
      accounts_ = other.accounts_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountsResponse Clone() {
      return new ListServiceAccountsResponse(this);
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Iam.Admin.V1.ServiceAccount> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Iam.Admin.V1.ServiceAccount.Parser);
    private readonly pbc::RepeatedField<global::Google.Iam.Admin.V1.ServiceAccount> accounts_ = new pbc::RepeatedField<global::Google.Iam.Admin.V1.ServiceAccount>();
    /// <summary>
    ///  The list of matching service accounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Iam.Admin.V1.ServiceAccount> Accounts {
      get { return accounts_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  To retrieve the next page of results, set
    ///  [ListServiceAccountsRequest.page_token][google.iam.admin.v1.ListServiceAccountsRequest.page_token]
    ///  to this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceAccountsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceAccountsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceAccountsResponse other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account get request.
  /// </summary>
  public sealed partial class GetServiceAccountRequest : pb::IMessage<GetServiceAccountRequest> {
    private static readonly pb::MessageParser<GetServiceAccountRequest> _parser = new pb::MessageParser<GetServiceAccountRequest>(() => new GetServiceAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceAccountRequest(GetServiceAccountRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceAccountRequest Clone() {
      return new GetServiceAccountRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account in the following format:
    ///  `projects/{project}/serviceAccounts/{account}`.
    ///  Using `-` as a wildcard for the project will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account delete request.
  /// </summary>
  public sealed partial class DeleteServiceAccountRequest : pb::IMessage<DeleteServiceAccountRequest> {
    private static readonly pb::MessageParser<DeleteServiceAccountRequest> _parser = new pb::MessageParser<DeleteServiceAccountRequest>(() => new DeleteServiceAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteServiceAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceAccountRequest(DeleteServiceAccountRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceAccountRequest Clone() {
      return new DeleteServiceAccountRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account in the following format:
    ///  `projects/{project}/serviceAccounts/{account}`.
    ///  Using `-` as a wildcard for the project will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteServiceAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteServiceAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteServiceAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account keys list request.
  /// </summary>
  public sealed partial class ListServiceAccountKeysRequest : pb::IMessage<ListServiceAccountKeysRequest> {
    private static readonly pb::MessageParser<ListServiceAccountKeysRequest> _parser = new pb::MessageParser<ListServiceAccountKeysRequest>(() => new ListServiceAccountKeysRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceAccountKeysRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountKeysRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountKeysRequest(ListServiceAccountKeysRequest other) : this() {
      name_ = other.name_;
      keyTypes_ = other.keyTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountKeysRequest Clone() {
      return new ListServiceAccountKeysRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account in the following format:
    ///  `projects/{project}/serviceAccounts/{account}`.
    ///
    ///  Using `-` as a wildcard for the project, will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_types" field.</summary>
    public const int KeyTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Types.KeyType> _repeated_keyTypes_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Types.KeyType) x);
    private readonly pbc::RepeatedField<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Types.KeyType> keyTypes_ = new pbc::RepeatedField<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Types.KeyType>();
    /// <summary>
    ///  Filters the types of keys the user wants to include in the list
    ///  response. Duplicate key types are not allowed. If no key type
    ///  is provided, all keys are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Types.KeyType> KeyTypes {
      get { return keyTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceAccountKeysRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceAccountKeysRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!keyTypes_.Equals(other.keyTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= keyTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      keyTypes_.WriteTo(output, _repeated_keyTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += keyTypes_.CalculateSize(_repeated_keyTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceAccountKeysRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      keyTypes_.Add(other.keyTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            keyTypes_.AddEntriesFrom(input, _repeated_keyTypes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListServiceAccountKeysRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  `KeyType` filters to selectively retrieve certain varieties
      ///  of keys.
      /// </summary>
      public enum KeyType {
        /// <summary>
        ///  Unspecified key type. The presence of this in the
        ///  message will immediately result in an error.
        /// </summary>
        [pbr::OriginalName("KEY_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  User-managed keys (managed and rotated by the user).
        /// </summary>
        [pbr::OriginalName("USER_MANAGED")] UserManaged = 1,
        /// <summary>
        ///  System-managed keys (managed and rotated by Google).
        /// </summary>
        [pbr::OriginalName("SYSTEM_MANAGED")] SystemManaged = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  The service account keys list response.
  /// </summary>
  public sealed partial class ListServiceAccountKeysResponse : pb::IMessage<ListServiceAccountKeysResponse> {
    private static readonly pb::MessageParser<ListServiceAccountKeysResponse> _parser = new pb::MessageParser<ListServiceAccountKeysResponse>(() => new ListServiceAccountKeysResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceAccountKeysResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountKeysResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountKeysResponse(ListServiceAccountKeysResponse other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceAccountKeysResponse Clone() {
      return new ListServiceAccountKeysResponse(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Iam.Admin.V1.ServiceAccountKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Iam.Admin.V1.ServiceAccountKey.Parser);
    private readonly pbc::RepeatedField<global::Google.Iam.Admin.V1.ServiceAccountKey> keys_ = new pbc::RepeatedField<global::Google.Iam.Admin.V1.ServiceAccountKey>();
    /// <summary>
    ///  The public keys for the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Iam.Admin.V1.ServiceAccountKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceAccountKeysResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceAccountKeysResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceAccountKeysResponse other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account key get by id request.
  /// </summary>
  public sealed partial class GetServiceAccountKeyRequest : pb::IMessage<GetServiceAccountKeyRequest> {
    private static readonly pb::MessageParser<GetServiceAccountKeyRequest> _parser = new pb::MessageParser<GetServiceAccountKeyRequest>(() => new GetServiceAccountKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceAccountKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceAccountKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceAccountKeyRequest(GetServiceAccountKeyRequest other) : this() {
      name_ = other.name_;
      publicKeyType_ = other.publicKeyType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceAccountKeyRequest Clone() {
      return new GetServiceAccountKeyRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account key in the following format:
    ///  `projects/{project}/serviceAccounts/{account}/keys/{key}`.
    ///
    ///  Using `-` as a wildcard for the project will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key_type" field.</summary>
    public const int PublicKeyTypeFieldNumber = 2;
    private global::Google.Iam.Admin.V1.ServiceAccountPublicKeyType publicKeyType_ = 0;
    /// <summary>
    ///  The output format of the public key requested.
    ///  X509_PEM is the default output format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Iam.Admin.V1.ServiceAccountPublicKeyType PublicKeyType {
      get { return publicKeyType_; }
      set {
        publicKeyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceAccountKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceAccountKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PublicKeyType != other.PublicKeyType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PublicKeyType != 0) hash ^= PublicKeyType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PublicKeyType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PublicKeyType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PublicKeyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PublicKeyType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceAccountKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PublicKeyType != 0) {
        PublicKeyType = other.PublicKeyType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            publicKeyType_ = (global::Google.Iam.Admin.V1.ServiceAccountPublicKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents a service account key.
  ///
  ///  A service account has two sets of key-pairs: user-managed, and
  ///  system-managed.
  ///
  ///  User-managed key-pairs can be created and deleted by users.  Users are
  ///  responsible for rotating these keys periodically to ensure security of
  ///  their service accounts.  Users retain the private key of these key-pairs,
  ///  and Google retains ONLY the public key.
  ///
  ///  System-managed key-pairs are managed automatically by Google, and rotated
  ///  daily without user intervention.  The private key never leaves Google's
  ///  servers to maximize security.
  ///
  ///  Public keys for all service accounts are also published at the OAuth2
  ///  Service Account API.
  /// </summary>
  public sealed partial class ServiceAccountKey : pb::IMessage<ServiceAccountKey> {
    private static readonly pb::MessageParser<ServiceAccountKey> _parser = new pb::MessageParser<ServiceAccountKey>(() => new ServiceAccountKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceAccountKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAccountKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAccountKey(ServiceAccountKey other) : this() {
      name_ = other.name_;
      privateKeyType_ = other.privateKeyType_;
      keyAlgorithm_ = other.keyAlgorithm_;
      privateKeyData_ = other.privateKeyData_;
      publicKeyData_ = other.publicKeyData_;
      ValidAfterTime = other.validAfterTime_ != null ? other.ValidAfterTime.Clone() : null;
      ValidBeforeTime = other.validBeforeTime_ != null ? other.ValidBeforeTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceAccountKey Clone() {
      return new ServiceAccountKey(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account key in the following format
    ///  `projects/{project}/serviceAccounts/{account}/keys/{key}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key_type" field.</summary>
    public const int PrivateKeyTypeFieldNumber = 2;
    private global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType privateKeyType_ = 0;
    /// <summary>
    ///  The output format for the private key.
    ///  Only provided in `CreateServiceAccountKey` responses, not
    ///  in `GetServiceAccountKey` or `ListServiceAccountKey` responses.
    ///
    ///  Google never exposes system-managed private keys, and never retains
    ///  user-managed private keys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType PrivateKeyType {
      get { return privateKeyType_; }
      set {
        privateKeyType_ = value;
      }
    }

    /// <summary>Field number for the "key_algorithm" field.</summary>
    public const int KeyAlgorithmFieldNumber = 8;
    private global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm keyAlgorithm_ = 0;
    /// <summary>
    ///  Specifies the algorithm (and possibly key size) for the key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm KeyAlgorithm {
      get { return keyAlgorithm_; }
      set {
        keyAlgorithm_ = value;
      }
    }

    /// <summary>Field number for the "private_key_data" field.</summary>
    public const int PrivateKeyDataFieldNumber = 3;
    private pb::ByteString privateKeyData_ = pb::ByteString.Empty;
    /// <summary>
    ///  The private key data. Only provided in `CreateServiceAccountKey`
    ///  responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKeyData {
      get { return privateKeyData_; }
      set {
        privateKeyData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key_data" field.</summary>
    public const int PublicKeyDataFieldNumber = 7;
    private pb::ByteString publicKeyData_ = pb::ByteString.Empty;
    /// <summary>
    ///  The public key data. Only provided in `GetServiceAccountKey` responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKeyData {
      get { return publicKeyData_; }
      set {
        publicKeyData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valid_after_time" field.</summary>
    public const int ValidAfterTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp validAfterTime_;
    /// <summary>
    ///  The key can be used after this timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ValidAfterTime {
      get { return validAfterTime_; }
      set {
        validAfterTime_ = value;
      }
    }

    /// <summary>Field number for the "valid_before_time" field.</summary>
    public const int ValidBeforeTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp validBeforeTime_;
    /// <summary>
    ///  The key can be used before this timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ValidBeforeTime {
      get { return validBeforeTime_; }
      set {
        validBeforeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceAccountKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceAccountKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PrivateKeyType != other.PrivateKeyType) return false;
      if (KeyAlgorithm != other.KeyAlgorithm) return false;
      if (PrivateKeyData != other.PrivateKeyData) return false;
      if (PublicKeyData != other.PublicKeyData) return false;
      if (!object.Equals(ValidAfterTime, other.ValidAfterTime)) return false;
      if (!object.Equals(ValidBeforeTime, other.ValidBeforeTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PrivateKeyType != 0) hash ^= PrivateKeyType.GetHashCode();
      if (KeyAlgorithm != 0) hash ^= KeyAlgorithm.GetHashCode();
      if (PrivateKeyData.Length != 0) hash ^= PrivateKeyData.GetHashCode();
      if (PublicKeyData.Length != 0) hash ^= PublicKeyData.GetHashCode();
      if (validAfterTime_ != null) hash ^= ValidAfterTime.GetHashCode();
      if (validBeforeTime_ != null) hash ^= ValidBeforeTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PrivateKeyType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PrivateKeyType);
      }
      if (PrivateKeyData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PrivateKeyData);
      }
      if (validAfterTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ValidAfterTime);
      }
      if (validBeforeTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ValidBeforeTime);
      }
      if (PublicKeyData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(PublicKeyData);
      }
      if (KeyAlgorithm != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) KeyAlgorithm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PrivateKeyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivateKeyType);
      }
      if (KeyAlgorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyAlgorithm);
      }
      if (PrivateKeyData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKeyData);
      }
      if (PublicKeyData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKeyData);
      }
      if (validAfterTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidAfterTime);
      }
      if (validBeforeTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidBeforeTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceAccountKey other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PrivateKeyType != 0) {
        PrivateKeyType = other.PrivateKeyType;
      }
      if (other.KeyAlgorithm != 0) {
        KeyAlgorithm = other.KeyAlgorithm;
      }
      if (other.PrivateKeyData.Length != 0) {
        PrivateKeyData = other.PrivateKeyData;
      }
      if (other.PublicKeyData.Length != 0) {
        PublicKeyData = other.PublicKeyData;
      }
      if (other.validAfterTime_ != null) {
        if (validAfterTime_ == null) {
          validAfterTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ValidAfterTime.MergeFrom(other.ValidAfterTime);
      }
      if (other.validBeforeTime_ != null) {
        if (validBeforeTime_ == null) {
          validBeforeTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ValidBeforeTime.MergeFrom(other.ValidBeforeTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            privateKeyType_ = (global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType) input.ReadEnum();
            break;
          }
          case 26: {
            PrivateKeyData = input.ReadBytes();
            break;
          }
          case 34: {
            if (validAfterTime_ == null) {
              validAfterTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(validAfterTime_);
            break;
          }
          case 42: {
            if (validBeforeTime_ == null) {
              validBeforeTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(validBeforeTime_);
            break;
          }
          case 58: {
            PublicKeyData = input.ReadBytes();
            break;
          }
          case 64: {
            keyAlgorithm_ = (global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account key create request.
  /// </summary>
  public sealed partial class CreateServiceAccountKeyRequest : pb::IMessage<CreateServiceAccountKeyRequest> {
    private static readonly pb::MessageParser<CreateServiceAccountKeyRequest> _parser = new pb::MessageParser<CreateServiceAccountKeyRequest>(() => new CreateServiceAccountKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateServiceAccountKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceAccountKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceAccountKeyRequest(CreateServiceAccountKeyRequest other) : this() {
      name_ = other.name_;
      privateKeyType_ = other.privateKeyType_;
      keyAlgorithm_ = other.keyAlgorithm_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceAccountKeyRequest Clone() {
      return new CreateServiceAccountKeyRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account in the following format:
    ///  `projects/{project}/serviceAccounts/{account}`.
    ///  Using `-` as a wildcard for the project will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key_type" field.</summary>
    public const int PrivateKeyTypeFieldNumber = 2;
    private global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType privateKeyType_ = 0;
    /// <summary>
    ///  The output format of the private key. `GOOGLE_CREDENTIALS_FILE` is the
    ///  default output format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType PrivateKeyType {
      get { return privateKeyType_; }
      set {
        privateKeyType_ = value;
      }
    }

    /// <summary>Field number for the "key_algorithm" field.</summary>
    public const int KeyAlgorithmFieldNumber = 3;
    private global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm keyAlgorithm_ = 0;
    /// <summary>
    ///  Which type of key and algorithm to use for the key.
    ///  The default is currently a 4K RSA key.  However this may change in the
    ///  future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm KeyAlgorithm {
      get { return keyAlgorithm_; }
      set {
        keyAlgorithm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateServiceAccountKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateServiceAccountKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PrivateKeyType != other.PrivateKeyType) return false;
      if (KeyAlgorithm != other.KeyAlgorithm) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PrivateKeyType != 0) hash ^= PrivateKeyType.GetHashCode();
      if (KeyAlgorithm != 0) hash ^= KeyAlgorithm.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PrivateKeyType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PrivateKeyType);
      }
      if (KeyAlgorithm != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) KeyAlgorithm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PrivateKeyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivateKeyType);
      }
      if (KeyAlgorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyAlgorithm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateServiceAccountKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PrivateKeyType != 0) {
        PrivateKeyType = other.PrivateKeyType;
      }
      if (other.KeyAlgorithm != 0) {
        KeyAlgorithm = other.KeyAlgorithm;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            privateKeyType_ = (global::Google.Iam.Admin.V1.ServiceAccountPrivateKeyType) input.ReadEnum();
            break;
          }
          case 24: {
            keyAlgorithm_ = (global::Google.Iam.Admin.V1.ServiceAccountKeyAlgorithm) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account key delete request.
  /// </summary>
  public sealed partial class DeleteServiceAccountKeyRequest : pb::IMessage<DeleteServiceAccountKeyRequest> {
    private static readonly pb::MessageParser<DeleteServiceAccountKeyRequest> _parser = new pb::MessageParser<DeleteServiceAccountKeyRequest>(() => new DeleteServiceAccountKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteServiceAccountKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceAccountKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceAccountKeyRequest(DeleteServiceAccountKeyRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceAccountKeyRequest Clone() {
      return new DeleteServiceAccountKeyRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account key in the following format:
    ///  `projects/{project}/serviceAccounts/{account}/keys/{key}`.
    ///  Using `-` as a wildcard for the project will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteServiceAccountKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteServiceAccountKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteServiceAccountKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account sign blob request.
  /// </summary>
  public sealed partial class SignBlobRequest : pb::IMessage<SignBlobRequest> {
    private static readonly pb::MessageParser<SignBlobRequest> _parser = new pb::MessageParser<SignBlobRequest>(() => new SignBlobRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignBlobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignBlobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignBlobRequest(SignBlobRequest other) : this() {
      name_ = other.name_;
      bytesToSign_ = other.bytesToSign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignBlobRequest Clone() {
      return new SignBlobRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The resource name of the service account in the following format:
    ///  `projects/{project}/serviceAccounts/{account}`.
    ///  Using `-` as a wildcard for the project will infer the project from
    ///  the account. The `account` value can be the `email` address or the
    ///  `unique_id` of the service account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_to_sign" field.</summary>
    public const int BytesToSignFieldNumber = 2;
    private pb::ByteString bytesToSign_ = pb::ByteString.Empty;
    /// <summary>
    ///  The bytes to sign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesToSign {
      get { return bytesToSign_; }
      set {
        bytesToSign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignBlobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignBlobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (BytesToSign != other.BytesToSign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BytesToSign.Length != 0) hash ^= BytesToSign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (BytesToSign.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BytesToSign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BytesToSign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesToSign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignBlobRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BytesToSign.Length != 0) {
        BytesToSign = other.BytesToSign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            BytesToSign = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The service account sign blob response.
  /// </summary>
  public sealed partial class SignBlobResponse : pb::IMessage<SignBlobResponse> {
    private static readonly pb::MessageParser<SignBlobResponse> _parser = new pb::MessageParser<SignBlobResponse>(() => new SignBlobResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignBlobResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignBlobResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignBlobResponse(SignBlobResponse other) : this() {
      keyId_ = other.keyId_;
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignBlobResponse Clone() {
      return new SignBlobResponse(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    ///  The id of the key used to sign the blob.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  The signed blob.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignBlobResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignBlobResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignBlobResponse other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A role in the Identity and Access Management API.
  /// </summary>
  public sealed partial class Role : pb::IMessage<Role> {
    private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Role> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role(Role other) : this() {
      name_ = other.name_;
      title_ = other.title_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Role Clone() {
      return new Role(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The name of the role.
    ///
    ///  When Role is used in CreateRole, the role name must not be set.
    ///
    ///  When Role is used in output and other input such as UpdateRole, the role
    ///  name is the complete path, e.g., roles/logging.viewer for curated roles
    ///  and organizations/{organization-id}/roles/logging.viewer for custom roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    ///  Optional.  A human-readable title for the role.  Typically this
    ///  is limited to 100 UTF-8 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///  Optional.  A human-readable description for the role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Role);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Role other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Role other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The grantable role query request.
  /// </summary>
  public sealed partial class QueryGrantableRolesRequest : pb::IMessage<QueryGrantableRolesRequest> {
    private static readonly pb::MessageParser<QueryGrantableRolesRequest> _parser = new pb::MessageParser<QueryGrantableRolesRequest>(() => new QueryGrantableRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryGrantableRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGrantableRolesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGrantableRolesRequest(QueryGrantableRolesRequest other) : this() {
      fullResourceName_ = other.fullResourceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGrantableRolesRequest Clone() {
      return new QueryGrantableRolesRequest(this);
    }

    /// <summary>Field number for the "full_resource_name" field.</summary>
    public const int FullResourceNameFieldNumber = 1;
    private string fullResourceName_ = "";
    /// <summary>
    ///  Required. The full resource name to query from the list of grantable roles.
    ///
    ///  The name follows the Google Cloud Platform resource format.
    ///  For example, a Cloud Platform project with id `my-project` will be named
    ///  `//cloudresourcemanager.googleapis.com/projects/my-project`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullResourceName {
      get { return fullResourceName_; }
      set {
        fullResourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryGrantableRolesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryGrantableRolesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FullResourceName != other.FullResourceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FullResourceName.Length != 0) hash ^= FullResourceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FullResourceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FullResourceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FullResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullResourceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryGrantableRolesRequest other) {
      if (other == null) {
        return;
      }
      if (other.FullResourceName.Length != 0) {
        FullResourceName = other.FullResourceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FullResourceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The grantable role query response.
  /// </summary>
  public sealed partial class QueryGrantableRolesResponse : pb::IMessage<QueryGrantableRolesResponse> {
    private static readonly pb::MessageParser<QueryGrantableRolesResponse> _parser = new pb::MessageParser<QueryGrantableRolesResponse>(() => new QueryGrantableRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryGrantableRolesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGrantableRolesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGrantableRolesResponse(QueryGrantableRolesResponse other) : this() {
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGrantableRolesResponse Clone() {
      return new QueryGrantableRolesResponse(this);
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Iam.Admin.V1.Role> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Iam.Admin.V1.Role.Parser);
    private readonly pbc::RepeatedField<global::Google.Iam.Admin.V1.Role> roles_ = new pbc::RepeatedField<global::Google.Iam.Admin.V1.Role>();
    /// <summary>
    ///  The list of matching roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Iam.Admin.V1.Role> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryGrantableRolesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryGrantableRolesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryGrantableRolesResponse other) {
      if (other == null) {
        return;
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
