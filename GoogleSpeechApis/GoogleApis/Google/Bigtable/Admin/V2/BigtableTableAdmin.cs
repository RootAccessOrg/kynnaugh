// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/bigtable_table_admin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Bigtable.Admin.V2 {

  /// <summary>Holder for reflection information generated from google/bigtable/admin/v2/bigtable_table_admin.proto</summary>
  public static partial class BigtableTableAdminReflection {

    #region Descriptor
    /// <summary>File descriptor for google/bigtable/admin/v2/bigtable_table_admin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BigtableTableAdminReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNnb29nbGUvYmlndGFibGUvYWRtaW4vdjIvYmlndGFibGVfdGFibGVfYWRt",
            "aW4ucHJvdG8SGGdvb2dsZS5iaWd0YWJsZS5hZG1pbi52MhocZ29vZ2xlL2Fw",
            "aS9hbm5vdGF0aW9ucy5wcm90bxokZ29vZ2xlL2JpZ3RhYmxlL2FkbWluL3Yy",
            "L3RhYmxlLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8iyAEK",
            "EkNyZWF0ZVRhYmxlUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSEAoIdGFibGVf",
            "aWQYAiABKAkSLgoFdGFibGUYAyABKAsyHy5nb29nbGUuYmlndGFibGUuYWRt",
            "aW4udjIuVGFibGUSSgoOaW5pdGlhbF9zcGxpdHMYBCADKAsyMi5nb29nbGUu",
            "YmlndGFibGUuYWRtaW4udjIuQ3JlYXRlVGFibGVSZXF1ZXN0LlNwbGl0GhQK",
            "BVNwbGl0EgsKA2tleRgBIAEoDCJtChNEcm9wUm93UmFuZ2VSZXF1ZXN0EgwK",
            "BG5hbWUYASABKAkSGAoOcm93X2tleV9wcmVmaXgYAiABKAxIABIkChpkZWxl",
            "dGVfYWxsX2RhdGFfZnJvbV90YWJsZRgDIAEoCEgAQggKBnRhcmdldCJrChFM",
            "aXN0VGFibGVzUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSMgoEdmlldxgCIAEo",
            "DjIkLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5UYWJsZS5WaWV3EhIKCnBh",
            "Z2VfdG9rZW4YAyABKAkiXgoSTGlzdFRhYmxlc1Jlc3BvbnNlEi8KBnRhYmxl",
            "cxgBIAMoCzIfLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5UYWJsZRIXCg9u",
            "ZXh0X3BhZ2VfdG9rZW4YAiABKAkiUwoPR2V0VGFibGVSZXF1ZXN0EgwKBG5h",
            "bWUYASABKAkSMgoEdmlldxgCIAEoDjIkLmdvb2dsZS5iaWd0YWJsZS5hZG1p",
            "bi52Mi5UYWJsZS5WaWV3IiIKEkRlbGV0ZVRhYmxlUmVxdWVzdBIMCgRuYW1l",
            "GAEgASgJIq4CChtNb2RpZnlDb2x1bW5GYW1pbGllc1JlcXVlc3QSDAoEbmFt",
            "ZRgBIAEoCRJZCg1tb2RpZmljYXRpb25zGAIgAygLMkIuZ29vZ2xlLmJpZ3Rh",
            "YmxlLmFkbWluLnYyLk1vZGlmeUNvbHVtbkZhbWlsaWVzUmVxdWVzdC5Nb2Rp",
            "ZmljYXRpb24apQEKDE1vZGlmaWNhdGlvbhIKCgJpZBgBIAEoCRI4CgZjcmVh",
            "dGUYAiABKAsyJi5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuQ29sdW1uRmFt",
            "aWx5SAASOAoGdXBkYXRlGAMgASgLMiYuZ29vZ2xlLmJpZ3RhYmxlLmFkbWlu",
            "LnYyLkNvbHVtbkZhbWlseUgAEg4KBGRyb3AYBCABKAhIAEIFCgNtb2QyuAcK",
            "EkJpZ3RhYmxlVGFibGVBZG1pbhKTAQoLQ3JlYXRlVGFibGUSLC5nb29nbGUu",
            "YmlndGFibGUuYWRtaW4udjIuQ3JlYXRlVGFibGVSZXF1ZXN0Gh8uZ29vZ2xl",
            "LmJpZ3RhYmxlLmFkbWluLnYyLlRhYmxlIjWC0+STAi8iKi92Mi97cGFyZW50",
            "PXByb2plY3RzLyovaW5zdGFuY2VzLyp9L3RhYmxlczoBKhKbAQoKTGlzdFRh",
            "YmxlcxIrLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5MaXN0VGFibGVzUmVx",
            "dWVzdBosLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5MaXN0VGFibGVzUmVz",
            "cG9uc2UiMoLT5JMCLBIqL3YyL3twYXJlbnQ9cHJvamVjdHMvKi9pbnN0YW5j",
            "ZXMvKn0vdGFibGVzEooBCghHZXRUYWJsZRIpLmdvb2dsZS5iaWd0YWJsZS5h",
            "ZG1pbi52Mi5HZXRUYWJsZVJlcXVlc3QaHy5nb29nbGUuYmlndGFibGUuYWRt",
            "aW4udjIuVGFibGUiMoLT5JMCLBIqL3YyL3tuYW1lPXByb2plY3RzLyovaW5z",
            "dGFuY2VzLyovdGFibGVzLyp9EocBCgtEZWxldGVUYWJsZRIsLmdvb2dsZS5i",
            "aWd0YWJsZS5hZG1pbi52Mi5EZWxldGVUYWJsZVJlcXVlc3QaFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkiMoLT5JMCLCoqL3YyL3tuYW1lPXByb2plY3RzLyov",
            "aW5zdGFuY2VzLyovdGFibGVzLyp9EroBChRNb2RpZnlDb2x1bW5GYW1pbGll",
            "cxI1Lmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5Nb2RpZnlDb2x1bW5GYW1p",
            "bGllc1JlcXVlc3QaHy5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuVGFibGUi",
            "SoLT5JMCRCI/L3YyL3tuYW1lPXByb2plY3RzLyovaW5zdGFuY2VzLyovdGFi",
            "bGVzLyp9Om1vZGlmeUNvbHVtbkZhbWlsaWVzOgEqEpkBCgxEcm9wUm93UmFu",
            "Z2USLS5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuRHJvcFJvd1JhbmdlUmVx",
            "dWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJCgtPkkwI8IjcvdjIve25h",
            "bWU9cHJvamVjdHMvKi9pbnN0YW5jZXMvKi90YWJsZXMvKn06ZHJvcFJvd1Jh",
            "bmdlOgEqQngKHGNvbS5nb29nbGUuYmlndGFibGUuYWRtaW4udjJCF0JpZ3Rh",
            "YmxlVGFibGVBZG1pblByb3RvUAFaPWdvb2dsZS5nb2xhbmcub3JnL2dlbnBy",
            "b3RvL2dvb2dsZWFwaXMvYmlndGFibGUvYWRtaW4vdjI7YWRtaW5iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Bigtable.Admin.V2.TableReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.CreateTableRequest), global::Google.Bigtable.Admin.V2.CreateTableRequest.Parser, new[]{ "Parent", "TableId", "Table", "InitialSplits" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split), global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split.Parser, new[]{ "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.DropRowRangeRequest), global::Google.Bigtable.Admin.V2.DropRowRangeRequest.Parser, new[]{ "Name", "RowKeyPrefix", "DeleteAllDataFromTable" }, new[]{ "Target" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.ListTablesRequest), global::Google.Bigtable.Admin.V2.ListTablesRequest.Parser, new[]{ "Parent", "View", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.ListTablesResponse), global::Google.Bigtable.Admin.V2.ListTablesResponse.Parser, new[]{ "Tables", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.GetTableRequest), global::Google.Bigtable.Admin.V2.GetTableRequest.Parser, new[]{ "Name", "View" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.DeleteTableRequest), global::Google.Bigtable.Admin.V2.DeleteTableRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest), global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Parser, new[]{ "Name", "Modifications" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification), global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification.Parser, new[]{ "Id", "Create", "Update", "Drop" }, new[]{ "Mod" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request message for [google.bigtable.admin.v2.BigtableTableAdmin.CreateTable][google.bigtable.admin.v2.BigtableTableAdmin.CreateTable]
  /// </summary>
  public sealed partial class CreateTableRequest : pb::IMessage<CreateTableRequest> {
    private static readonly pb::MessageParser<CreateTableRequest> _parser = new pb::MessageParser<CreateTableRequest>(() => new CreateTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTableRequest(CreateTableRequest other) : this() {
      parent_ = other.parent_;
      tableId_ = other.tableId_;
      Table = other.table_ != null ? other.Table.Clone() : null;
      initialSplits_ = other.initialSplits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTableRequest Clone() {
      return new CreateTableRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    ///  The unique name of the instance in which to create the table.
    ///  Values are of the form projects/&lt;project>/instances/&lt;instance>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    /// <summary>
    ///  The name by which the new table should be referred to within the parent
    ///  instance, e.g. "foobar" rather than "&lt;parent>/tables/foobar".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 3;
    private global::Google.Bigtable.Admin.V2.Table table_;
    /// <summary>
    ///  The Table to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.Table Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "initial_splits" field.</summary>
    public const int InitialSplitsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split> _repeated_initialSplits_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split> initialSplits_ = new pbc::RepeatedField<global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split>();
    /// <summary>
    ///  The optional list of row keys that will be used to initially split the
    ///  table into several tablets (Tablets are similar to HBase regions).
    ///  Given two split keys, "s1" and "s2", three tablets will be created,
    ///  spanning the key ranges: [, s1), [s1, s2), [s2, ).
    ///
    ///  Example:
    ///   * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
    ///                  "other", "zz"]
    ///   * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
    ///   * Key assignment:
    ///     - Tablet 1 [, apple)                => {"a"}.
    ///     - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
    ///     - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
    ///     - Tablet 4 [customer_2, other)      => {"customer_2"}.
    ///     - Tablet 5 [other, )                => {"other", "zz"}.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.Admin.V2.CreateTableRequest.Types.Split> InitialSplits {
      get { return initialSplits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (TableId != other.TableId) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if(!initialSplits_.Equals(other.initialSplits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      hash ^= initialSplits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (table_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Table);
      }
      initialSplits_.WriteTo(output, _repeated_initialSplits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      size += initialSplits_.CalculateSize(_repeated_initialSplits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::Google.Bigtable.Admin.V2.Table();
        }
        Table.MergeFrom(other.Table);
      }
      initialSplits_.Add(other.initialSplits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 26: {
            if (table_ == null) {
              table_ = new global::Google.Bigtable.Admin.V2.Table();
            }
            input.ReadMessage(table_);
            break;
          }
          case 34: {
            initialSplits_.AddEntriesFrom(input, _repeated_initialSplits_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreateTableRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  An initial split point for a newly created table.
      /// </summary>
      public sealed partial class Split : pb::IMessage<Split> {
        private static readonly pb::MessageParser<Split> _parser = new pb::MessageParser<Split>(() => new Split());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Split> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.Admin.V2.CreateTableRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Split() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Split(Split other) : this() {
          key_ = other.key_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Split Clone() {
          return new Split(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private pb::ByteString key_ = pb::ByteString.Empty;
        /// <summary>
        ///  Row key to use as an initial tablet boundary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Split);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Split other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Key);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Split other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Key = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  Request message for [google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange][google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange]
  /// </summary>
  public sealed partial class DropRowRangeRequest : pb::IMessage<DropRowRangeRequest> {
    private static readonly pb::MessageParser<DropRowRangeRequest> _parser = new pb::MessageParser<DropRowRangeRequest>(() => new DropRowRangeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropRowRangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropRowRangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropRowRangeRequest(DropRowRangeRequest other) : this() {
      name_ = other.name_;
      switch (other.TargetCase) {
        case TargetOneofCase.RowKeyPrefix:
          RowKeyPrefix = other.RowKeyPrefix;
          break;
        case TargetOneofCase.DeleteAllDataFromTable:
          DeleteAllDataFromTable = other.DeleteAllDataFromTable;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropRowRangeRequest Clone() {
      return new DropRowRangeRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the table on which to drop a range of rows.
    ///  Values are of the form projects/&lt;project>/instances/&lt;instance>/tables/&lt;table>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_key_prefix" field.</summary>
    public const int RowKeyPrefixFieldNumber = 2;
    /// <summary>
    ///  Delete all rows that start with this row key prefix. Prefix cannot be
    ///  zero length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKeyPrefix {
      get { return targetCase_ == TargetOneofCase.RowKeyPrefix ? (pb::ByteString) target_ : pb::ByteString.Empty; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetCase_ = TargetOneofCase.RowKeyPrefix;
      }
    }

    /// <summary>Field number for the "delete_all_data_from_table" field.</summary>
    public const int DeleteAllDataFromTableFieldNumber = 3;
    /// <summary>
    ///  Delete all rows in the table. Setting this to false is a no-op.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteAllDataFromTable {
      get { return targetCase_ == TargetOneofCase.DeleteAllDataFromTable ? (bool) target_ : false; }
      set {
        target_ = value;
        targetCase_ = TargetOneofCase.DeleteAllDataFromTable;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      RowKeyPrefix = 2,
      DeleteAllDataFromTable = 3,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropRowRangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropRowRangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (RowKeyPrefix != other.RowKeyPrefix) return false;
      if (DeleteAllDataFromTable != other.DeleteAllDataFromTable) return false;
      if (TargetCase != other.TargetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (targetCase_ == TargetOneofCase.RowKeyPrefix) hash ^= RowKeyPrefix.GetHashCode();
      if (targetCase_ == TargetOneofCase.DeleteAllDataFromTable) hash ^= DeleteAllDataFromTable.GetHashCode();
      hash ^= (int) targetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (targetCase_ == TargetOneofCase.RowKeyPrefix) {
        output.WriteRawTag(18);
        output.WriteBytes(RowKeyPrefix);
      }
      if (targetCase_ == TargetOneofCase.DeleteAllDataFromTable) {
        output.WriteRawTag(24);
        output.WriteBool(DeleteAllDataFromTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (targetCase_ == TargetOneofCase.RowKeyPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKeyPrefix);
      }
      if (targetCase_ == TargetOneofCase.DeleteAllDataFromTable) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropRowRangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.RowKeyPrefix:
          RowKeyPrefix = other.RowKeyPrefix;
          break;
        case TargetOneofCase.DeleteAllDataFromTable:
          DeleteAllDataFromTable = other.DeleteAllDataFromTable;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            RowKeyPrefix = input.ReadBytes();
            break;
          }
          case 24: {
            DeleteAllDataFromTable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
  /// </summary>
  public sealed partial class ListTablesRequest : pb::IMessage<ListTablesRequest> {
    private static readonly pb::MessageParser<ListTablesRequest> _parser = new pb::MessageParser<ListTablesRequest>(() => new ListTablesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTablesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesRequest(ListTablesRequest other) : this() {
      parent_ = other.parent_;
      view_ = other.view_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesRequest Clone() {
      return new ListTablesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    ///  The unique name of the instance for which tables should be listed.
    ///  Values are of the form projects/&lt;project>/instances/&lt;instance>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 2;
    private global::Google.Bigtable.Admin.V2.Table.Types.View view_ = 0;
    /// <summary>
    ///  The view to be applied to the returned tables' fields.
    ///  Defaults to NAME_ONLY if unspecified (no others are currently supported).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.Table.Types.View View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    ///  The value of `next_page_token` returned by a previous call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTablesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTablesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (View != other.View) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (View != 0) hash ^= View.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (View != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) View);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (View != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTablesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.View != 0) {
        View = other.View;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 16: {
            view_ = (global::Google.Bigtable.Admin.V2.Table.Types.View) input.ReadEnum();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
  /// </summary>
  public sealed partial class ListTablesResponse : pb::IMessage<ListTablesResponse> {
    private static readonly pb::MessageParser<ListTablesResponse> _parser = new pb::MessageParser<ListTablesResponse>(() => new ListTablesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTablesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesResponse(ListTablesResponse other) : this() {
      tables_ = other.tables_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesResponse Clone() {
      return new ListTablesResponse(this);
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Bigtable.Admin.V2.Table> _repeated_tables_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Bigtable.Admin.V2.Table.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.Admin.V2.Table> tables_ = new pbc::RepeatedField<global::Google.Bigtable.Admin.V2.Table>();
    /// <summary>
    ///  The tables present in the requested cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.Admin.V2.Table> Tables {
      get { return tables_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  Set if not all tables could be returned in a single response.
    ///  Pass this value to `page_token` in another request to get the next
    ///  page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTablesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTablesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tables_.Equals(other.tables_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tables_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tables_.WriteTo(output, _repeated_tables_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tables_.CalculateSize(_repeated_tables_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTablesResponse other) {
      if (other == null) {
        return;
      }
      tables_.Add(other.tables_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tables_.AddEntriesFrom(input, _repeated_tables_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for [google.bigtable.admin.v2.BigtableTableAdmin.GetTable][google.bigtable.admin.v2.BigtableTableAdmin.GetTable]
  /// </summary>
  public sealed partial class GetTableRequest : pb::IMessage<GetTableRequest> {
    private static readonly pb::MessageParser<GetTableRequest> _parser = new pb::MessageParser<GetTableRequest>(() => new GetTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTableRequest(GetTableRequest other) : this() {
      name_ = other.name_;
      view_ = other.view_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTableRequest Clone() {
      return new GetTableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the requested table.
    ///  Values are of the form projects/&lt;project>/instances/&lt;instance>/tables/&lt;table>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 2;
    private global::Google.Bigtable.Admin.V2.Table.Types.View view_ = 0;
    /// <summary>
    ///  The view to be applied to the returned table's fields.
    ///  Defaults to SCHEMA_ONLY if unspecified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.Table.Types.View View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (View != other.View) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (View != 0) hash ^= View.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (View != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) View);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (View != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.View != 0) {
        View = other.View;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            view_ = (global::Google.Bigtable.Admin.V2.Table.Types.View) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for [google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable][google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable]
  /// </summary>
  public sealed partial class DeleteTableRequest : pb::IMessage<DeleteTableRequest> {
    private static readonly pb::MessageParser<DeleteTableRequest> _parser = new pb::MessageParser<DeleteTableRequest>(() => new DeleteTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTableRequest(DeleteTableRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTableRequest Clone() {
      return new DeleteTableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the table to be deleted.
    ///  Values are of the form projects/&lt;project>/instances/&lt;instance>/tables/&lt;table>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for [google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies][google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies]
  /// </summary>
  public sealed partial class ModifyColumnFamiliesRequest : pb::IMessage<ModifyColumnFamiliesRequest> {
    private static readonly pb::MessageParser<ModifyColumnFamiliesRequest> _parser = new pb::MessageParser<ModifyColumnFamiliesRequest>(() => new ModifyColumnFamiliesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyColumnFamiliesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyColumnFamiliesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyColumnFamiliesRequest(ModifyColumnFamiliesRequest other) : this() {
      name_ = other.name_;
      modifications_ = other.modifications_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyColumnFamiliesRequest Clone() {
      return new ModifyColumnFamiliesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the table whose families should be modified.
    ///  Values are of the form projects/&lt;project>/instances/&lt;instance>/tables/&lt;table>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modifications" field.</summary>
    public const int ModificationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification> _repeated_modifications_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification> modifications_ = new pbc::RepeatedField<global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification>();
    /// <summary>
    ///  Modifications to be atomically applied to the specified table's families.
    ///  Entries are applied in order, meaning that earlier modifications can be
    ///  masked by later ones (in the case of repeated updates to the same family,
    ///  for example).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Types.Modification> Modifications {
      get { return modifications_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyColumnFamiliesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyColumnFamiliesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!modifications_.Equals(other.modifications_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= modifications_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      modifications_.WriteTo(output, _repeated_modifications_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += modifications_.CalculateSize(_repeated_modifications_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyColumnFamiliesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      modifications_.Add(other.modifications_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            modifications_.AddEntriesFrom(input, _repeated_modifications_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ModifyColumnFamiliesRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  A create, update, or delete of a particular column family.
      /// </summary>
      public sealed partial class Modification : pb::IMessage<Modification> {
        private static readonly pb::MessageParser<Modification> _parser = new pb::MessageParser<Modification>(() => new Modification());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Modification> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Modification() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Modification(Modification other) : this() {
          id_ = other.id_;
          switch (other.ModCase) {
            case ModOneofCase.Create:
              Create = other.Create.Clone();
              break;
            case ModOneofCase.Update:
              Update = other.Update.Clone();
              break;
            case ModOneofCase.Drop:
              Drop = other.Drop;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Modification Clone() {
          return new Modification(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        ///  The ID of the column family to be modified.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "create" field.</summary>
        public const int CreateFieldNumber = 2;
        /// <summary>
        ///  Create a new column family with the specified schema, or fail if
        ///  one already exists with the given ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Bigtable.Admin.V2.ColumnFamily Create {
          get { return modCase_ == ModOneofCase.Create ? (global::Google.Bigtable.Admin.V2.ColumnFamily) mod_ : null; }
          set {
            mod_ = value;
            modCase_ = value == null ? ModOneofCase.None : ModOneofCase.Create;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 3;
        /// <summary>
        ///  Update an existing column family to the specified schema, or fail
        ///  if no column family exists with the given ID.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Bigtable.Admin.V2.ColumnFamily Update {
          get { return modCase_ == ModOneofCase.Update ? (global::Google.Bigtable.Admin.V2.ColumnFamily) mod_ : null; }
          set {
            mod_ = value;
            modCase_ = value == null ? ModOneofCase.None : ModOneofCase.Update;
          }
        }

        /// <summary>Field number for the "drop" field.</summary>
        public const int DropFieldNumber = 4;
        /// <summary>
        ///  Drop (delete) the column family with the given ID, or fail if no such
        ///  family exists.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Drop {
          get { return modCase_ == ModOneofCase.Drop ? (bool) mod_ : false; }
          set {
            mod_ = value;
            modCase_ = ModOneofCase.Drop;
          }
        }

        private object mod_;
        /// <summary>Enum of possible cases for the "mod" oneof.</summary>
        public enum ModOneofCase {
          None = 0,
          Create = 2,
          Update = 3,
          Drop = 4,
        }
        private ModOneofCase modCase_ = ModOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ModOneofCase ModCase {
          get { return modCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMod() {
          modCase_ = ModOneofCase.None;
          mod_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Modification);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Modification other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(Create, other.Create)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          if (Drop != other.Drop) return false;
          if (ModCase != other.ModCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (modCase_ == ModOneofCase.Create) hash ^= Create.GetHashCode();
          if (modCase_ == ModOneofCase.Update) hash ^= Update.GetHashCode();
          if (modCase_ == ModOneofCase.Drop) hash ^= Drop.GetHashCode();
          hash ^= (int) modCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (modCase_ == ModOneofCase.Create) {
            output.WriteRawTag(18);
            output.WriteMessage(Create);
          }
          if (modCase_ == ModOneofCase.Update) {
            output.WriteRawTag(26);
            output.WriteMessage(Update);
          }
          if (modCase_ == ModOneofCase.Drop) {
            output.WriteRawTag(32);
            output.WriteBool(Drop);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (modCase_ == ModOneofCase.Create) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Create);
          }
          if (modCase_ == ModOneofCase.Update) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (modCase_ == ModOneofCase.Drop) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Modification other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          switch (other.ModCase) {
            case ModOneofCase.Create:
              Create = other.Create;
              break;
            case ModOneofCase.Update:
              Update = other.Update;
              break;
            case ModOneofCase.Drop:
              Drop = other.Drop;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                global::Google.Bigtable.Admin.V2.ColumnFamily subBuilder = new global::Google.Bigtable.Admin.V2.ColumnFamily();
                if (modCase_ == ModOneofCase.Create) {
                  subBuilder.MergeFrom(Create);
                }
                input.ReadMessage(subBuilder);
                Create = subBuilder;
                break;
              }
              case 26: {
                global::Google.Bigtable.Admin.V2.ColumnFamily subBuilder = new global::Google.Bigtable.Admin.V2.ColumnFamily();
                if (modCase_ == ModOneofCase.Update) {
                  subBuilder.MergeFrom(Update);
                }
                input.ReadMessage(subBuilder);
                Update = subBuilder;
                break;
              }
              case 32: {
                Drop = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
