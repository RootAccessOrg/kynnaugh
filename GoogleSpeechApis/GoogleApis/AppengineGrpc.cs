// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/appengine.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Appengine.V1 {
  /// <summary>
  ///  Manages instances of a version.
  /// </summary>
  public static class Instances
  {
    static readonly string __ServiceName = "google.appengine.v1.Instances";

    static readonly Marshaller<global::Google.Appengine.V1.ListInstancesRequest> __Marshaller_ListInstancesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.ListInstancesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.ListInstancesResponse> __Marshaller_ListInstancesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.ListInstancesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.GetInstanceRequest> __Marshaller_GetInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.GetInstanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.Instance> __Marshaller_Instance = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.Instance.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.DeleteInstanceRequest> __Marshaller_DeleteInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.DeleteInstanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.DebugInstanceRequest> __Marshaller_DebugInstanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.DebugInstanceRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Appengine.V1.ListInstancesRequest, global::Google.Appengine.V1.ListInstancesResponse> __Method_ListInstances = new Method<global::Google.Appengine.V1.ListInstancesRequest, global::Google.Appengine.V1.ListInstancesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListInstances",
        __Marshaller_ListInstancesRequest,
        __Marshaller_ListInstancesResponse);

    static readonly Method<global::Google.Appengine.V1.GetInstanceRequest, global::Google.Appengine.V1.Instance> __Method_GetInstance = new Method<global::Google.Appengine.V1.GetInstanceRequest, global::Google.Appengine.V1.Instance>(
        MethodType.Unary,
        __ServiceName,
        "GetInstance",
        __Marshaller_GetInstanceRequest,
        __Marshaller_Instance);

    static readonly Method<global::Google.Appengine.V1.DeleteInstanceRequest, global::Google.LongRunning.Operation> __Method_DeleteInstance = new Method<global::Google.Appengine.V1.DeleteInstanceRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteInstance",
        __Marshaller_DeleteInstanceRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Appengine.V1.DebugInstanceRequest, global::Google.LongRunning.Operation> __Method_DebugInstance = new Method<global::Google.Appengine.V1.DebugInstanceRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DebugInstance",
        __Marshaller_DebugInstanceRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Appengine.V1.AppengineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Instances</summary>
    public abstract class InstancesBase
    {
      /// <summary>
      ///  Lists the instances of a version.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.ListInstancesResponse> ListInstances(global::Google.Appengine.V1.ListInstancesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets instance information.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.Instance> GetInstance(global::Google.Appengine.V1.GetInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Stops a running instance.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteInstance(global::Google.Appengine.V1.DeleteInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Enables debugging on a VM instance. This allows you to use the SSH
      ///  command to connect to the virtual machine where the instance lives.
      ///  While in "debug mode", the instance continues to serve live traffic.
      ///  You should delete the instance when you are done debugging and then
      ///  allow the system to take over and determine if another instance
      ///  should be started.
      ///
      ///  Only applicable for instances in App Engine flexible environment.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DebugInstance(global::Google.Appengine.V1.DebugInstanceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Instances</summary>
    public class InstancesClient : ClientBase<InstancesClient>
    {
      /// <summary>Creates a new client for Instances</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstancesClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Instances that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstancesClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstancesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstancesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists the instances of a version.
      /// </summary>
      public virtual global::Google.Appengine.V1.ListInstancesResponse ListInstances(global::Google.Appengine.V1.ListInstancesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListInstances(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the instances of a version.
      /// </summary>
      public virtual global::Google.Appengine.V1.ListInstancesResponse ListInstances(global::Google.Appengine.V1.ListInstancesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      ///  Lists the instances of a version.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.ListInstancesResponse> ListInstancesAsync(global::Google.Appengine.V1.ListInstancesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListInstancesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the instances of a version.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.ListInstancesResponse> ListInstancesAsync(global::Google.Appengine.V1.ListInstancesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      ///  Gets instance information.
      /// </summary>
      public virtual global::Google.Appengine.V1.Instance GetInstance(global::Google.Appengine.V1.GetInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets instance information.
      /// </summary>
      public virtual global::Google.Appengine.V1.Instance GetInstance(global::Google.Appengine.V1.GetInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      ///  Gets instance information.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Instance> GetInstanceAsync(global::Google.Appengine.V1.GetInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets instance information.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Instance> GetInstanceAsync(global::Google.Appengine.V1.GetInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      ///  Stops a running instance.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteInstance(global::Google.Appengine.V1.DeleteInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Stops a running instance.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteInstance(global::Google.Appengine.V1.DeleteInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInstance, null, options, request);
      }
      /// <summary>
      ///  Stops a running instance.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteInstanceAsync(global::Google.Appengine.V1.DeleteInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Stops a running instance.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteInstanceAsync(global::Google.Appengine.V1.DeleteInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInstance, null, options, request);
      }
      /// <summary>
      ///  Enables debugging on a VM instance. This allows you to use the SSH
      ///  command to connect to the virtual machine where the instance lives.
      ///  While in "debug mode", the instance continues to serve live traffic.
      ///  You should delete the instance when you are done debugging and then
      ///  allow the system to take over and determine if another instance
      ///  should be started.
      ///
      ///  Only applicable for instances in App Engine flexible environment.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DebugInstance(global::Google.Appengine.V1.DebugInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DebugInstance(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Enables debugging on a VM instance. This allows you to use the SSH
      ///  command to connect to the virtual machine where the instance lives.
      ///  While in "debug mode", the instance continues to serve live traffic.
      ///  You should delete the instance when you are done debugging and then
      ///  allow the system to take over and determine if another instance
      ///  should be started.
      ///
      ///  Only applicable for instances in App Engine flexible environment.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DebugInstance(global::Google.Appengine.V1.DebugInstanceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DebugInstance, null, options, request);
      }
      /// <summary>
      ///  Enables debugging on a VM instance. This allows you to use the SSH
      ///  command to connect to the virtual machine where the instance lives.
      ///  While in "debug mode", the instance continues to serve live traffic.
      ///  You should delete the instance when you are done debugging and then
      ///  allow the system to take over and determine if another instance
      ///  should be started.
      ///
      ///  Only applicable for instances in App Engine flexible environment.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DebugInstanceAsync(global::Google.Appengine.V1.DebugInstanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DebugInstanceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Enables debugging on a VM instance. This allows you to use the SSH
      ///  command to connect to the virtual machine where the instance lives.
      ///  While in "debug mode", the instance continues to serve live traffic.
      ///  You should delete the instance when you are done debugging and then
      ///  allow the system to take over and determine if another instance
      ///  should be started.
      ///
      ///  Only applicable for instances in App Engine flexible environment.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DebugInstanceAsync(global::Google.Appengine.V1.DebugInstanceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DebugInstance, null, options, request);
      }
      protected override InstancesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstancesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(InstancesBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListInstances, serviceImpl.ListInstances)
          .AddMethod(__Method_GetInstance, serviceImpl.GetInstance)
          .AddMethod(__Method_DeleteInstance, serviceImpl.DeleteInstance)
          .AddMethod(__Method_DebugInstance, serviceImpl.DebugInstance).Build();
    }

  }
  /// <summary>
  ///  Manages versions of a service.
  /// </summary>
  public static class Versions
  {
    static readonly string __ServiceName = "google.appengine.v1.Versions";

    static readonly Marshaller<global::Google.Appengine.V1.ListVersionsRequest> __Marshaller_ListVersionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.ListVersionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.ListVersionsResponse> __Marshaller_ListVersionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.ListVersionsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.GetVersionRequest> __Marshaller_GetVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.GetVersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.Version> __Marshaller_Version = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.Version.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.CreateVersionRequest> __Marshaller_CreateVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.CreateVersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.UpdateVersionRequest> __Marshaller_UpdateVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.UpdateVersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.DeleteVersionRequest> __Marshaller_DeleteVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.DeleteVersionRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Appengine.V1.ListVersionsRequest, global::Google.Appengine.V1.ListVersionsResponse> __Method_ListVersions = new Method<global::Google.Appengine.V1.ListVersionsRequest, global::Google.Appengine.V1.ListVersionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListVersions",
        __Marshaller_ListVersionsRequest,
        __Marshaller_ListVersionsResponse);

    static readonly Method<global::Google.Appengine.V1.GetVersionRequest, global::Google.Appengine.V1.Version> __Method_GetVersion = new Method<global::Google.Appengine.V1.GetVersionRequest, global::Google.Appengine.V1.Version>(
        MethodType.Unary,
        __ServiceName,
        "GetVersion",
        __Marshaller_GetVersionRequest,
        __Marshaller_Version);

    static readonly Method<global::Google.Appengine.V1.CreateVersionRequest, global::Google.LongRunning.Operation> __Method_CreateVersion = new Method<global::Google.Appengine.V1.CreateVersionRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "CreateVersion",
        __Marshaller_CreateVersionRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Appengine.V1.UpdateVersionRequest, global::Google.LongRunning.Operation> __Method_UpdateVersion = new Method<global::Google.Appengine.V1.UpdateVersionRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "UpdateVersion",
        __Marshaller_UpdateVersionRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Appengine.V1.DeleteVersionRequest, global::Google.LongRunning.Operation> __Method_DeleteVersion = new Method<global::Google.Appengine.V1.DeleteVersionRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteVersion",
        __Marshaller_DeleteVersionRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Appengine.V1.AppengineReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Versions</summary>
    public abstract class VersionsBase
    {
      /// <summary>
      ///  Lists the versions of a service.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.ListVersionsResponse> ListVersions(global::Google.Appengine.V1.ListVersionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the specified Version resource.
      ///  By default, only a `BASIC_VIEW` will be returned.
      ///  Specify the `FULL_VIEW` parameter to get the full resource.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.Version> GetVersion(global::Google.Appengine.V1.GetVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deploys code and resource files to a new version.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateVersion(global::Google.Appengine.V1.CreateVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Updates the specified Version resource.
      ///  You can specify the following fields depending on the App Engine
      ///  environment and type of scaling that the version resource uses:
      ///
      ///  * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
      ///    For Version resources that use basic scaling, manual scaling, or run in
      ///    the App Engine flexible environment.
      ///  * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
      ///    For Version resources that run in the App Engine standard environment.
      ///  * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      ///  * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateVersion(global::Google.Appengine.V1.UpdateVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes an existing Version resource.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteVersion(global::Google.Appengine.V1.DeleteVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Versions</summary>
    public class VersionsClient : ClientBase<VersionsClient>
    {
      /// <summary>Creates a new client for Versions</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VersionsClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Versions that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VersionsClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VersionsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VersionsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists the versions of a service.
      /// </summary>
      public virtual global::Google.Appengine.V1.ListVersionsResponse ListVersions(global::Google.Appengine.V1.ListVersionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListVersions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the versions of a service.
      /// </summary>
      public virtual global::Google.Appengine.V1.ListVersionsResponse ListVersions(global::Google.Appengine.V1.ListVersionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVersions, null, options, request);
      }
      /// <summary>
      ///  Lists the versions of a service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.ListVersionsResponse> ListVersionsAsync(global::Google.Appengine.V1.ListVersionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListVersionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the versions of a service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.ListVersionsResponse> ListVersionsAsync(global::Google.Appengine.V1.ListVersionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVersions, null, options, request);
      }
      /// <summary>
      ///  Gets the specified Version resource.
      ///  By default, only a `BASIC_VIEW` will be returned.
      ///  Specify the `FULL_VIEW` parameter to get the full resource.
      /// </summary>
      public virtual global::Google.Appengine.V1.Version GetVersion(global::Google.Appengine.V1.GetVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the specified Version resource.
      ///  By default, only a `BASIC_VIEW` will be returned.
      ///  Specify the `FULL_VIEW` parameter to get the full resource.
      /// </summary>
      public virtual global::Google.Appengine.V1.Version GetVersion(global::Google.Appengine.V1.GetVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      ///  Gets the specified Version resource.
      ///  By default, only a `BASIC_VIEW` will be returned.
      ///  Specify the `FULL_VIEW` parameter to get the full resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Version> GetVersionAsync(global::Google.Appengine.V1.GetVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the specified Version resource.
      ///  By default, only a `BASIC_VIEW` will be returned.
      ///  Specify the `FULL_VIEW` parameter to get the full resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Version> GetVersionAsync(global::Google.Appengine.V1.GetVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      ///  Deploys code and resource files to a new version.
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateVersion(global::Google.Appengine.V1.CreateVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deploys code and resource files to a new version.
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateVersion(global::Google.Appengine.V1.CreateVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVersion, null, options, request);
      }
      /// <summary>
      ///  Deploys code and resource files to a new version.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateVersionAsync(global::Google.Appengine.V1.CreateVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deploys code and resource files to a new version.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateVersionAsync(global::Google.Appengine.V1.CreateVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVersion, null, options, request);
      }
      /// <summary>
      ///  Updates the specified Version resource.
      ///  You can specify the following fields depending on the App Engine
      ///  environment and type of scaling that the version resource uses:
      ///
      ///  * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
      ///    For Version resources that use basic scaling, manual scaling, or run in
      ///    the App Engine flexible environment.
      ///  * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
      ///    For Version resources that run in the App Engine standard environment.
      ///  * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      ///  * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateVersion(global::Google.Appengine.V1.UpdateVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the specified Version resource.
      ///  You can specify the following fields depending on the App Engine
      ///  environment and type of scaling that the version resource uses:
      ///
      ///  * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
      ///    For Version resources that use basic scaling, manual scaling, or run in
      ///    the App Engine flexible environment.
      ///  * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
      ///    For Version resources that run in the App Engine standard environment.
      ///  * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      ///  * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateVersion(global::Google.Appengine.V1.UpdateVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVersion, null, options, request);
      }
      /// <summary>
      ///  Updates the specified Version resource.
      ///  You can specify the following fields depending on the App Engine
      ///  environment and type of scaling that the version resource uses:
      ///
      ///  * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
      ///    For Version resources that use basic scaling, manual scaling, or run in
      ///    the App Engine flexible environment.
      ///  * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
      ///    For Version resources that run in the App Engine standard environment.
      ///  * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      ///  * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateVersionAsync(global::Google.Appengine.V1.UpdateVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the specified Version resource.
      ///  You can specify the following fields depending on the App Engine
      ///  environment and type of scaling that the version resource uses:
      ///
      ///  * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
      ///    For Version resources that use basic scaling, manual scaling, or run in
      ///    the App Engine flexible environment.
      ///  * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
      ///    For Version resources that run in the App Engine standard environment.
      ///  * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      ///  * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
      ///    For Version resources that use automatic scaling and run in the App
      ///    Engine standard environment.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateVersionAsync(global::Google.Appengine.V1.UpdateVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVersion, null, options, request);
      }
      /// <summary>
      ///  Deletes an existing Version resource.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteVersion(global::Google.Appengine.V1.DeleteVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes an existing Version resource.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteVersion(global::Google.Appengine.V1.DeleteVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVersion, null, options, request);
      }
      /// <summary>
      ///  Deletes an existing Version resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteVersionAsync(global::Google.Appengine.V1.DeleteVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes an existing Version resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteVersionAsync(global::Google.Appengine.V1.DeleteVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVersion, null, options, request);
      }
      protected override VersionsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VersionsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(VersionsBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListVersions, serviceImpl.ListVersions)
          .AddMethod(__Method_GetVersion, serviceImpl.GetVersion)
          .AddMethod(__Method_CreateVersion, serviceImpl.CreateVersion)
          .AddMethod(__Method_UpdateVersion, serviceImpl.UpdateVersion)
          .AddMethod(__Method_DeleteVersion, serviceImpl.DeleteVersion).Build();
    }

  }
  /// <summary>
  ///  Manages services of an application.
  /// </summary>
  public static class Services
  {
    static readonly string __ServiceName = "google.appengine.v1.Services";

    static readonly Marshaller<global::Google.Appengine.V1.ListServicesRequest> __Marshaller_ListServicesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.ListServicesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.ListServicesResponse> __Marshaller_ListServicesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.ListServicesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.GetServiceRequest> __Marshaller_GetServiceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.GetServiceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.Service> __Marshaller_Service = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.Service.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.UpdateServiceRequest> __Marshaller_UpdateServiceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.UpdateServiceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.DeleteServiceRequest> __Marshaller_DeleteServiceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.DeleteServiceRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Appengine.V1.ListServicesRequest, global::Google.Appengine.V1.ListServicesResponse> __Method_ListServices = new Method<global::Google.Appengine.V1.ListServicesRequest, global::Google.Appengine.V1.ListServicesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListServices",
        __Marshaller_ListServicesRequest,
        __Marshaller_ListServicesResponse);

    static readonly Method<global::Google.Appengine.V1.GetServiceRequest, global::Google.Appengine.V1.Service> __Method_GetService = new Method<global::Google.Appengine.V1.GetServiceRequest, global::Google.Appengine.V1.Service>(
        MethodType.Unary,
        __ServiceName,
        "GetService",
        __Marshaller_GetServiceRequest,
        __Marshaller_Service);

    static readonly Method<global::Google.Appengine.V1.UpdateServiceRequest, global::Google.LongRunning.Operation> __Method_UpdateService = new Method<global::Google.Appengine.V1.UpdateServiceRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "UpdateService",
        __Marshaller_UpdateServiceRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Appengine.V1.DeleteServiceRequest, global::Google.LongRunning.Operation> __Method_DeleteService = new Method<global::Google.Appengine.V1.DeleteServiceRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteService",
        __Marshaller_DeleteServiceRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Appengine.V1.AppengineReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Services</summary>
    public abstract class ServicesBase
    {
      /// <summary>
      ///  Lists all the services in the application.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.ListServicesResponse> ListServices(global::Google.Appengine.V1.ListServicesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the current configuration of the specified service.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.Service> GetService(global::Google.Appengine.V1.GetServiceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Updates the configuration of the specified service.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateService(global::Google.Appengine.V1.UpdateServiceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes the specified service and all enclosed versions.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteService(global::Google.Appengine.V1.DeleteServiceRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Services</summary>
    public class ServicesClient : ClientBase<ServicesClient>
    {
      /// <summary>Creates a new client for Services</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServicesClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Services that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServicesClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists all the services in the application.
      /// </summary>
      public virtual global::Google.Appengine.V1.ListServicesResponse ListServices(global::Google.Appengine.V1.ListServicesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListServices(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all the services in the application.
      /// </summary>
      public virtual global::Google.Appengine.V1.ListServicesResponse ListServices(global::Google.Appengine.V1.ListServicesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServices, null, options, request);
      }
      /// <summary>
      ///  Lists all the services in the application.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.ListServicesResponse> ListServicesAsync(global::Google.Appengine.V1.ListServicesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListServicesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists all the services in the application.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.ListServicesResponse> ListServicesAsync(global::Google.Appengine.V1.ListServicesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServices, null, options, request);
      }
      /// <summary>
      ///  Gets the current configuration of the specified service.
      /// </summary>
      public virtual global::Google.Appengine.V1.Service GetService(global::Google.Appengine.V1.GetServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetService(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the current configuration of the specified service.
      /// </summary>
      public virtual global::Google.Appengine.V1.Service GetService(global::Google.Appengine.V1.GetServiceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetService, null, options, request);
      }
      /// <summary>
      ///  Gets the current configuration of the specified service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Service> GetServiceAsync(global::Google.Appengine.V1.GetServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServiceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the current configuration of the specified service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Service> GetServiceAsync(global::Google.Appengine.V1.GetServiceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetService, null, options, request);
      }
      /// <summary>
      ///  Updates the configuration of the specified service.
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateService(global::Google.Appengine.V1.UpdateServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateService(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the configuration of the specified service.
      /// </summary>
      public virtual global::Google.LongRunning.Operation UpdateService(global::Google.Appengine.V1.UpdateServiceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateService, null, options, request);
      }
      /// <summary>
      ///  Updates the configuration of the specified service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateServiceAsync(global::Google.Appengine.V1.UpdateServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateServiceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates the configuration of the specified service.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateServiceAsync(global::Google.Appengine.V1.UpdateServiceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateService, null, options, request);
      }
      /// <summary>
      ///  Deletes the specified service and all enclosed versions.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteService(global::Google.Appengine.V1.DeleteServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteService(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes the specified service and all enclosed versions.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteService(global::Google.Appengine.V1.DeleteServiceRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteService, null, options, request);
      }
      /// <summary>
      ///  Deletes the specified service and all enclosed versions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteServiceAsync(global::Google.Appengine.V1.DeleteServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteServiceAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes the specified service and all enclosed versions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteServiceAsync(global::Google.Appengine.V1.DeleteServiceRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteService, null, options, request);
      }
      protected override ServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ServicesBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListServices, serviceImpl.ListServices)
          .AddMethod(__Method_GetService, serviceImpl.GetService)
          .AddMethod(__Method_UpdateService, serviceImpl.UpdateService)
          .AddMethod(__Method_DeleteService, serviceImpl.DeleteService).Build();
    }

  }
  /// <summary>
  ///  Manages App Engine applications.
  /// </summary>
  public static class Applications
  {
    static readonly string __ServiceName = "google.appengine.v1.Applications";

    static readonly Marshaller<global::Google.Appengine.V1.GetApplicationRequest> __Marshaller_GetApplicationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.GetApplicationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.Application> __Marshaller_Application = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.Application.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Appengine.V1.RepairApplicationRequest> __Marshaller_RepairApplicationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Appengine.V1.RepairApplicationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);

    static readonly Method<global::Google.Appengine.V1.GetApplicationRequest, global::Google.Appengine.V1.Application> __Method_GetApplication = new Method<global::Google.Appengine.V1.GetApplicationRequest, global::Google.Appengine.V1.Application>(
        MethodType.Unary,
        __ServiceName,
        "GetApplication",
        __Marshaller_GetApplicationRequest,
        __Marshaller_Application);

    static readonly Method<global::Google.Appengine.V1.RepairApplicationRequest, global::Google.LongRunning.Operation> __Method_RepairApplication = new Method<global::Google.Appengine.V1.RepairApplicationRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "RepairApplication",
        __Marshaller_RepairApplicationRequest,
        __Marshaller_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Appengine.V1.AppengineReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Applications</summary>
    public abstract class ApplicationsBase
    {
      /// <summary>
      ///  Gets information about an application.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Appengine.V1.Application> GetApplication(global::Google.Appengine.V1.GetApplicationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Recreates the required App Engine features for the application in your
      ///  project, for example a Cloud Storage bucket or App Engine service account.
      ///  Use this method if you receive an error message about a missing feature,
      ///  for example "*Error retrieving the App Engine service account*".
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RepairApplication(global::Google.Appengine.V1.RepairApplicationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Applications</summary>
    public class ApplicationsClient : ClientBase<ApplicationsClient>
    {
      /// <summary>Creates a new client for Applications</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ApplicationsClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Applications that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ApplicationsClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ApplicationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ApplicationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Gets information about an application.
      /// </summary>
      public virtual global::Google.Appengine.V1.Application GetApplication(global::Google.Appengine.V1.GetApplicationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetApplication(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about an application.
      /// </summary>
      public virtual global::Google.Appengine.V1.Application GetApplication(global::Google.Appengine.V1.GetApplicationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplication, null, options, request);
      }
      /// <summary>
      ///  Gets information about an application.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Application> GetApplicationAsync(global::Google.Appengine.V1.GetApplicationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetApplicationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about an application.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Appengine.V1.Application> GetApplicationAsync(global::Google.Appengine.V1.GetApplicationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplication, null, options, request);
      }
      /// <summary>
      ///  Recreates the required App Engine features for the application in your
      ///  project, for example a Cloud Storage bucket or App Engine service account.
      ///  Use this method if you receive an error message about a missing feature,
      ///  for example "*Error retrieving the App Engine service account*".
      /// </summary>
      public virtual global::Google.LongRunning.Operation RepairApplication(global::Google.Appengine.V1.RepairApplicationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RepairApplication(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Recreates the required App Engine features for the application in your
      ///  project, for example a Cloud Storage bucket or App Engine service account.
      ///  Use this method if you receive an error message about a missing feature,
      ///  for example "*Error retrieving the App Engine service account*".
      /// </summary>
      public virtual global::Google.LongRunning.Operation RepairApplication(global::Google.Appengine.V1.RepairApplicationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RepairApplication, null, options, request);
      }
      /// <summary>
      ///  Recreates the required App Engine features for the application in your
      ///  project, for example a Cloud Storage bucket or App Engine service account.
      ///  Use this method if you receive an error message about a missing feature,
      ///  for example "*Error retrieving the App Engine service account*".
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> RepairApplicationAsync(global::Google.Appengine.V1.RepairApplicationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RepairApplicationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Recreates the required App Engine features for the application in your
      ///  project, for example a Cloud Storage bucket or App Engine service account.
      ///  Use this method if you receive an error message about a missing feature,
      ///  for example "*Error retrieving the App Engine service account*".
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> RepairApplicationAsync(global::Google.Appengine.V1.RepairApplicationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RepairApplication, null, options, request);
      }
      protected override ApplicationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ApplicationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ApplicationsBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetApplication, serviceImpl.GetApplication)
          .AddMethod(__Method_RepairApplication, serviceImpl.RepairApplication).Build();
    }

  }
}
#endregion
