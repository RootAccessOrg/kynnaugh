// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bytestream/bytestream.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Bytestream {
  /// <summary>
  ///  #### Introduction
  ///
  ///  The Byte Stream API enables a client to read and write a stream of bytes to
  ///  and from a resource. Resources have names, and these names are supplied in
  ///  the API calls below to identify the resource that is being read from or
  ///  written to.
  ///
  ///  All implementations of the Byte Stream API export the interface defined here:
  ///
  ///  * `Read()`: Reads the contents of a resource.
  ///
  ///  * `Write()`: Writes the contents of a resource. The client can call `Write()`
  ///    multiple times with the same resource and can check the status of the write
  ///    by calling `QueryWriteStatus()`.
  ///
  ///  #### Service parameters and metadata
  ///
  ///  The ByteStream API provides no direct way to access/modify any metadata
  ///  associated with the resource.
  ///
  ///  #### Errors
  ///
  ///  The errors returned by the service are in the Google canonical error space.
  /// </summary>
  public static class ByteStream
  {
    static readonly string __ServiceName = "google.bytestream.ByteStream";

    static readonly Marshaller<global::Google.Bytestream.ReadRequest> __Marshaller_ReadRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bytestream.ReadRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bytestream.ReadResponse> __Marshaller_ReadResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bytestream.ReadResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bytestream.WriteRequest> __Marshaller_WriteRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bytestream.WriteRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bytestream.WriteResponse> __Marshaller_WriteResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bytestream.WriteResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bytestream.QueryWriteStatusRequest> __Marshaller_QueryWriteStatusRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bytestream.QueryWriteStatusRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bytestream.QueryWriteStatusResponse> __Marshaller_QueryWriteStatusResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bytestream.QueryWriteStatusResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Bytestream.ReadRequest, global::Google.Bytestream.ReadResponse> __Method_Read = new Method<global::Google.Bytestream.ReadRequest, global::Google.Bytestream.ReadResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "Read",
        __Marshaller_ReadRequest,
        __Marshaller_ReadResponse);

    static readonly Method<global::Google.Bytestream.WriteRequest, global::Google.Bytestream.WriteResponse> __Method_Write = new Method<global::Google.Bytestream.WriteRequest, global::Google.Bytestream.WriteResponse>(
        MethodType.ClientStreaming,
        __ServiceName,
        "Write",
        __Marshaller_WriteRequest,
        __Marshaller_WriteResponse);

    static readonly Method<global::Google.Bytestream.QueryWriteStatusRequest, global::Google.Bytestream.QueryWriteStatusResponse> __Method_QueryWriteStatus = new Method<global::Google.Bytestream.QueryWriteStatusRequest, global::Google.Bytestream.QueryWriteStatusResponse>(
        MethodType.Unary,
        __ServiceName,
        "QueryWriteStatus",
        __Marshaller_QueryWriteStatusRequest,
        __Marshaller_QueryWriteStatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Bytestream.BytestreamReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ByteStream</summary>
    public abstract class ByteStreamBase
    {
      /// <summary>
      ///  `Read()` is used to retrieve the contents of a resource as a sequence
      ///  of bytes. The bytes are returned in a sequence of responses, and the
      ///  responses are delivered as the results of a server-side streaming RPC.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task Read(global::Google.Bytestream.ReadRequest request, IServerStreamWriter<global::Google.Bytestream.ReadResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  `Write()` is used to send the contents of a resource as a sequence of
      ///  bytes. The bytes are sent in a sequence of request protos of a client-side
      ///  streaming RPC.
      ///
      ///  A `Write()` action is resumable. If there is an error or the connection is
      ///  broken during the `Write()`, the client should check the status of the
      ///  `Write()` by calling `QueryWriteStatus()` and continue writing from the
      ///  returned `committed_size`. This may be less than the amount of data the
      ///  client previously sent.
      ///
      ///  Calling `Write()` on a resource name that was previously written and
      ///  finalized could cause an error, depending on whether the underlying service
      ///  allows over-writing of previously written resources.
      ///
      ///  When the client closes the request channel, the service will respond with
      ///  a `WriteResponse`. The service will not view the resource as `complete`
      ///  until the client has sent a `WriteRequest` with `finish_write` set to
      ///  `true`. Sending any requests on a stream after sending a request with
      ///  `finish_write` set to `true` will cause an error. The client **should**
      ///  check the `WriteResponse` it receives to determine how much data the
      ///  service was able to commit and whether the service views the resource as
      ///  `complete` or not.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bytestream.WriteResponse> Write(IAsyncStreamReader<global::Google.Bytestream.WriteRequest> requestStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  `QueryWriteStatus()` is used to find the `committed_size` for a resource
      ///  that is being written, which can then be used as the `write_offset` for
      ///  the next `Write()` call.
      ///
      ///  If the resource does not exist (i.e., the resource has been deleted, or the
      ///  first `Write()` has not yet reached the service), this method returns the
      ///  error `NOT_FOUND`.
      ///
      ///  The client **may** call `QueryWriteStatus()` at any time to determine how
      ///  much data has been processed for this resource. This is useful if the
      ///  client is buffering data and needs to know which data can be safely
      ///  evicted. For any sequence of `QueryWriteStatus()` calls for a given
      ///  resource name, the sequence of returned `committed_size` values will be
      ///  non-decreasing.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bytestream.QueryWriteStatusResponse> QueryWriteStatus(global::Google.Bytestream.QueryWriteStatusRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ByteStream</summary>
    public class ByteStreamClient : ClientBase<ByteStreamClient>
    {
      /// <summary>Creates a new client for ByteStream</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ByteStreamClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ByteStream that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ByteStreamClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ByteStreamClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ByteStreamClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  `Read()` is used to retrieve the contents of a resource as a sequence
      ///  of bytes. The bytes are returned in a sequence of responses, and the
      ///  responses are delivered as the results of a server-side streaming RPC.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bytestream.ReadResponse> Read(global::Google.Bytestream.ReadRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Read(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  `Read()` is used to retrieve the contents of a resource as a sequence
      ///  of bytes. The bytes are returned in a sequence of responses, and the
      ///  responses are delivered as the results of a server-side streaming RPC.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bytestream.ReadResponse> Read(global::Google.Bytestream.ReadRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Read, null, options, request);
      }
      /// <summary>
      ///  `Write()` is used to send the contents of a resource as a sequence of
      ///  bytes. The bytes are sent in a sequence of request protos of a client-side
      ///  streaming RPC.
      ///
      ///  A `Write()` action is resumable. If there is an error or the connection is
      ///  broken during the `Write()`, the client should check the status of the
      ///  `Write()` by calling `QueryWriteStatus()` and continue writing from the
      ///  returned `committed_size`. This may be less than the amount of data the
      ///  client previously sent.
      ///
      ///  Calling `Write()` on a resource name that was previously written and
      ///  finalized could cause an error, depending on whether the underlying service
      ///  allows over-writing of previously written resources.
      ///
      ///  When the client closes the request channel, the service will respond with
      ///  a `WriteResponse`. The service will not view the resource as `complete`
      ///  until the client has sent a `WriteRequest` with `finish_write` set to
      ///  `true`. Sending any requests on a stream after sending a request with
      ///  `finish_write` set to `true` will cause an error. The client **should**
      ///  check the `WriteResponse` it receives to determine how much data the
      ///  service was able to commit and whether the service views the resource as
      ///  `complete` or not.
      /// </summary>
      public virtual AsyncClientStreamingCall<global::Google.Bytestream.WriteRequest, global::Google.Bytestream.WriteResponse> Write(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Write(new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  `Write()` is used to send the contents of a resource as a sequence of
      ///  bytes. The bytes are sent in a sequence of request protos of a client-side
      ///  streaming RPC.
      ///
      ///  A `Write()` action is resumable. If there is an error or the connection is
      ///  broken during the `Write()`, the client should check the status of the
      ///  `Write()` by calling `QueryWriteStatus()` and continue writing from the
      ///  returned `committed_size`. This may be less than the amount of data the
      ///  client previously sent.
      ///
      ///  Calling `Write()` on a resource name that was previously written and
      ///  finalized could cause an error, depending on whether the underlying service
      ///  allows over-writing of previously written resources.
      ///
      ///  When the client closes the request channel, the service will respond with
      ///  a `WriteResponse`. The service will not view the resource as `complete`
      ///  until the client has sent a `WriteRequest` with `finish_write` set to
      ///  `true`. Sending any requests on a stream after sending a request with
      ///  `finish_write` set to `true` will cause an error. The client **should**
      ///  check the `WriteResponse` it receives to determine how much data the
      ///  service was able to commit and whether the service views the resource as
      ///  `complete` or not.
      /// </summary>
      public virtual AsyncClientStreamingCall<global::Google.Bytestream.WriteRequest, global::Google.Bytestream.WriteResponse> Write(CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Write, null, options);
      }
      /// <summary>
      ///  `QueryWriteStatus()` is used to find the `committed_size` for a resource
      ///  that is being written, which can then be used as the `write_offset` for
      ///  the next `Write()` call.
      ///
      ///  If the resource does not exist (i.e., the resource has been deleted, or the
      ///  first `Write()` has not yet reached the service), this method returns the
      ///  error `NOT_FOUND`.
      ///
      ///  The client **may** call `QueryWriteStatus()` at any time to determine how
      ///  much data has been processed for this resource. This is useful if the
      ///  client is buffering data and needs to know which data can be safely
      ///  evicted. For any sequence of `QueryWriteStatus()` calls for a given
      ///  resource name, the sequence of returned `committed_size` values will be
      ///  non-decreasing.
      /// </summary>
      public virtual global::Google.Bytestream.QueryWriteStatusResponse QueryWriteStatus(global::Google.Bytestream.QueryWriteStatusRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryWriteStatus(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  `QueryWriteStatus()` is used to find the `committed_size` for a resource
      ///  that is being written, which can then be used as the `write_offset` for
      ///  the next `Write()` call.
      ///
      ///  If the resource does not exist (i.e., the resource has been deleted, or the
      ///  first `Write()` has not yet reached the service), this method returns the
      ///  error `NOT_FOUND`.
      ///
      ///  The client **may** call `QueryWriteStatus()` at any time to determine how
      ///  much data has been processed for this resource. This is useful if the
      ///  client is buffering data and needs to know which data can be safely
      ///  evicted. For any sequence of `QueryWriteStatus()` calls for a given
      ///  resource name, the sequence of returned `committed_size` values will be
      ///  non-decreasing.
      /// </summary>
      public virtual global::Google.Bytestream.QueryWriteStatusResponse QueryWriteStatus(global::Google.Bytestream.QueryWriteStatusRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryWriteStatus, null, options, request);
      }
      /// <summary>
      ///  `QueryWriteStatus()` is used to find the `committed_size` for a resource
      ///  that is being written, which can then be used as the `write_offset` for
      ///  the next `Write()` call.
      ///
      ///  If the resource does not exist (i.e., the resource has been deleted, or the
      ///  first `Write()` has not yet reached the service), this method returns the
      ///  error `NOT_FOUND`.
      ///
      ///  The client **may** call `QueryWriteStatus()` at any time to determine how
      ///  much data has been processed for this resource. This is useful if the
      ///  client is buffering data and needs to know which data can be safely
      ///  evicted. For any sequence of `QueryWriteStatus()` calls for a given
      ///  resource name, the sequence of returned `committed_size` values will be
      ///  non-decreasing.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bytestream.QueryWriteStatusResponse> QueryWriteStatusAsync(global::Google.Bytestream.QueryWriteStatusRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryWriteStatusAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  `QueryWriteStatus()` is used to find the `committed_size` for a resource
      ///  that is being written, which can then be used as the `write_offset` for
      ///  the next `Write()` call.
      ///
      ///  If the resource does not exist (i.e., the resource has been deleted, or the
      ///  first `Write()` has not yet reached the service), this method returns the
      ///  error `NOT_FOUND`.
      ///
      ///  The client **may** call `QueryWriteStatus()` at any time to determine how
      ///  much data has been processed for this resource. This is useful if the
      ///  client is buffering data and needs to know which data can be safely
      ///  evicted. For any sequence of `QueryWriteStatus()` calls for a given
      ///  resource name, the sequence of returned `committed_size` values will be
      ///  non-decreasing.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bytestream.QueryWriteStatusResponse> QueryWriteStatusAsync(global::Google.Bytestream.QueryWriteStatusRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryWriteStatus, null, options, request);
      }
      protected override ByteStreamClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ByteStreamClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ByteStreamBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_Write, serviceImpl.Write)
          .AddMethod(__Method_QueryWriteStatus, serviceImpl.QueryWriteStatus).Build();
    }

  }
}
#endregion
