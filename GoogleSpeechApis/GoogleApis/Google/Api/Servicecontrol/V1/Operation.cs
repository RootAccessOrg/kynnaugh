// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/operation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api.Servicecontrol.V1 {

  /// <summary>Holder for reflection information generated from google/api/servicecontrol/v1/operation.proto</summary>
  public static partial class OperationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/servicecontrol/v1/operation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OperationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvYXBpL3NlcnZpY2Vjb250cm9sL3YxL29wZXJhdGlvbi5wcm90",
            "bxIcZ29vZ2xlLmFwaS5zZXJ2aWNlY29udHJvbC52MRocZ29vZ2xlL2FwaS9h",
            "bm5vdGF0aW9ucy5wcm90bxosZ29vZ2xlL2FwaS9zZXJ2aWNlY29udHJvbC92",
            "MS9sb2dfZW50cnkucHJvdG8aL2dvb2dsZS9hcGkvc2VydmljZWNvbnRyb2wv",
            "djEvbWV0cmljX3ZhbHVlLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0",
            "YW1wLnByb3RvIo8ECglPcGVyYXRpb24SFAoMb3BlcmF0aW9uX2lkGAEgASgJ",
            "EhYKDm9wZXJhdGlvbl9uYW1lGAIgASgJEhMKC2NvbnN1bWVyX2lkGAMgASgJ",
            "Ei4KCnN0YXJ0X3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEiwKCGVuZF90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBJDCgZsYWJlbHMYBiADKAsyMy5nb29nbGUuYXBpLnNlcnZpY2Vjb250",
            "cm9sLnYxLk9wZXJhdGlvbi5MYWJlbHNFbnRyeRJHChFtZXRyaWNfdmFsdWVf",
            "c2V0cxgHIAMoCzIsLmdvb2dsZS5hcGkuc2VydmljZWNvbnRyb2wudjEuTWV0",
            "cmljVmFsdWVTZXQSOwoLbG9nX2VudHJpZXMYCCADKAsyJi5nb29nbGUuYXBp",
            "LnNlcnZpY2Vjb250cm9sLnYxLkxvZ0VudHJ5EkYKCmltcG9ydGFuY2UYCyAB",
            "KA4yMi5nb29nbGUuYXBpLnNlcnZpY2Vjb250cm9sLnYxLk9wZXJhdGlvbi5J",
            "bXBvcnRhbmNlGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEiHwoKSW1wb3J0YW5jZRIHCgNMT1cQABIICgRISUdIEAFC",
            "gwEKIGNvbS5nb29nbGUuYXBpLnNlcnZpY2Vjb250cm9sLnYxQg5PcGVyYXRp",
            "b25Qcm90b1ABWkpnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVh",
            "cGlzL2FwaS9zZXJ2aWNlY29udHJvbC92MTtzZXJ2aWNlY29udHJvbPgBAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.Servicecontrol.V1.LogEntryReflection.Descriptor, global::Google.Api.Servicecontrol.V1.MetricValueReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicecontrol.V1.Operation), global::Google.Api.Servicecontrol.V1.Operation.Parser, new[]{ "OperationId", "OperationName", "ConsumerId", "StartTime", "EndTime", "Labels", "MetricValueSets", "LogEntries", "Importance" }, null, new[]{ typeof(global::Google.Api.Servicecontrol.V1.Operation.Types.Importance) }, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Represents information regarding an operation.
  /// </summary>
  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicecontrol.V1.OperationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      operationId_ = other.operationId_;
      operationName_ = other.operationName_;
      consumerId_ = other.consumerId_;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      EndTime = other.endTime_ != null ? other.EndTime.Clone() : null;
      labels_ = other.labels_.Clone();
      metricValueSets_ = other.metricValueSets_.Clone();
      logEntries_ = other.logEntries_.Clone();
      importance_ = other.importance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "operation_id" field.</summary>
    public const int OperationIdFieldNumber = 1;
    private string operationId_ = "";
    /// <summary>
    ///  Identity of the operation. This must be unique within the scope of the
    ///  service that generated the operation. If the service calls
    ///  Check() and Report() on the same operation, the two calls should carry
    ///  the same id.
    ///
    ///  UUID version 4 is recommended, though not required.
    ///  In scenarios where an operation is computed from existing information
    ///  and an idempotent id is desirable for deduplication purpose, UUID version 5
    ///  is recommended. See RFC 4122 for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationId {
      get { return operationId_; }
      set {
        operationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation_name" field.</summary>
    public const int OperationNameFieldNumber = 2;
    private string operationName_ = "";
    /// <summary>
    ///  Fully qualified name of the operation. Reserved for future use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 3;
    private string consumerId_ = "";
    /// <summary>
    ///  Identity of the consumer who is using the service.
    ///  This field should be filled in for the operations initiated by a
    ///  consumer, but not for service-initiated operations that are
    ///  not related to a specific consumer.
    ///
    ///  This can be in one of the following formats:
    ///    project:&lt;project_id>,
    ///    project_number:&lt;project_number>,
    ///    api_key:&lt;api_key>.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerId {
      get { return consumerId_; }
      set {
        consumerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    ///  Required. Start time of the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    ///  End time of the operation.
    ///  Required when the operation is used in [ServiceController.Report][google.api.servicecontrol.v1.ServiceController.Report],
    ///  but optional when the operation is used in [ServiceController.Check][google.api.servicecontrol.v1.ServiceController.Check].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  Labels describing the operation. Only the following labels are allowed:
    ///
    ///  - Labels describing monitored resources as defined in
    ///    the service configuration.
    ///  - Default labels of metric values. When specified, labels defined in the
    ///    metric value override these default.
    ///  - The following labels defined by Google Cloud Platform:
    ///      - `cloud.googleapis.com/location` describing the location where the
    ///         operation happened,
    ///      - `servicecontrol.googleapis.com/user_agent` describing the user agent
    ///         of the API request,
    ///      - `servicecontrol.googleapis.com/service_agent` describing the service
    ///         used to handle the API request (e.g. ESP),
    ///      - `servicecontrol.googleapis.com/platform` describing the platform
    ///         where the API is served (e.g. GAE, GCE, GKE).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "metric_value_sets" field.</summary>
    public const int MetricValueSetsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Api.Servicecontrol.V1.MetricValueSet> _repeated_metricValueSets_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Api.Servicecontrol.V1.MetricValueSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.MetricValueSet> metricValueSets_ = new pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.MetricValueSet>();
    /// <summary>
    ///  Represents information about this operation. Each MetricValueSet
    ///  corresponds to a metric defined in the service configuration.
    ///  The data type used in the MetricValueSet must agree with
    ///  the data type specified in the metric definition.
    ///
    ///  Within a single operation, it is not allowed to have more than one
    ///  MetricValue instances that have the same metric names and identical
    ///  label value combinations. If a request has such duplicated MetricValue
    ///  instances, the entire request is rejected with
    ///  an invalid argument error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.MetricValueSet> MetricValueSets {
      get { return metricValueSets_; }
    }

    /// <summary>Field number for the "log_entries" field.</summary>
    public const int LogEntriesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Api.Servicecontrol.V1.LogEntry> _repeated_logEntries_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Api.Servicecontrol.V1.LogEntry.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.LogEntry> logEntries_ = new pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.LogEntry>();
    /// <summary>
    ///  Represents information to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicecontrol.V1.LogEntry> LogEntries {
      get { return logEntries_; }
    }

    /// <summary>Field number for the "importance" field.</summary>
    public const int ImportanceFieldNumber = 11;
    private global::Google.Api.Servicecontrol.V1.Operation.Types.Importance importance_ = 0;
    /// <summary>
    ///  DO NOT USE. This is an experimental field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Servicecontrol.V1.Operation.Types.Importance Importance {
      get { return importance_; }
      set {
        importance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperationId != other.OperationId) return false;
      if (OperationName != other.OperationName) return false;
      if (ConsumerId != other.ConsumerId) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if(!metricValueSets_.Equals(other.metricValueSets_)) return false;
      if(!logEntries_.Equals(other.logEntries_)) return false;
      if (Importance != other.Importance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperationId.Length != 0) hash ^= OperationId.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      if (ConsumerId.Length != 0) hash ^= ConsumerId.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= metricValueSets_.GetHashCode();
      hash ^= logEntries_.GetHashCode();
      if (Importance != 0) hash ^= Importance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OperationId);
      }
      if (OperationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OperationName);
      }
      if (ConsumerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConsumerId);
      }
      if (startTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EndTime);
      }
      labels_.WriteTo(output, _map_labels_codec);
      metricValueSets_.WriteTo(output, _repeated_metricValueSets_codec);
      logEntries_.WriteTo(output, _repeated_logEntries_codec);
      if (Importance != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Importance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationId);
      }
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      if (ConsumerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerId);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += metricValueSets_.CalculateSize(_repeated_metricValueSets_codec);
      size += logEntries_.CalculateSize(_repeated_logEntries_codec);
      if (Importance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Importance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.OperationId.Length != 0) {
        OperationId = other.OperationId;
      }
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      if (other.ConsumerId.Length != 0) {
        ConsumerId = other.ConsumerId;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      labels_.Add(other.labels_);
      metricValueSets_.Add(other.metricValueSets_);
      logEntries_.Add(other.logEntries_);
      if (other.Importance != 0) {
        Importance = other.Importance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OperationId = input.ReadString();
            break;
          }
          case 18: {
            OperationName = input.ReadString();
            break;
          }
          case 26: {
            ConsumerId = input.ReadString();
            break;
          }
          case 34: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 42: {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 58: {
            metricValueSets_.AddEntriesFrom(input, _repeated_metricValueSets_codec);
            break;
          }
          case 66: {
            logEntries_.AddEntriesFrom(input, _repeated_logEntries_codec);
            break;
          }
          case 88: {
            importance_ = (global::Google.Api.Servicecontrol.V1.Operation.Types.Importance) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Operation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Defines the importance of the data contained in the operation.
      /// </summary>
      public enum Importance {
        /// <summary>
        ///  The API implementation may cache and aggregate the data.
        ///  The data may be lost when rare and unexpected system failures occur.
        /// </summary>
        [pbr::OriginalName("LOW")] Low = 0,
        /// <summary>
        ///  The API implementation doesn't cache and aggregate the data.
        ///  If the method returns successfully, it's guaranteed that the data has
        ///  been persisted in durable storage.
        /// </summary>
        [pbr::OriginalName("HIGH")] High = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
