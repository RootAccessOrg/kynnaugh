// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/instance.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Appengine.V1 {

  /// <summary>Holder for reflection information generated from google/appengine/v1/instance.proto</summary>
  public static partial class InstanceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/appengine/v1/instance.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstanceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJnb29nbGUvYXBwZW5naW5lL3YxL2luc3RhbmNlLnByb3RvEhNnb29nbGUu",
            "YXBwZW5naW5lLnYxGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvGh9n",
            "b29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIq8DCghJbnN0YW5jZRIM",
            "CgRuYW1lGAEgASgJEgoKAmlkGAIgASgJEhoKEmFwcF9lbmdpbmVfcmVsZWFz",
            "ZRgDIAEoCRJACgxhdmFpbGFiaWxpdHkYBCABKA4yKi5nb29nbGUuYXBwZW5n",
            "aW5lLnYxLkluc3RhbmNlLkF2YWlsYWJpbGl0eRIPCgd2bV9uYW1lGAUgASgJ",
            "EhQKDHZtX3pvbmVfbmFtZRgGIAEoCRINCgV2bV9pZBgHIAEoCRIuCgpzdGFy",
            "dF90aW1lGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIQCghy",
            "ZXF1ZXN0cxgJIAEoBRIOCgZlcnJvcnMYCiABKAUSCwoDcXBzGAsgASgCEhcK",
            "D2F2ZXJhZ2VfbGF0ZW5jeRgMIAEoBRIUCgxtZW1vcnlfdXNhZ2UYDSABKAMS",
            "EQoJdm1fc3RhdHVzGA4gASgJEhgKEHZtX2RlYnVnX2VuYWJsZWQYDyABKAgi",
            "OgoMQXZhaWxhYmlsaXR5Eg8KC1VOU1BFQ0lGSUVEEAASDAoIUkVTSURFTlQQ",
            "ARILCgdEWU5BTUlDEAJCaAoXY29tLmdvb2dsZS5hcHBlbmdpbmUudjFCDUlu",
            "c3RhbmNlUHJvdG9QAVo8Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29v",
            "Z2xlYXBpcy9hcHBlbmdpbmUvdjE7YXBwZW5naW5lYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Appengine.V1.Instance), global::Google.Appengine.V1.Instance.Parser, new[]{ "Name", "Id", "AppEngineRelease", "Availability", "VmName", "VmZoneName", "VmId", "StartTime", "Requests", "Errors", "Qps", "AverageLatency", "MemoryUsage", "VmStatus", "VmDebugEnabled" }, null, new[]{ typeof(global::Google.Appengine.V1.Instance.Types.Availability) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  An Instance resource is the computing unit that App Engine uses to
  ///  automatically scale an application.
  /// </summary>
  public sealed partial class Instance : pb::IMessage<Instance> {
    private static readonly pb::MessageParser<Instance> _parser = new pb::MessageParser<Instance>(() => new Instance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Appengine.V1.InstanceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instance(Instance other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      appEngineRelease_ = other.appEngineRelease_;
      availability_ = other.availability_;
      vmName_ = other.vmName_;
      vmZoneName_ = other.vmZoneName_;
      vmId_ = other.vmId_;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      requests_ = other.requests_;
      errors_ = other.errors_;
      qps_ = other.qps_;
      averageLatency_ = other.averageLatency_;
      memoryUsage_ = other.memoryUsage_;
      vmStatus_ = other.vmStatus_;
      vmDebugEnabled_ = other.vmDebugEnabled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instance Clone() {
      return new Instance(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Full path to the Instance resource in the API.
    ///  Example: `apps/myapp/services/default/versions/v1/instances/instance-1`.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  Relative name of the instance within the version.
    ///  Example: `instance-1`.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_engine_release" field.</summary>
    public const int AppEngineReleaseFieldNumber = 3;
    private string appEngineRelease_ = "";
    /// <summary>
    ///  App Engine release this instance is running on.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppEngineRelease {
      get { return appEngineRelease_; }
      set {
        appEngineRelease_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "availability" field.</summary>
    public const int AvailabilityFieldNumber = 4;
    private global::Google.Appengine.V1.Instance.Types.Availability availability_ = 0;
    /// <summary>
    ///  Availability of the instance.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Appengine.V1.Instance.Types.Availability Availability {
      get { return availability_; }
      set {
        availability_ = value;
      }
    }

    /// <summary>Field number for the "vm_name" field.</summary>
    public const int VmNameFieldNumber = 5;
    private string vmName_ = "";
    /// <summary>
    ///  Name of the virtual machine where this instance lives. Only applicable
    ///  for instances in App Engine flexible environment.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VmName {
      get { return vmName_; }
      set {
        vmName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vm_zone_name" field.</summary>
    public const int VmZoneNameFieldNumber = 6;
    private string vmZoneName_ = "";
    /// <summary>
    ///  Zone where the virtual machine is located. Only applicable for instances
    ///  in App Engine flexible environment.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VmZoneName {
      get { return vmZoneName_; }
      set {
        vmZoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vm_id" field.</summary>
    public const int VmIdFieldNumber = 7;
    private string vmId_ = "";
    /// <summary>
    ///  Virtual machine ID of this instance. Only applicable for instances in
    ///  App Engine flexible environment.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VmId {
      get { return vmId_; }
      set {
        vmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    ///  Time that this instance was started.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 9;
    private int requests_;
    /// <summary>
    ///  Number of requests since this instance was started.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Requests {
      get { return requests_; }
      set {
        requests_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 10;
    private int errors_;
    /// <summary>
    ///  Number of errors since this instance was started.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errors {
      get { return errors_; }
      set {
        errors_ = value;
      }
    }

    /// <summary>Field number for the "qps" field.</summary>
    public const int QpsFieldNumber = 11;
    private float qps_;
    /// <summary>
    ///  Average queries per second (QPS) over the last minute.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Qps {
      get { return qps_; }
      set {
        qps_ = value;
      }
    }

    /// <summary>Field number for the "average_latency" field.</summary>
    public const int AverageLatencyFieldNumber = 12;
    private int averageLatency_;
    /// <summary>
    ///  Average latency (ms) over the last minute.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AverageLatency {
      get { return averageLatency_; }
      set {
        averageLatency_ = value;
      }
    }

    /// <summary>Field number for the "memory_usage" field.</summary>
    public const int MemoryUsageFieldNumber = 13;
    private long memoryUsage_;
    /// <summary>
    ///  Total memory in use (bytes).
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MemoryUsage {
      get { return memoryUsage_; }
      set {
        memoryUsage_ = value;
      }
    }

    /// <summary>Field number for the "vm_status" field.</summary>
    public const int VmStatusFieldNumber = 14;
    private string vmStatus_ = "";
    /// <summary>
    ///  Status of the virtual machine where this instance lives. Only applicable
    ///  for instances in App Engine flexible environment.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VmStatus {
      get { return vmStatus_; }
      set {
        vmStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vm_debug_enabled" field.</summary>
    public const int VmDebugEnabledFieldNumber = 15;
    private bool vmDebugEnabled_;
    /// <summary>
    ///  Whether this instance is in debug mode. Only applicable for instances in
    ///  App Engine flexible environment.
    ///
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VmDebugEnabled {
      get { return vmDebugEnabled_; }
      set {
        vmDebugEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (AppEngineRelease != other.AppEngineRelease) return false;
      if (Availability != other.Availability) return false;
      if (VmName != other.VmName) return false;
      if (VmZoneName != other.VmZoneName) return false;
      if (VmId != other.VmId) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (Requests != other.Requests) return false;
      if (Errors != other.Errors) return false;
      if (Qps != other.Qps) return false;
      if (AverageLatency != other.AverageLatency) return false;
      if (MemoryUsage != other.MemoryUsage) return false;
      if (VmStatus != other.VmStatus) return false;
      if (VmDebugEnabled != other.VmDebugEnabled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AppEngineRelease.Length != 0) hash ^= AppEngineRelease.GetHashCode();
      if (Availability != 0) hash ^= Availability.GetHashCode();
      if (VmName.Length != 0) hash ^= VmName.GetHashCode();
      if (VmZoneName.Length != 0) hash ^= VmZoneName.GetHashCode();
      if (VmId.Length != 0) hash ^= VmId.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (Requests != 0) hash ^= Requests.GetHashCode();
      if (Errors != 0) hash ^= Errors.GetHashCode();
      if (Qps != 0F) hash ^= Qps.GetHashCode();
      if (AverageLatency != 0) hash ^= AverageLatency.GetHashCode();
      if (MemoryUsage != 0L) hash ^= MemoryUsage.GetHashCode();
      if (VmStatus.Length != 0) hash ^= VmStatus.GetHashCode();
      if (VmDebugEnabled != false) hash ^= VmDebugEnabled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (AppEngineRelease.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppEngineRelease);
      }
      if (Availability != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Availability);
      }
      if (VmName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VmName);
      }
      if (VmZoneName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VmZoneName);
      }
      if (VmId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VmId);
      }
      if (startTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StartTime);
      }
      if (Requests != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Requests);
      }
      if (Errors != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Errors);
      }
      if (Qps != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Qps);
      }
      if (AverageLatency != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AverageLatency);
      }
      if (MemoryUsage != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(MemoryUsage);
      }
      if (VmStatus.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(VmStatus);
      }
      if (VmDebugEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(VmDebugEnabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AppEngineRelease.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppEngineRelease);
      }
      if (Availability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Availability);
      }
      if (VmName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VmName);
      }
      if (VmZoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VmZoneName);
      }
      if (VmId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VmId);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (Requests != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Requests);
      }
      if (Errors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errors);
      }
      if (Qps != 0F) {
        size += 1 + 4;
      }
      if (AverageLatency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AverageLatency);
      }
      if (MemoryUsage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MemoryUsage);
      }
      if (VmStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VmStatus);
      }
      if (VmDebugEnabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instance other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AppEngineRelease.Length != 0) {
        AppEngineRelease = other.AppEngineRelease;
      }
      if (other.Availability != 0) {
        Availability = other.Availability;
      }
      if (other.VmName.Length != 0) {
        VmName = other.VmName;
      }
      if (other.VmZoneName.Length != 0) {
        VmZoneName = other.VmZoneName;
      }
      if (other.VmId.Length != 0) {
        VmId = other.VmId;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.Requests != 0) {
        Requests = other.Requests;
      }
      if (other.Errors != 0) {
        Errors = other.Errors;
      }
      if (other.Qps != 0F) {
        Qps = other.Qps;
      }
      if (other.AverageLatency != 0) {
        AverageLatency = other.AverageLatency;
      }
      if (other.MemoryUsage != 0L) {
        MemoryUsage = other.MemoryUsage;
      }
      if (other.VmStatus.Length != 0) {
        VmStatus = other.VmStatus;
      }
      if (other.VmDebugEnabled != false) {
        VmDebugEnabled = other.VmDebugEnabled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            AppEngineRelease = input.ReadString();
            break;
          }
          case 32: {
            availability_ = (global::Google.Appengine.V1.Instance.Types.Availability) input.ReadEnum();
            break;
          }
          case 42: {
            VmName = input.ReadString();
            break;
          }
          case 50: {
            VmZoneName = input.ReadString();
            break;
          }
          case 58: {
            VmId = input.ReadString();
            break;
          }
          case 66: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 72: {
            Requests = input.ReadInt32();
            break;
          }
          case 80: {
            Errors = input.ReadInt32();
            break;
          }
          case 93: {
            Qps = input.ReadFloat();
            break;
          }
          case 96: {
            AverageLatency = input.ReadInt32();
            break;
          }
          case 104: {
            MemoryUsage = input.ReadInt64();
            break;
          }
          case 114: {
            VmStatus = input.ReadString();
            break;
          }
          case 120: {
            VmDebugEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Instance message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Availability of the instance.
      /// </summary>
      public enum Availability {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("RESIDENT")] Resident = 1,
        [pbr::OriginalName("DYNAMIC")] Dynamic = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
