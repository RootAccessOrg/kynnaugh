// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/admin/v1/iam.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Iam.Admin.V1 {
  /// <summary>
  ///  Creates and manages service account objects.
  ///
  ///  Service account is an account that belongs to your project instead
  ///  of to an individual end user. It is used to authenticate calls
  ///  to a Google API.
  ///
  ///  To create a service account, specify the `project_id` and `account_id`
  ///  for the account.  The `account_id` is unique within the project, and used
  ///  to generate the service account email address and a stable
  ///  `unique_id`.
  ///
  ///  All other methods can identify accounts using the format
  ///  `projects/{project}/serviceAccounts/{account}`.
  ///  Using `-` as a wildcard for the project will infer the project from
  ///  the account. The `account` value can be the `email` address or the
  ///  `unique_id` of the service account.
  /// </summary>
  public static class IAM
  {
    static readonly string __ServiceName = "google.iam.admin.v1.IAM";

    static readonly Marshaller<global::Google.Iam.Admin.V1.ListServiceAccountsRequest> __Marshaller_ListServiceAccountsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.ListServiceAccountsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.ListServiceAccountsResponse> __Marshaller_ListServiceAccountsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.ListServiceAccountsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.GetServiceAccountRequest> __Marshaller_GetServiceAccountRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.GetServiceAccountRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.ServiceAccount> __Marshaller_ServiceAccount = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.ServiceAccount.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.CreateServiceAccountRequest> __Marshaller_CreateServiceAccountRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.CreateServiceAccountRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.DeleteServiceAccountRequest> __Marshaller_DeleteServiceAccountRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.DeleteServiceAccountRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest> __Marshaller_ListServiceAccountKeysRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse> __Marshaller_ListServiceAccountKeysResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest> __Marshaller_GetServiceAccountKeyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.ServiceAccountKey> __Marshaller_ServiceAccountKey = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.ServiceAccountKey.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest> __Marshaller_CreateServiceAccountKeyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest> __Marshaller_DeleteServiceAccountKeyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.SignBlobRequest> __Marshaller_SignBlobRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.SignBlobRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.SignBlobResponse> __Marshaller_SignBlobResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.SignBlobResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_GetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_Policy = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.Policy.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_SetIamPolicyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_TestIamPermissionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_TestIamPermissionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.QueryGrantableRolesRequest> __Marshaller_QueryGrantableRolesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.QueryGrantableRolesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Iam.Admin.V1.QueryGrantableRolesResponse> __Marshaller_QueryGrantableRolesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Iam.Admin.V1.QueryGrantableRolesResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Iam.Admin.V1.ListServiceAccountsRequest, global::Google.Iam.Admin.V1.ListServiceAccountsResponse> __Method_ListServiceAccounts = new Method<global::Google.Iam.Admin.V1.ListServiceAccountsRequest, global::Google.Iam.Admin.V1.ListServiceAccountsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListServiceAccounts",
        __Marshaller_ListServiceAccountsRequest,
        __Marshaller_ListServiceAccountsResponse);

    static readonly Method<global::Google.Iam.Admin.V1.GetServiceAccountRequest, global::Google.Iam.Admin.V1.ServiceAccount> __Method_GetServiceAccount = new Method<global::Google.Iam.Admin.V1.GetServiceAccountRequest, global::Google.Iam.Admin.V1.ServiceAccount>(
        MethodType.Unary,
        __ServiceName,
        "GetServiceAccount",
        __Marshaller_GetServiceAccountRequest,
        __Marshaller_ServiceAccount);

    static readonly Method<global::Google.Iam.Admin.V1.CreateServiceAccountRequest, global::Google.Iam.Admin.V1.ServiceAccount> __Method_CreateServiceAccount = new Method<global::Google.Iam.Admin.V1.CreateServiceAccountRequest, global::Google.Iam.Admin.V1.ServiceAccount>(
        MethodType.Unary,
        __ServiceName,
        "CreateServiceAccount",
        __Marshaller_CreateServiceAccountRequest,
        __Marshaller_ServiceAccount);

    static readonly Method<global::Google.Iam.Admin.V1.ServiceAccount, global::Google.Iam.Admin.V1.ServiceAccount> __Method_UpdateServiceAccount = new Method<global::Google.Iam.Admin.V1.ServiceAccount, global::Google.Iam.Admin.V1.ServiceAccount>(
        MethodType.Unary,
        __ServiceName,
        "UpdateServiceAccount",
        __Marshaller_ServiceAccount,
        __Marshaller_ServiceAccount);

    static readonly Method<global::Google.Iam.Admin.V1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceAccount = new Method<global::Google.Iam.Admin.V1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteServiceAccount",
        __Marshaller_DeleteServiceAccountRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest, global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse> __Method_ListServiceAccountKeys = new Method<global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest, global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListServiceAccountKeys",
        __Marshaller_ListServiceAccountKeysRequest,
        __Marshaller_ListServiceAccountKeysResponse);

    static readonly Method<global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest, global::Google.Iam.Admin.V1.ServiceAccountKey> __Method_GetServiceAccountKey = new Method<global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest, global::Google.Iam.Admin.V1.ServiceAccountKey>(
        MethodType.Unary,
        __ServiceName,
        "GetServiceAccountKey",
        __Marshaller_GetServiceAccountKeyRequest,
        __Marshaller_ServiceAccountKey);

    static readonly Method<global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest, global::Google.Iam.Admin.V1.ServiceAccountKey> __Method_CreateServiceAccountKey = new Method<global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest, global::Google.Iam.Admin.V1.ServiceAccountKey>(
        MethodType.Unary,
        __ServiceName,
        "CreateServiceAccountKey",
        __Marshaller_CreateServiceAccountKeyRequest,
        __Marshaller_ServiceAccountKey);

    static readonly Method<global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceAccountKey = new Method<global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteServiceAccountKey",
        __Marshaller_DeleteServiceAccountKeyRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Iam.Admin.V1.SignBlobRequest, global::Google.Iam.Admin.V1.SignBlobResponse> __Method_SignBlob = new Method<global::Google.Iam.Admin.V1.SignBlobRequest, global::Google.Iam.Admin.V1.SignBlobResponse>(
        MethodType.Unary,
        __ServiceName,
        "SignBlob",
        __Marshaller_SignBlobRequest,
        __Marshaller_SignBlobResponse);

    static readonly Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_GetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_SetIamPolicyRequest,
        __Marshaller_Policy);

    static readonly Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_TestIamPermissionsRequest,
        __Marshaller_TestIamPermissionsResponse);

    static readonly Method<global::Google.Iam.Admin.V1.QueryGrantableRolesRequest, global::Google.Iam.Admin.V1.QueryGrantableRolesResponse> __Method_QueryGrantableRoles = new Method<global::Google.Iam.Admin.V1.QueryGrantableRolesRequest, global::Google.Iam.Admin.V1.QueryGrantableRolesResponse>(
        MethodType.Unary,
        __ServiceName,
        "QueryGrantableRoles",
        __Marshaller_QueryGrantableRolesRequest,
        __Marshaller_QueryGrantableRolesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Iam.Admin.V1.IamReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IAM</summary>
    public abstract class IAMBase
    {
      /// <summary>
      ///  Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ListServiceAccountsResponse> ListServiceAccounts(global::Google.Iam.Admin.V1.ListServiceAccountsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ServiceAccount> GetServiceAccount(global::Google.Iam.Admin.V1.GetServiceAccountRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
      ///  and returns it.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ServiceAccount> CreateServiceAccount(global::Google.Iam.Admin.V1.CreateServiceAccountRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      ///  Currently, only the following fields are updatable:
      ///  `display_name` .
      ///  The `etag` is mandatory.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ServiceAccount> UpdateServiceAccount(global::Google.Iam.Admin.V1.ServiceAccount request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccount(global::Google.Iam.Admin.V1.DeleteServiceAccountRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse> ListServiceAccountKeys(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  by key id.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ServiceAccountKey> GetServiceAccountKey(global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  and returns it.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.ServiceAccountKey> CreateServiceAccountKey(global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountKey(global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Signs a blob using a service account's system-managed private key.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.SignBlobResponse> SignBlob(global::Google.Iam.Admin.V1.SignBlobRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Sets the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Tests the specified permissions against the IAM access control policy
      ///  for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Queries roles that can be granted on a particular resource.
      ///  A role is grantable if it can be used as the role in a binding for a policy
      ///  for that resource.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Iam.Admin.V1.QueryGrantableRolesResponse> QueryGrantableRoles(global::Google.Iam.Admin.V1.QueryGrantableRolesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IAM</summary>
    public class IAMClient : ClientBase<IAMClient>
    {
      /// <summary>Creates a new client for IAM</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IAMClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IAM that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IAMClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IAMClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IAMClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ListServiceAccountsResponse ListServiceAccounts(global::Google.Iam.Admin.V1.ListServiceAccountsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListServiceAccounts(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ListServiceAccountsResponse ListServiceAccounts(global::Google.Iam.Admin.V1.ListServiceAccountsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServiceAccounts, null, options, request);
      }
      /// <summary>
      ///  Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ListServiceAccountsResponse> ListServiceAccountsAsync(global::Google.Iam.Admin.V1.ListServiceAccountsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListServiceAccountsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ListServiceAccountsResponse> ListServiceAccountsAsync(global::Google.Iam.Admin.V1.ListServiceAccountsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServiceAccounts, null, options, request);
      }
      /// <summary>
      ///  Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccount GetServiceAccount(global::Google.Iam.Admin.V1.GetServiceAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServiceAccount(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccount GetServiceAccount(global::Google.Iam.Admin.V1.GetServiceAccountRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccount> GetServiceAccountAsync(global::Google.Iam.Admin.V1.GetServiceAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServiceAccountAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccount> GetServiceAccountAsync(global::Google.Iam.Admin.V1.GetServiceAccountRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
      ///  and returns it.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccount CreateServiceAccount(global::Google.Iam.Admin.V1.CreateServiceAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateServiceAccount(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
      ///  and returns it.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccount CreateServiceAccount(global::Google.Iam.Admin.V1.CreateServiceAccountRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
      ///  and returns it.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccount> CreateServiceAccountAsync(global::Google.Iam.Admin.V1.CreateServiceAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateServiceAccountAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
      ///  and returns it.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccount> CreateServiceAccountAsync(global::Google.Iam.Admin.V1.CreateServiceAccountRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      ///  Currently, only the following fields are updatable:
      ///  `display_name` .
      ///  The `etag` is mandatory.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccount UpdateServiceAccount(global::Google.Iam.Admin.V1.ServiceAccount request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateServiceAccount(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      ///  Currently, only the following fields are updatable:
      ///  `display_name` .
      ///  The `etag` is mandatory.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccount UpdateServiceAccount(global::Google.Iam.Admin.V1.ServiceAccount request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      ///  Currently, only the following fields are updatable:
      ///  `display_name` .
      ///  The `etag` is mandatory.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccount> UpdateServiceAccountAsync(global::Google.Iam.Admin.V1.ServiceAccount request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateServiceAccountAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      ///  Currently, only the following fields are updatable:
      ///  `display_name` .
      ///  The `etag` is mandatory.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccount> UpdateServiceAccountAsync(global::Google.Iam.Admin.V1.ServiceAccount request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccount(global::Google.Iam.Admin.V1.DeleteServiceAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteServiceAccount(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccount(global::Google.Iam.Admin.V1.DeleteServiceAccountRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountAsync(global::Google.Iam.Admin.V1.DeleteServiceAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteServiceAccountAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountAsync(global::Google.Iam.Admin.V1.DeleteServiceAccountRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceAccount, null, options, request);
      }
      /// <summary>
      ///  Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse ListServiceAccountKeys(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListServiceAccountKeys(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse ListServiceAccountKeys(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServiceAccountKeys, null, options, request);
      }
      /// <summary>
      ///  Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse> ListServiceAccountKeysAsync(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListServiceAccountKeysAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ListServiceAccountKeysResponse> ListServiceAccountKeysAsync(global::Google.Iam.Admin.V1.ListServiceAccountKeysRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServiceAccountKeys, null, options, request);
      }
      /// <summary>
      ///  Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  by key id.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccountKey GetServiceAccountKey(global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServiceAccountKey(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  by key id.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccountKey GetServiceAccountKey(global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceAccountKey, null, options, request);
      }
      /// <summary>
      ///  Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  by key id.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccountKey> GetServiceAccountKeyAsync(global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetServiceAccountKeyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  by key id.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccountKey> GetServiceAccountKeyAsync(global::Google.Iam.Admin.V1.GetServiceAccountKeyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceAccountKey, null, options, request);
      }
      /// <summary>
      ///  Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  and returns it.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccountKey CreateServiceAccountKey(global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateServiceAccountKey(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  and returns it.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.ServiceAccountKey CreateServiceAccountKey(global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceAccountKey, null, options, request);
      }
      /// <summary>
      ///  Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  and returns it.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccountKey> CreateServiceAccountKeyAsync(global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateServiceAccountKeyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
      ///  and returns it.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.ServiceAccountKey> CreateServiceAccountKeyAsync(global::Google.Iam.Admin.V1.CreateServiceAccountKeyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceAccountKey, null, options, request);
      }
      /// <summary>
      ///  Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccountKey(global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteServiceAccountKey(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccountKey(global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceAccountKey, null, options, request);
      }
      /// <summary>
      ///  Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountKeyAsync(global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteServiceAccountKeyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountKeyAsync(global::Google.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceAccountKey, null, options, request);
      }
      /// <summary>
      ///  Signs a blob using a service account's system-managed private key.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.SignBlobResponse SignBlob(global::Google.Iam.Admin.V1.SignBlobRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SignBlob(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Signs a blob using a service account's system-managed private key.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.SignBlobResponse SignBlob(global::Google.Iam.Admin.V1.SignBlobRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignBlob, null, options, request);
      }
      /// <summary>
      ///  Signs a blob using a service account's system-managed private key.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.SignBlobResponse> SignBlobAsync(global::Google.Iam.Admin.V1.SignBlobRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SignBlobAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Signs a blob using a service account's system-managed private key.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.SignBlobResponse> SignBlobAsync(global::Google.Iam.Admin.V1.SignBlobRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignBlob, null, options, request);
      }
      /// <summary>
      ///  Returns the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Returns the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Sets the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Sets the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetIamPolicyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets the IAM access control policy for a
      ///  [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      ///  Tests the specified permissions against the IAM access control policy
      ///  for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Tests the specified permissions against the IAM access control policy
      ///  for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      ///  Tests the specified permissions against the IAM access control policy
      ///  for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestIamPermissionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Tests the specified permissions against the IAM access control policy
      ///  for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      ///  Queries roles that can be granted on a particular resource.
      ///  A role is grantable if it can be used as the role in a binding for a policy
      ///  for that resource.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.QueryGrantableRolesResponse QueryGrantableRoles(global::Google.Iam.Admin.V1.QueryGrantableRolesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryGrantableRoles(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Queries roles that can be granted on a particular resource.
      ///  A role is grantable if it can be used as the role in a binding for a policy
      ///  for that resource.
      /// </summary>
      public virtual global::Google.Iam.Admin.V1.QueryGrantableRolesResponse QueryGrantableRoles(global::Google.Iam.Admin.V1.QueryGrantableRolesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryGrantableRoles, null, options, request);
      }
      /// <summary>
      ///  Queries roles that can be granted on a particular resource.
      ///  A role is grantable if it can be used as the role in a binding for a policy
      ///  for that resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.QueryGrantableRolesResponse> QueryGrantableRolesAsync(global::Google.Iam.Admin.V1.QueryGrantableRolesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryGrantableRolesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Queries roles that can be granted on a particular resource.
      ///  A role is grantable if it can be used as the role in a binding for a policy
      ///  for that resource.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Iam.Admin.V1.QueryGrantableRolesResponse> QueryGrantableRolesAsync(global::Google.Iam.Admin.V1.QueryGrantableRolesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryGrantableRoles, null, options, request);
      }
      protected override IAMClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IAMClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(IAMBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListServiceAccounts, serviceImpl.ListServiceAccounts)
          .AddMethod(__Method_GetServiceAccount, serviceImpl.GetServiceAccount)
          .AddMethod(__Method_CreateServiceAccount, serviceImpl.CreateServiceAccount)
          .AddMethod(__Method_UpdateServiceAccount, serviceImpl.UpdateServiceAccount)
          .AddMethod(__Method_DeleteServiceAccount, serviceImpl.DeleteServiceAccount)
          .AddMethod(__Method_ListServiceAccountKeys, serviceImpl.ListServiceAccountKeys)
          .AddMethod(__Method_GetServiceAccountKey, serviceImpl.GetServiceAccountKey)
          .AddMethod(__Method_CreateServiceAccountKey, serviceImpl.CreateServiceAccountKey)
          .AddMethod(__Method_DeleteServiceAccountKey, serviceImpl.DeleteServiceAccountKey)
          .AddMethod(__Method_SignBlob, serviceImpl.SignBlob)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_QueryGrantableRoles, serviceImpl.QueryGrantableRoles).Build();
    }

  }
}
#endregion
