// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/references.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Genomics.V1 {

  /// <summary>Holder for reflection information generated from google/genomics/v1/references.proto</summary>
  public static partial class ReferencesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/genomics/v1/references.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReferencesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNnb29nbGUvZ2Vub21pY3MvdjEvcmVmZXJlbmNlcy5wcm90bxISZ29vZ2xl",
            "Lmdlbm9taWNzLnYxGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvIpAB",
            "CglSZWZlcmVuY2USCgoCaWQYASABKAkSDgoGbGVuZ3RoGAIgASgDEhMKC21k",
            "NWNoZWNrc3VtGAMgASgJEgwKBG5hbWUYBCABKAkSEgoKc291cmNlX3VyaRgF",
            "IAEoCRIZChFzb3VyY2VfYWNjZXNzaW9ucxgGIAMoCRIVCg1uY2JpX3RheG9u",
            "X2lkGAcgASgFIrYBCgxSZWZlcmVuY2VTZXQSCgoCaWQYASABKAkSFQoNcmVm",
            "ZXJlbmNlX2lkcxgCIAMoCRITCgttZDVjaGVja3N1bRgDIAEoCRIVCg1uY2Jp",
            "X3RheG9uX2lkGAQgASgFEhMKC2Rlc2NyaXB0aW9uGAUgASgJEhMKC2Fzc2Vt",
            "Ymx5X2lkGAYgASgJEhIKCnNvdXJjZV91cmkYByABKAkSGQoRc291cmNlX2Fj",
            "Y2Vzc2lvbnMYCCADKAkiggEKGlNlYXJjaFJlZmVyZW5jZVNldHNSZXF1ZXN0",
            "EhQKDG1kNWNoZWNrc3VtcxgBIAMoCRISCgphY2Nlc3Npb25zGAIgAygJEhMK",
            "C2Fzc2VtYmx5X2lkGAMgASgJEhIKCnBhZ2VfdG9rZW4YBCABKAkSEQoJcGFn",
            "ZV9zaXplGAUgASgFInAKG1NlYXJjaFJlZmVyZW5jZVNldHNSZXNwb25zZRI4",
            "Cg5yZWZlcmVuY2Vfc2V0cxgBIAMoCzIgLmdvb2dsZS5nZW5vbWljcy52MS5S",
            "ZWZlcmVuY2VTZXQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIjIKFkdldFJl",
            "ZmVyZW5jZVNldFJlcXVlc3QSGAoQcmVmZXJlbmNlX3NldF9pZBgBIAEoCSKE",
            "AQoXU2VhcmNoUmVmZXJlbmNlc1JlcXVlc3QSFAoMbWQ1Y2hlY2tzdW1zGAEg",
            "AygJEhIKCmFjY2Vzc2lvbnMYAiADKAkSGAoQcmVmZXJlbmNlX3NldF9pZBgD",
            "IAEoCRISCgpwYWdlX3Rva2VuGAQgASgJEhEKCXBhZ2Vfc2l6ZRgFIAEoBSJm",
            "ChhTZWFyY2hSZWZlcmVuY2VzUmVzcG9uc2USMQoKcmVmZXJlbmNlcxgBIAMo",
            "CzIdLmdvb2dsZS5nZW5vbWljcy52MS5SZWZlcmVuY2USFwoPbmV4dF9wYWdl",
            "X3Rva2VuGAIgASgJIisKE0dldFJlZmVyZW5jZVJlcXVlc3QSFAoMcmVmZXJl",
            "bmNlX2lkGAEgASgJImsKEExpc3RCYXNlc1JlcXVlc3QSFAoMcmVmZXJlbmNl",
            "X2lkGAEgASgJEg0KBXN0YXJ0GAIgASgDEgsKA2VuZBgDIAEoAxISCgpwYWdl",
            "X3Rva2VuGAQgASgJEhEKCXBhZ2Vfc2l6ZRgFIAEoBSJOChFMaXN0QmFzZXNS",
            "ZXNwb25zZRIOCgZvZmZzZXQYASABKAMSEAoIc2VxdWVuY2UYAiABKAkSFwoP",
            "bmV4dF9wYWdlX3Rva2VuGAMgASgJMtsFChJSZWZlcmVuY2VTZXJ2aWNlVjES",
            "mwEKE1NlYXJjaFJlZmVyZW5jZVNldHMSLi5nb29nbGUuZ2Vub21pY3MudjEu",
            "U2VhcmNoUmVmZXJlbmNlU2V0c1JlcXVlc3QaLy5nb29nbGUuZ2Vub21pY3Mu",
            "djEuU2VhcmNoUmVmZXJlbmNlU2V0c1Jlc3BvbnNlIiOC0+STAh0iGC92MS9y",
            "ZWZlcmVuY2VzZXRzL3NlYXJjaDoBKhKNAQoPR2V0UmVmZXJlbmNlU2V0Eiou",
            "Z29vZ2xlLmdlbm9taWNzLnYxLkdldFJlZmVyZW5jZVNldFJlcXVlc3QaIC5n",
            "b29nbGUuZ2Vub21pY3MudjEuUmVmZXJlbmNlU2V0IiyC0+STAiYSJC92MS9y",
            "ZWZlcmVuY2VzZXRzL3tyZWZlcmVuY2Vfc2V0X2lkfRKPAQoQU2VhcmNoUmVm",
            "ZXJlbmNlcxIrLmdvb2dsZS5nZW5vbWljcy52MS5TZWFyY2hSZWZlcmVuY2Vz",
            "UmVxdWVzdBosLmdvb2dsZS5nZW5vbWljcy52MS5TZWFyY2hSZWZlcmVuY2Vz",
            "UmVzcG9uc2UiIILT5JMCGiIVL3YxL3JlZmVyZW5jZXMvc2VhcmNoOgEqEn0K",
            "DEdldFJlZmVyZW5jZRInLmdvb2dsZS5nZW5vbWljcy52MS5HZXRSZWZlcmVu",
            "Y2VSZXF1ZXN0Gh0uZ29vZ2xlLmdlbm9taWNzLnYxLlJlZmVyZW5jZSIlgtPk",
            "kwIfEh0vdjEvcmVmZXJlbmNlcy97cmVmZXJlbmNlX2lkfRKFAQoJTGlzdEJh",
            "c2VzEiQuZ29vZ2xlLmdlbm9taWNzLnYxLkxpc3RCYXNlc1JlcXVlc3QaJS5n",
            "b29nbGUuZ2Vub21pY3MudjEuTGlzdEJhc2VzUmVzcG9uc2UiK4LT5JMCJRIj",
            "L3YxL3JlZmVyZW5jZXMve3JlZmVyZW5jZV9pZH0vYmFzZXNCagoWY29tLmdv",
            "b2dsZS5nZW5vbWljcy52MUIPUmVmZXJlbmNlc1Byb3RvUAFaOmdvb2dsZS5n",
            "b2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ2Vub21pY3MvdjE7Z2Vu",
            "b21pY3P4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.Reference), global::Google.Genomics.V1.Reference.Parser, new[]{ "Id", "Length", "Md5Checksum", "Name", "SourceUri", "SourceAccessions", "NcbiTaxonId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ReferenceSet), global::Google.Genomics.V1.ReferenceSet.Parser, new[]{ "Id", "ReferenceIds", "Md5Checksum", "NcbiTaxonId", "Description", "AssemblyId", "SourceUri", "SourceAccessions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReferenceSetsRequest), global::Google.Genomics.V1.SearchReferenceSetsRequest.Parser, new[]{ "Md5Checksums", "Accessions", "AssemblyId", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReferenceSetsResponse), global::Google.Genomics.V1.SearchReferenceSetsResponse.Parser, new[]{ "ReferenceSets", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetReferenceSetRequest), global::Google.Genomics.V1.GetReferenceSetRequest.Parser, new[]{ "ReferenceSetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReferencesRequest), global::Google.Genomics.V1.SearchReferencesRequest.Parser, new[]{ "Md5Checksums", "Accessions", "ReferenceSetId", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.SearchReferencesResponse), global::Google.Genomics.V1.SearchReferencesResponse.Parser, new[]{ "References", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.GetReferenceRequest), global::Google.Genomics.V1.GetReferenceRequest.Parser, new[]{ "ReferenceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ListBasesRequest), global::Google.Genomics.V1.ListBasesRequest.Parser, new[]{ "ReferenceId", "Start", "End", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ListBasesResponse), global::Google.Genomics.V1.ListBasesResponse.Parser, new[]{ "Offset", "Sequence", "NextPageToken" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  A reference is a canonical assembled DNA sequence, intended to act as a
  ///  reference coordinate space for other genomic annotations. A single reference
  ///  might represent the human chromosome 1 or mitochandrial DNA, for instance. A
  ///  reference belongs to one or more reference sets.
  ///
  ///  For more genomics resource definitions, see [Fundamentals of Google
  ///  Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  /// </summary>
  public sealed partial class Reference : pb::IMessage<Reference> {
    private static readonly pb::MessageParser<Reference> _parser = new pb::MessageParser<Reference>(() => new Reference());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reference(Reference other) : this() {
      id_ = other.id_;
      length_ = other.length_;
      md5Checksum_ = other.md5Checksum_;
      name_ = other.name_;
      sourceUri_ = other.sourceUri_;
      sourceAccessions_ = other.sourceAccessions_.Clone();
      ncbiTaxonId_ = other.ncbiTaxonId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reference Clone() {
      return new Reference(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  The server-generated reference ID, unique across all references.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private long length_;
    /// <summary>
    ///  The length of this reference's sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "md5checksum" field.</summary>
    public const int Md5ChecksumFieldNumber = 3;
    private string md5Checksum_ = "";
    /// <summary>
    ///  MD5 of the upper-case sequence excluding all whitespace characters (this
    ///  is equivalent to SQ:M5 in SAM). This value is represented in lower case
    ///  hexadecimal format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Md5Checksum {
      get { return md5Checksum_; }
      set {
        md5Checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///  The name of this reference, for example `22`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_uri" field.</summary>
    public const int SourceUriFieldNumber = 5;
    private string sourceUri_ = "";
    /// <summary>
    ///  The URI from which the sequence was obtained. Typically specifies a FASTA
    ///  format file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceUri {
      get { return sourceUri_; }
      set {
        sourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_accessions" field.</summary>
    public const int SourceAccessionsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_sourceAccessions_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> sourceAccessions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
    ///  with a version number, for example `GCF_000001405.26`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SourceAccessions {
      get { return sourceAccessions_; }
    }

    /// <summary>Field number for the "ncbi_taxon_id" field.</summary>
    public const int NcbiTaxonIdFieldNumber = 7;
    private int ncbiTaxonId_;
    /// <summary>
    ///  ID from http://www.ncbi.nlm.nih.gov/taxonomy. For example, 9606 for human.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NcbiTaxonId {
      get { return ncbiTaxonId_; }
      set {
        ncbiTaxonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Length != other.Length) return false;
      if (Md5Checksum != other.Md5Checksum) return false;
      if (Name != other.Name) return false;
      if (SourceUri != other.SourceUri) return false;
      if(!sourceAccessions_.Equals(other.sourceAccessions_)) return false;
      if (NcbiTaxonId != other.NcbiTaxonId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Length != 0L) hash ^= Length.GetHashCode();
      if (Md5Checksum.Length != 0) hash ^= Md5Checksum.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SourceUri.Length != 0) hash ^= SourceUri.GetHashCode();
      hash ^= sourceAccessions_.GetHashCode();
      if (NcbiTaxonId != 0) hash ^= NcbiTaxonId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Length != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Length);
      }
      if (Md5Checksum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Md5Checksum);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (SourceUri.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SourceUri);
      }
      sourceAccessions_.WriteTo(output, _repeated_sourceAccessions_codec);
      if (NcbiTaxonId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NcbiTaxonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Length != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Length);
      }
      if (Md5Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5Checksum);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SourceUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceUri);
      }
      size += sourceAccessions_.CalculateSize(_repeated_sourceAccessions_codec);
      if (NcbiTaxonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NcbiTaxonId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reference other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Length != 0L) {
        Length = other.Length;
      }
      if (other.Md5Checksum.Length != 0) {
        Md5Checksum = other.Md5Checksum;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SourceUri.Length != 0) {
        SourceUri = other.SourceUri;
      }
      sourceAccessions_.Add(other.sourceAccessions_);
      if (other.NcbiTaxonId != 0) {
        NcbiTaxonId = other.NcbiTaxonId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Length = input.ReadInt64();
            break;
          }
          case 26: {
            Md5Checksum = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            SourceUri = input.ReadString();
            break;
          }
          case 50: {
            sourceAccessions_.AddEntriesFrom(input, _repeated_sourceAccessions_codec);
            break;
          }
          case 56: {
            NcbiTaxonId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A reference set is a set of references which typically comprise a reference
  ///  assembly for a species, such as `GRCh38` which is representative
  ///  of the human genome. A reference set defines a common coordinate space for
  ///  comparing reference-aligned experimental data. A reference set contains 1 or
  ///  more references.
  ///
  ///  For more genomics resource definitions, see [Fundamentals of Google
  ///  Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  /// </summary>
  public sealed partial class ReferenceSet : pb::IMessage<ReferenceSet> {
    private static readonly pb::MessageParser<ReferenceSet> _parser = new pb::MessageParser<ReferenceSet>(() => new ReferenceSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceSet(ReferenceSet other) : this() {
      id_ = other.id_;
      referenceIds_ = other.referenceIds_.Clone();
      md5Checksum_ = other.md5Checksum_;
      ncbiTaxonId_ = other.ncbiTaxonId_;
      description_ = other.description_;
      assemblyId_ = other.assemblyId_;
      sourceUri_ = other.sourceUri_;
      sourceAccessions_ = other.sourceAccessions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceSet Clone() {
      return new ReferenceSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  The server-generated reference set ID, unique across all reference sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_ids" field.</summary>
    public const int ReferenceIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_referenceIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> referenceIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The IDs of the reference objects that are part of this set.
    ///  `Reference.md5checksum` must be unique within this set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReferenceIds {
      get { return referenceIds_; }
    }

    /// <summary>Field number for the "md5checksum" field.</summary>
    public const int Md5ChecksumFieldNumber = 3;
    private string md5Checksum_ = "";
    /// <summary>
    ///  Order-independent MD5 checksum which identifies this reference set. The
    ///  checksum is computed by sorting all lower case hexidecimal string
    ///  `reference.md5checksum` (for all reference in this set) in
    ///  ascending lexicographic order, concatenating, and taking the MD5 of that
    ///  value. The resulting value is represented in lower case hexadecimal format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Md5Checksum {
      get { return md5Checksum_; }
      set {
        md5Checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ncbi_taxon_id" field.</summary>
    public const int NcbiTaxonIdFieldNumber = 4;
    private int ncbiTaxonId_;
    /// <summary>
    ///  ID from http://www.ncbi.nlm.nih.gov/taxonomy (for example, 9606 for human)
    ///  indicating the species which this reference set is intended to model. Note
    ///  that contained references may specify a different `ncbiTaxonId`, as
    ///  assemblies may contain reference sequences which do not belong to the
    ///  modeled species, for example EBV in a human reference genome.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NcbiTaxonId {
      get { return ncbiTaxonId_; }
      set {
        ncbiTaxonId_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///  Free text description of this reference set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assembly_id" field.</summary>
    public const int AssemblyIdFieldNumber = 6;
    private string assemblyId_ = "";
    /// <summary>
    ///  Public id of this reference set, such as `GRCh37`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssemblyId {
      get { return assemblyId_; }
      set {
        assemblyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_uri" field.</summary>
    public const int SourceUriFieldNumber = 7;
    private string sourceUri_ = "";
    /// <summary>
    ///  The URI from which the references were obtained.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceUri {
      get { return sourceUri_; }
      set {
        sourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_accessions" field.</summary>
    public const int SourceAccessionsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_sourceAccessions_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> sourceAccessions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
    ///  with a version number, for example `NC_000001.11`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SourceAccessions {
      get { return sourceAccessions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!referenceIds_.Equals(other.referenceIds_)) return false;
      if (Md5Checksum != other.Md5Checksum) return false;
      if (NcbiTaxonId != other.NcbiTaxonId) return false;
      if (Description != other.Description) return false;
      if (AssemblyId != other.AssemblyId) return false;
      if (SourceUri != other.SourceUri) return false;
      if(!sourceAccessions_.Equals(other.sourceAccessions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= referenceIds_.GetHashCode();
      if (Md5Checksum.Length != 0) hash ^= Md5Checksum.GetHashCode();
      if (NcbiTaxonId != 0) hash ^= NcbiTaxonId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AssemblyId.Length != 0) hash ^= AssemblyId.GetHashCode();
      if (SourceUri.Length != 0) hash ^= SourceUri.GetHashCode();
      hash ^= sourceAccessions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      referenceIds_.WriteTo(output, _repeated_referenceIds_codec);
      if (Md5Checksum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Md5Checksum);
      }
      if (NcbiTaxonId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NcbiTaxonId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (AssemblyId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AssemblyId);
      }
      if (SourceUri.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SourceUri);
      }
      sourceAccessions_.WriteTo(output, _repeated_sourceAccessions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += referenceIds_.CalculateSize(_repeated_referenceIds_codec);
      if (Md5Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5Checksum);
      }
      if (NcbiTaxonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NcbiTaxonId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AssemblyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssemblyId);
      }
      if (SourceUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceUri);
      }
      size += sourceAccessions_.CalculateSize(_repeated_sourceAccessions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      referenceIds_.Add(other.referenceIds_);
      if (other.Md5Checksum.Length != 0) {
        Md5Checksum = other.Md5Checksum;
      }
      if (other.NcbiTaxonId != 0) {
        NcbiTaxonId = other.NcbiTaxonId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AssemblyId.Length != 0) {
        AssemblyId = other.AssemblyId;
      }
      if (other.SourceUri.Length != 0) {
        SourceUri = other.SourceUri;
      }
      sourceAccessions_.Add(other.sourceAccessions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            referenceIds_.AddEntriesFrom(input, _repeated_referenceIds_codec);
            break;
          }
          case 26: {
            Md5Checksum = input.ReadString();
            break;
          }
          case 32: {
            NcbiTaxonId = input.ReadInt32();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            AssemblyId = input.ReadString();
            break;
          }
          case 58: {
            SourceUri = input.ReadString();
            break;
          }
          case 66: {
            sourceAccessions_.AddEntriesFrom(input, _repeated_sourceAccessions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchReferenceSetsRequest : pb::IMessage<SearchReferenceSetsRequest> {
    private static readonly pb::MessageParser<SearchReferenceSetsRequest> _parser = new pb::MessageParser<SearchReferenceSetsRequest>(() => new SearchReferenceSetsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReferenceSetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferenceSetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferenceSetsRequest(SearchReferenceSetsRequest other) : this() {
      md5Checksums_ = other.md5Checksums_.Clone();
      accessions_ = other.accessions_.Clone();
      assemblyId_ = other.assemblyId_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferenceSetsRequest Clone() {
      return new SearchReferenceSetsRequest(this);
    }

    /// <summary>Field number for the "md5checksums" field.</summary>
    public const int Md5ChecksumsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_md5Checksums_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> md5Checksums_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If present, return reference sets for which the
    ///  [md5checksum][google.genomics.v1.ReferenceSet.md5checksum] matches exactly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Md5Checksums {
      get { return md5Checksums_; }
    }

    /// <summary>Field number for the "accessions" field.</summary>
    public const int AccessionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_accessions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> accessions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If present, return reference sets for which a prefix of any of
    ///  [sourceAccessions][google.genomics.v1.ReferenceSet.source_accessions]
    ///  match any of these strings. Accession numbers typically have a main number
    ///  and a version, for example `NC_000001.11`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Accessions {
      get { return accessions_; }
    }

    /// <summary>Field number for the "assembly_id" field.</summary>
    public const int AssemblyIdFieldNumber = 3;
    private string assemblyId_ = "";
    /// <summary>
    ///  If present, return reference sets for which a substring of their
    ///  `assemblyId` matches this string (case insensitive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssemblyId {
      get { return assemblyId_; }
      set {
        assemblyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 1024. The maximum value is 4096.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReferenceSetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReferenceSetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!md5Checksums_.Equals(other.md5Checksums_)) return false;
      if(!accessions_.Equals(other.accessions_)) return false;
      if (AssemblyId != other.AssemblyId) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= md5Checksums_.GetHashCode();
      hash ^= accessions_.GetHashCode();
      if (AssemblyId.Length != 0) hash ^= AssemblyId.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      md5Checksums_.WriteTo(output, _repeated_md5Checksums_codec);
      accessions_.WriteTo(output, _repeated_accessions_codec);
      if (AssemblyId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssemblyId);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += md5Checksums_.CalculateSize(_repeated_md5Checksums_codec);
      size += accessions_.CalculateSize(_repeated_accessions_codec);
      if (AssemblyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssemblyId);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReferenceSetsRequest other) {
      if (other == null) {
        return;
      }
      md5Checksums_.Add(other.md5Checksums_);
      accessions_.Add(other.accessions_);
      if (other.AssemblyId.Length != 0) {
        AssemblyId = other.AssemblyId;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            md5Checksums_.AddEntriesFrom(input, _repeated_md5Checksums_codec);
            break;
          }
          case 18: {
            accessions_.AddEntriesFrom(input, _repeated_accessions_codec);
            break;
          }
          case 26: {
            AssemblyId = input.ReadString();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchReferenceSetsResponse : pb::IMessage<SearchReferenceSetsResponse> {
    private static readonly pb::MessageParser<SearchReferenceSetsResponse> _parser = new pb::MessageParser<SearchReferenceSetsResponse>(() => new SearchReferenceSetsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReferenceSetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferenceSetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferenceSetsResponse(SearchReferenceSetsResponse other) : this() {
      referenceSets_ = other.referenceSets_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferenceSetsResponse Clone() {
      return new SearchReferenceSetsResponse(this);
    }

    /// <summary>Field number for the "reference_sets" field.</summary>
    public const int ReferenceSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.ReferenceSet> _repeated_referenceSets_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.ReferenceSet.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.ReferenceSet> referenceSets_ = new pbc::RepeatedField<global::Google.Genomics.V1.ReferenceSet>();
    /// <summary>
    ///  The matching references sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.ReferenceSet> ReferenceSets {
      get { return referenceSets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReferenceSetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReferenceSetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!referenceSets_.Equals(other.referenceSets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= referenceSets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      referenceSets_.WriteTo(output, _repeated_referenceSets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += referenceSets_.CalculateSize(_repeated_referenceSets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReferenceSetsResponse other) {
      if (other == null) {
        return;
      }
      referenceSets_.Add(other.referenceSets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            referenceSets_.AddEntriesFrom(input, _repeated_referenceSets_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReferenceSetRequest : pb::IMessage<GetReferenceSetRequest> {
    private static readonly pb::MessageParser<GetReferenceSetRequest> _parser = new pb::MessageParser<GetReferenceSetRequest>(() => new GetReferenceSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReferenceSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReferenceSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReferenceSetRequest(GetReferenceSetRequest other) : this() {
      referenceSetId_ = other.referenceSetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReferenceSetRequest Clone() {
      return new GetReferenceSetRequest(this);
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 1;
    private string referenceSetId_ = "";
    /// <summary>
    ///  The ID of the reference set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReferenceSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReferenceSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferenceSetId != other.ReferenceSetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReferenceSetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReferenceSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReferenceSetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchReferencesRequest : pb::IMessage<SearchReferencesRequest> {
    private static readonly pb::MessageParser<SearchReferencesRequest> _parser = new pb::MessageParser<SearchReferencesRequest>(() => new SearchReferencesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReferencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferencesRequest(SearchReferencesRequest other) : this() {
      md5Checksums_ = other.md5Checksums_.Clone();
      accessions_ = other.accessions_.Clone();
      referenceSetId_ = other.referenceSetId_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferencesRequest Clone() {
      return new SearchReferencesRequest(this);
    }

    /// <summary>Field number for the "md5checksums" field.</summary>
    public const int Md5ChecksumsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_md5Checksums_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> md5Checksums_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If present, return references for which the
    ///  [md5checksum][google.genomics.v1.Reference.md5checksum] matches exactly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Md5Checksums {
      get { return md5Checksums_; }
    }

    /// <summary>Field number for the "accessions" field.</summary>
    public const int AccessionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_accessions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> accessions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  If present, return references for which a prefix of any of
    ///  [sourceAccessions][google.genomics.v1.Reference.source_accessions] match
    ///  any of these strings. Accession numbers typically have a main number and a
    ///  version, for example `GCF_000001405.26`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Accessions {
      get { return accessions_; }
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 3;
    private string referenceSetId_ = "";
    /// <summary>
    ///  If present, return only references which belong to this reference set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of results to return in a single page. If unspecified,
    ///  defaults to 1024. The maximum value is 4096.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReferencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReferencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!md5Checksums_.Equals(other.md5Checksums_)) return false;
      if(!accessions_.Equals(other.accessions_)) return false;
      if (ReferenceSetId != other.ReferenceSetId) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= md5Checksums_.GetHashCode();
      hash ^= accessions_.GetHashCode();
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      md5Checksums_.WriteTo(output, _repeated_md5Checksums_codec);
      accessions_.WriteTo(output, _repeated_accessions_codec);
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferenceSetId);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += md5Checksums_.CalculateSize(_repeated_md5Checksums_codec);
      size += accessions_.CalculateSize(_repeated_accessions_codec);
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReferencesRequest other) {
      if (other == null) {
        return;
      }
      md5Checksums_.Add(other.md5Checksums_);
      accessions_.Add(other.accessions_);
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            md5Checksums_.AddEntriesFrom(input, _repeated_md5Checksums_codec);
            break;
          }
          case 18: {
            accessions_.AddEntriesFrom(input, _repeated_accessions_codec);
            break;
          }
          case 26: {
            ReferenceSetId = input.ReadString();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchReferencesResponse : pb::IMessage<SearchReferencesResponse> {
    private static readonly pb::MessageParser<SearchReferencesResponse> _parser = new pb::MessageParser<SearchReferencesResponse>(() => new SearchReferencesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchReferencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferencesResponse(SearchReferencesResponse other) : this() {
      references_ = other.references_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchReferencesResponse Clone() {
      return new SearchReferencesResponse(this);
    }

    /// <summary>Field number for the "references" field.</summary>
    public const int ReferencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.Reference> _repeated_references_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Genomics.V1.Reference.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.Reference> references_ = new pbc::RepeatedField<global::Google.Genomics.V1.Reference>();
    /// <summary>
    ///  The matching references.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.Reference> References {
      get { return references_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchReferencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchReferencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!references_.Equals(other.references_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= references_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      references_.WriteTo(output, _repeated_references_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += references_.CalculateSize(_repeated_references_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchReferencesResponse other) {
      if (other == null) {
        return;
      }
      references_.Add(other.references_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            references_.AddEntriesFrom(input, _repeated_references_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReferenceRequest : pb::IMessage<GetReferenceRequest> {
    private static readonly pb::MessageParser<GetReferenceRequest> _parser = new pb::MessageParser<GetReferenceRequest>(() => new GetReferenceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReferenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReferenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReferenceRequest(GetReferenceRequest other) : this() {
      referenceId_ = other.referenceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReferenceRequest Clone() {
      return new GetReferenceRequest(this);
    }

    /// <summary>Field number for the "reference_id" field.</summary>
    public const int ReferenceIdFieldNumber = 1;
    private string referenceId_ = "";
    /// <summary>
    ///  The ID of the reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceId {
      get { return referenceId_; }
      set {
        referenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReferenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReferenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferenceId != other.ReferenceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReferenceId.Length != 0) hash ^= ReferenceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReferenceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReferenceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReferenceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReferenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReferenceId.Length != 0) {
        ReferenceId = other.ReferenceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReferenceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListBasesRequest : pb::IMessage<ListBasesRequest> {
    private static readonly pb::MessageParser<ListBasesRequest> _parser = new pb::MessageParser<ListBasesRequest>(() => new ListBasesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBasesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBasesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBasesRequest(ListBasesRequest other) : this() {
      referenceId_ = other.referenceId_;
      start_ = other.start_;
      end_ = other.end_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBasesRequest Clone() {
      return new ListBasesRequest(this);
    }

    /// <summary>Field number for the "reference_id" field.</summary>
    public const int ReferenceIdFieldNumber = 1;
    private string referenceId_ = "";
    /// <summary>
    ///  The ID of the reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceId {
      get { return referenceId_; }
      set {
        referenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private long start_;
    /// <summary>
    ///  The start position (0-based) of this query. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private long end_;
    /// <summary>
    ///  The end position (0-based, exclusive) of this query. Defaults to the length
    ///  of this reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  To get the next page of results, set this parameter to the value of
    ///  `nextPageToken` from the previous response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    ///  The maximum number of bases to return in a single page. If unspecified,
    ///  defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base
    ///  pairs).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBasesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBasesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferenceId != other.ReferenceId) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReferenceId.Length != 0) hash ^= ReferenceId.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReferenceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReferenceId);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(End);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReferenceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceId);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBasesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReferenceId.Length != 0) {
        ReferenceId = other.ReferenceId;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReferenceId = input.ReadString();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
          case 24: {
            End = input.ReadInt64();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListBasesResponse : pb::IMessage<ListBasesResponse> {
    private static readonly pb::MessageParser<ListBasesResponse> _parser = new pb::MessageParser<ListBasesResponse>(() => new ListBasesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBasesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReferencesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBasesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBasesResponse(ListBasesResponse other) : this() {
      offset_ = other.offset_;
      sequence_ = other.sequence_;
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBasesResponse Clone() {
      return new ListBasesResponse(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private long offset_;
    /// <summary>
    ///  The offset position (0-based) of the given `sequence` from the
    ///  start of this `Reference`. This value will differ for each page
    ///  in a paginated request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private string sequence_ = "";
    /// <summary>
    ///  A substring of the bases that make up this reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sequence {
      get { return sequence_; }
      set {
        sequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 3;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The continuation token, which is used to page through large result sets.
    ///  Provide this value in a subsequent request to return the next page of
    ///  results. This field will be empty if there aren't any additional results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBasesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBasesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (Sequence != other.Sequence) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (Sequence.Length != 0) hash ^= Sequence.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Offset);
      }
      if (Sequence.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sequence);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (Sequence.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sequence);
      }
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBasesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.Sequence.Length != 0) {
        Sequence = other.Sequence;
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Offset = input.ReadInt64();
            break;
          }
          case 18: {
            Sequence = input.ReadString();
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
