// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1alpha2/pipelines.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Genomics.V1Alpha2 {
  /// <summary>
  ///  A service for running genomics pipelines.
  /// </summary>
  public static class PipelinesV1Alpha2
  {
    static readonly string __ServiceName = "google.genomics.v1alpha2.PipelinesV1Alpha2";

    static readonly Marshaller<global::Google.Genomics.V1Alpha2.CreatePipelineRequest> __Marshaller_CreatePipelineRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.CreatePipelineRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.Pipeline> __Marshaller_Pipeline = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.Pipeline.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.RunPipelineRequest> __Marshaller_RunPipelineRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.RunPipelineRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.GetPipelineRequest> __Marshaller_GetPipelineRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.GetPipelineRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.ListPipelinesRequest> __Marshaller_ListPipelinesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.ListPipelinesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.ListPipelinesResponse> __Marshaller_ListPipelinesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.ListPipelinesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.DeletePipelineRequest> __Marshaller_DeletePipelineRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.DeletePipelineRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.GetControllerConfigRequest> __Marshaller_GetControllerConfigRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.GetControllerConfigRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.ControllerConfig> __Marshaller_ControllerConfig = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.ControllerConfig.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Genomics.V1Alpha2.SetOperationStatusRequest> __Marshaller_SetOperationStatusRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Genomics.V1Alpha2.SetOperationStatusRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Genomics.V1Alpha2.CreatePipelineRequest, global::Google.Genomics.V1Alpha2.Pipeline> __Method_CreatePipeline = new Method<global::Google.Genomics.V1Alpha2.CreatePipelineRequest, global::Google.Genomics.V1Alpha2.Pipeline>(
        MethodType.Unary,
        __ServiceName,
        "CreatePipeline",
        __Marshaller_CreatePipelineRequest,
        __Marshaller_Pipeline);

    static readonly Method<global::Google.Genomics.V1Alpha2.RunPipelineRequest, global::Google.LongRunning.Operation> __Method_RunPipeline = new Method<global::Google.Genomics.V1Alpha2.RunPipelineRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "RunPipeline",
        __Marshaller_RunPipelineRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Genomics.V1Alpha2.GetPipelineRequest, global::Google.Genomics.V1Alpha2.Pipeline> __Method_GetPipeline = new Method<global::Google.Genomics.V1Alpha2.GetPipelineRequest, global::Google.Genomics.V1Alpha2.Pipeline>(
        MethodType.Unary,
        __ServiceName,
        "GetPipeline",
        __Marshaller_GetPipelineRequest,
        __Marshaller_Pipeline);

    static readonly Method<global::Google.Genomics.V1Alpha2.ListPipelinesRequest, global::Google.Genomics.V1Alpha2.ListPipelinesResponse> __Method_ListPipelines = new Method<global::Google.Genomics.V1Alpha2.ListPipelinesRequest, global::Google.Genomics.V1Alpha2.ListPipelinesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListPipelines",
        __Marshaller_ListPipelinesRequest,
        __Marshaller_ListPipelinesResponse);

    static readonly Method<global::Google.Genomics.V1Alpha2.DeletePipelineRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeletePipeline = new Method<global::Google.Genomics.V1Alpha2.DeletePipelineRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeletePipeline",
        __Marshaller_DeletePipelineRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Genomics.V1Alpha2.GetControllerConfigRequest, global::Google.Genomics.V1Alpha2.ControllerConfig> __Method_GetControllerConfig = new Method<global::Google.Genomics.V1Alpha2.GetControllerConfigRequest, global::Google.Genomics.V1Alpha2.ControllerConfig>(
        MethodType.Unary,
        __ServiceName,
        "GetControllerConfig",
        __Marshaller_GetControllerConfigRequest,
        __Marshaller_ControllerConfig);

    static readonly Method<global::Google.Genomics.V1Alpha2.SetOperationStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetOperationStatus = new Method<global::Google.Genomics.V1Alpha2.SetOperationStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "SetOperationStatus",
        __Marshaller_SetOperationStatusRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Genomics.V1Alpha2.PipelinesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PipelinesV1Alpha2</summary>
    public abstract class PipelinesV1Alpha2Base
    {
      /// <summary>
      ///  Creates a pipeline that can be run later. Create takes a Pipeline that
      ///  has all fields other than `pipelineId` populated, and then returns
      ///  the same pipeline with `pipelineId` populated. This id can be used
      ///  to run the pipeline.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Genomics.V1Alpha2.Pipeline> CreatePipeline(global::Google.Genomics.V1Alpha2.CreatePipelineRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Runs a pipeline. If `pipelineId` is specified in the request, then
      ///  run a saved pipeline. If `ephemeralPipeline` is specified, then run
      ///  that pipeline once without saving a copy.
      ///
      ///  The caller must have READ permission to the project where the pipeline
      ///  is stored and WRITE permission to the project where the pipeline will be
      ///  run, as VMs will be created and storage will be used.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RunPipeline(global::Google.Genomics.V1Alpha2.RunPipelineRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Retrieves a pipeline based on ID.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Genomics.V1Alpha2.Pipeline> GetPipeline(global::Google.Genomics.V1Alpha2.GetPipelineRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists pipelines.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Genomics.V1Alpha2.ListPipelinesResponse> ListPipelines(global::Google.Genomics.V1Alpha2.ListPipelinesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a pipeline based on ID.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeletePipeline(global::Google.Genomics.V1Alpha2.DeletePipelineRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets controller configuration information. Should only be called
      ///  by VMs created by the Pipelines Service and not by end users.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Genomics.V1Alpha2.ControllerConfig> GetControllerConfig(global::Google.Genomics.V1Alpha2.GetControllerConfigRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Sets status of a given operation. All timestamps are sent on each
      ///  call, and the whole series of events is replaced, in case
      ///  intermediate calls are lost. Should only be called by VMs created
      ///  by the Pipelines Service and not by end users.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetOperationStatus(global::Google.Genomics.V1Alpha2.SetOperationStatusRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PipelinesV1Alpha2</summary>
    public class PipelinesV1Alpha2Client : ClientBase<PipelinesV1Alpha2Client>
    {
      /// <summary>Creates a new client for PipelinesV1Alpha2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PipelinesV1Alpha2Client(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PipelinesV1Alpha2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PipelinesV1Alpha2Client(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PipelinesV1Alpha2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PipelinesV1Alpha2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Creates a pipeline that can be run later. Create takes a Pipeline that
      ///  has all fields other than `pipelineId` populated, and then returns
      ///  the same pipeline with `pipelineId` populated. This id can be used
      ///  to run the pipeline.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.Pipeline CreatePipeline(global::Google.Genomics.V1Alpha2.CreatePipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreatePipeline(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a pipeline that can be run later. Create takes a Pipeline that
      ///  has all fields other than `pipelineId` populated, and then returns
      ///  the same pipeline with `pipelineId` populated. This id can be used
      ///  to run the pipeline.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.Pipeline CreatePipeline(global::Google.Genomics.V1Alpha2.CreatePipelineRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePipeline, null, options, request);
      }
      /// <summary>
      ///  Creates a pipeline that can be run later. Create takes a Pipeline that
      ///  has all fields other than `pipelineId` populated, and then returns
      ///  the same pipeline with `pipelineId` populated. This id can be used
      ///  to run the pipeline.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.Pipeline> CreatePipelineAsync(global::Google.Genomics.V1Alpha2.CreatePipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreatePipelineAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a pipeline that can be run later. Create takes a Pipeline that
      ///  has all fields other than `pipelineId` populated, and then returns
      ///  the same pipeline with `pipelineId` populated. This id can be used
      ///  to run the pipeline.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.Pipeline> CreatePipelineAsync(global::Google.Genomics.V1Alpha2.CreatePipelineRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePipeline, null, options, request);
      }
      /// <summary>
      ///  Runs a pipeline. If `pipelineId` is specified in the request, then
      ///  run a saved pipeline. If `ephemeralPipeline` is specified, then run
      ///  that pipeline once without saving a copy.
      ///
      ///  The caller must have READ permission to the project where the pipeline
      ///  is stored and WRITE permission to the project where the pipeline will be
      ///  run, as VMs will be created and storage will be used.
      /// </summary>
      public virtual global::Google.LongRunning.Operation RunPipeline(global::Google.Genomics.V1Alpha2.RunPipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RunPipeline(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Runs a pipeline. If `pipelineId` is specified in the request, then
      ///  run a saved pipeline. If `ephemeralPipeline` is specified, then run
      ///  that pipeline once without saving a copy.
      ///
      ///  The caller must have READ permission to the project where the pipeline
      ///  is stored and WRITE permission to the project where the pipeline will be
      ///  run, as VMs will be created and storage will be used.
      /// </summary>
      public virtual global::Google.LongRunning.Operation RunPipeline(global::Google.Genomics.V1Alpha2.RunPipelineRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunPipeline, null, options, request);
      }
      /// <summary>
      ///  Runs a pipeline. If `pipelineId` is specified in the request, then
      ///  run a saved pipeline. If `ephemeralPipeline` is specified, then run
      ///  that pipeline once without saving a copy.
      ///
      ///  The caller must have READ permission to the project where the pipeline
      ///  is stored and WRITE permission to the project where the pipeline will be
      ///  run, as VMs will be created and storage will be used.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> RunPipelineAsync(global::Google.Genomics.V1Alpha2.RunPipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RunPipelineAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Runs a pipeline. If `pipelineId` is specified in the request, then
      ///  run a saved pipeline. If `ephemeralPipeline` is specified, then run
      ///  that pipeline once without saving a copy.
      ///
      ///  The caller must have READ permission to the project where the pipeline
      ///  is stored and WRITE permission to the project where the pipeline will be
      ///  run, as VMs will be created and storage will be used.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> RunPipelineAsync(global::Google.Genomics.V1Alpha2.RunPipelineRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunPipeline, null, options, request);
      }
      /// <summary>
      ///  Retrieves a pipeline based on ID.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.Pipeline GetPipeline(global::Google.Genomics.V1Alpha2.GetPipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPipeline(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Retrieves a pipeline based on ID.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.Pipeline GetPipeline(global::Google.Genomics.V1Alpha2.GetPipelineRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPipeline, null, options, request);
      }
      /// <summary>
      ///  Retrieves a pipeline based on ID.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.Pipeline> GetPipelineAsync(global::Google.Genomics.V1Alpha2.GetPipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPipelineAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Retrieves a pipeline based on ID.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.Pipeline> GetPipelineAsync(global::Google.Genomics.V1Alpha2.GetPipelineRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPipeline, null, options, request);
      }
      /// <summary>
      ///  Lists pipelines.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.ListPipelinesResponse ListPipelines(global::Google.Genomics.V1Alpha2.ListPipelinesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListPipelines(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists pipelines.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.ListPipelinesResponse ListPipelines(global::Google.Genomics.V1Alpha2.ListPipelinesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPipelines, null, options, request);
      }
      /// <summary>
      ///  Lists pipelines.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.ListPipelinesResponse> ListPipelinesAsync(global::Google.Genomics.V1Alpha2.ListPipelinesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListPipelinesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists pipelines.
      ///
      ///  Caller must have READ permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.ListPipelinesResponse> ListPipelinesAsync(global::Google.Genomics.V1Alpha2.ListPipelinesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPipelines, null, options, request);
      }
      /// <summary>
      ///  Deletes a pipeline based on ID.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePipeline(global::Google.Genomics.V1Alpha2.DeletePipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeletePipeline(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a pipeline based on ID.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePipeline(global::Google.Genomics.V1Alpha2.DeletePipelineRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePipeline, null, options, request);
      }
      /// <summary>
      ///  Deletes a pipeline based on ID.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePipelineAsync(global::Google.Genomics.V1Alpha2.DeletePipelineRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeletePipelineAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a pipeline based on ID.
      ///
      ///  Caller must have WRITE permission to the project.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePipelineAsync(global::Google.Genomics.V1Alpha2.DeletePipelineRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePipeline, null, options, request);
      }
      /// <summary>
      ///  Gets controller configuration information. Should only be called
      ///  by VMs created by the Pipelines Service and not by end users.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.ControllerConfig GetControllerConfig(global::Google.Genomics.V1Alpha2.GetControllerConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetControllerConfig(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets controller configuration information. Should only be called
      ///  by VMs created by the Pipelines Service and not by end users.
      /// </summary>
      public virtual global::Google.Genomics.V1Alpha2.ControllerConfig GetControllerConfig(global::Google.Genomics.V1Alpha2.GetControllerConfigRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetControllerConfig, null, options, request);
      }
      /// <summary>
      ///  Gets controller configuration information. Should only be called
      ///  by VMs created by the Pipelines Service and not by end users.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.ControllerConfig> GetControllerConfigAsync(global::Google.Genomics.V1Alpha2.GetControllerConfigRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetControllerConfigAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets controller configuration information. Should only be called
      ///  by VMs created by the Pipelines Service and not by end users.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Genomics.V1Alpha2.ControllerConfig> GetControllerConfigAsync(global::Google.Genomics.V1Alpha2.GetControllerConfigRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetControllerConfig, null, options, request);
      }
      /// <summary>
      ///  Sets status of a given operation. All timestamps are sent on each
      ///  call, and the whole series of events is replaced, in case
      ///  intermediate calls are lost. Should only be called by VMs created
      ///  by the Pipelines Service and not by end users.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetOperationStatus(global::Google.Genomics.V1Alpha2.SetOperationStatusRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetOperationStatus(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets status of a given operation. All timestamps are sent on each
      ///  call, and the whole series of events is replaced, in case
      ///  intermediate calls are lost. Should only be called by VMs created
      ///  by the Pipelines Service and not by end users.
      /// </summary>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetOperationStatus(global::Google.Genomics.V1Alpha2.SetOperationStatusRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetOperationStatus, null, options, request);
      }
      /// <summary>
      ///  Sets status of a given operation. All timestamps are sent on each
      ///  call, and the whole series of events is replaced, in case
      ///  intermediate calls are lost. Should only be called by VMs created
      ///  by the Pipelines Service and not by end users.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetOperationStatusAsync(global::Google.Genomics.V1Alpha2.SetOperationStatusRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetOperationStatusAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sets status of a given operation. All timestamps are sent on each
      ///  call, and the whole series of events is replaced, in case
      ///  intermediate calls are lost. Should only be called by VMs created
      ///  by the Pipelines Service and not by end users.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetOperationStatusAsync(global::Google.Genomics.V1Alpha2.SetOperationStatusRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetOperationStatus, null, options, request);
      }
      protected override PipelinesV1Alpha2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new PipelinesV1Alpha2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(PipelinesV1Alpha2Base serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreatePipeline, serviceImpl.CreatePipeline)
          .AddMethod(__Method_RunPipeline, serviceImpl.RunPipeline)
          .AddMethod(__Method_GetPipeline, serviceImpl.GetPipeline)
          .AddMethod(__Method_ListPipelines, serviceImpl.ListPipelines)
          .AddMethod(__Method_DeletePipeline, serviceImpl.DeletePipeline)
          .AddMethod(__Method_GetControllerConfig, serviceImpl.GetControllerConfig)
          .AddMethod(__Method_SetOperationStatus, serviceImpl.SetOperationStatus).Build();
    }

  }
}
#endregion
