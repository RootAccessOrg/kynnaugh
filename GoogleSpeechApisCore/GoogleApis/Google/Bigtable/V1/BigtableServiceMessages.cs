// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Bigtable.V1 {

  /// <summary>Holder for reflection information generated from google/bigtable/v1/bigtable_service_messages.proto</summary>
  public static partial class BigtableServiceMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/bigtable/v1/bigtable_service_messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BigtableServiceMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJnb29nbGUvYmlndGFibGUvdjEvYmlndGFibGVfc2VydmljZV9tZXNzYWdl",
            "cy5wcm90bxISZ29vZ2xlLmJpZ3RhYmxlLnYxGiZnb29nbGUvYmlndGFibGUv",
            "djEvYmlndGFibGVfZGF0YS5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJv",
            "dG8iiwIKD1JlYWRSb3dzUmVxdWVzdBISCgp0YWJsZV9uYW1lGAEgASgJEhEK",
            "B3Jvd19rZXkYAiABKAxIABIxCglyb3dfcmFuZ2UYAyABKAsyHC5nb29nbGUu",
            "YmlndGFibGUudjEuUm93UmFuZ2VIABItCgdyb3dfc2V0GAggASgLMhouZ29v",
            "Z2xlLmJpZ3RhYmxlLnYxLlJvd1NldEgAEi0KBmZpbHRlchgFIAEoCzIdLmdv",
            "b2dsZS5iaWd0YWJsZS52MS5Sb3dGaWx0ZXISHgoWYWxsb3dfcm93X2ludGVy",
            "bGVhdmluZxgGIAEoCBIWCg5udW1fcm93c19saW1pdBgHIAEoA0IICgZ0YXJn",
            "ZXQi0AEKEFJlYWRSb3dzUmVzcG9uc2USDwoHcm93X2tleRgBIAEoDBI6CgZj",
            "aHVua3MYAiADKAsyKi5nb29nbGUuYmlndGFibGUudjEuUmVhZFJvd3NSZXNw",
            "b25zZS5DaHVuaxpvCgVDaHVuaxIyCgxyb3dfY29udGVudHMYASABKAsyGi5n",
            "b29nbGUuYmlndGFibGUudjEuRmFtaWx5SAASEwoJcmVzZXRfcm93GAIgASgI",
            "SAASFAoKY29tbWl0X3JvdxgDIAEoCEgAQgcKBWNodW5rIioKFFNhbXBsZVJv",
            "d0tleXNSZXF1ZXN0EhIKCnRhYmxlX25hbWUYASABKAkiPgoVU2FtcGxlUm93",
            "S2V5c1Jlc3BvbnNlEg8KB3Jvd19rZXkYASABKAwSFAoMb2Zmc2V0X2J5dGVz",
            "GAIgASgDImgKEE11dGF0ZVJvd1JlcXVlc3QSEgoKdGFibGVfbmFtZRgBIAEo",
            "CRIPCgdyb3dfa2V5GAIgASgMEi8KCW11dGF0aW9ucxgDIAMoCzIcLmdvb2ds",
            "ZS5iaWd0YWJsZS52MS5NdXRhdGlvbiKwAQoRTXV0YXRlUm93c1JlcXVlc3QS",
            "EgoKdGFibGVfbmFtZRgBIAEoCRI8CgdlbnRyaWVzGAIgAygLMisuZ29vZ2xl",
            "LmJpZ3RhYmxlLnYxLk11dGF0ZVJvd3NSZXF1ZXN0LkVudHJ5GkkKBUVudHJ5",
            "Eg8KB3Jvd19rZXkYASABKAwSLwoJbXV0YXRpb25zGAIgAygLMhwuZ29vZ2xl",
            "LmJpZ3RhYmxlLnYxLk11dGF0aW9uIjoKEk11dGF0ZVJvd3NSZXNwb25zZRIk",
            "CghzdGF0dXNlcxgBIAMoCzISLmdvb2dsZS5ycGMuU3RhdHVzIuUBChhDaGVj",
            "a0FuZE11dGF0ZVJvd1JlcXVlc3QSEgoKdGFibGVfbmFtZRgBIAEoCRIPCgdy",
            "b3dfa2V5GAIgASgMEjcKEHByZWRpY2F0ZV9maWx0ZXIYBiABKAsyHS5nb29n",
            "bGUuYmlndGFibGUudjEuUm93RmlsdGVyEjQKDnRydWVfbXV0YXRpb25zGAQg",
            "AygLMhwuZ29vZ2xlLmJpZ3RhYmxlLnYxLk11dGF0aW9uEjUKD2ZhbHNlX211",
            "dGF0aW9ucxgFIAMoCzIcLmdvb2dsZS5iaWd0YWJsZS52MS5NdXRhdGlvbiI2",
            "ChlDaGVja0FuZE11dGF0ZVJvd1Jlc3BvbnNlEhkKEXByZWRpY2F0ZV9tYXRj",
            "aGVkGAEgASgIIngKGVJlYWRNb2RpZnlXcml0ZVJvd1JlcXVlc3QSEgoKdGFi",
            "bGVfbmFtZRgBIAEoCRIPCgdyb3dfa2V5GAIgASgMEjYKBXJ1bGVzGAMgAygL",
            "MicuZ29vZ2xlLmJpZ3RhYmxlLnYxLlJlYWRNb2RpZnlXcml0ZVJ1bGVCdAoW",
            "Y29tLmdvb2dsZS5iaWd0YWJsZS52MUIcQmlndGFibGVTZXJ2aWNlTWVzc2Fn",
            "ZXNQcm90b1ABWjpnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVh",
            "cGlzL2JpZ3RhYmxlL3YxO2JpZ3RhYmxlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Bigtable.V1.BigtableDataReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.ReadRowsRequest), global::Google.Bigtable.V1.ReadRowsRequest.Parser, new[]{ "TableName", "RowKey", "RowRange", "RowSet", "Filter", "AllowRowInterleaving", "NumRowsLimit" }, new[]{ "Target" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.ReadRowsResponse), global::Google.Bigtable.V1.ReadRowsResponse.Parser, new[]{ "RowKey", "Chunks" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk), global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk.Parser, new[]{ "RowContents", "ResetRow", "CommitRow" }, new[]{ "Chunk" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.SampleRowKeysRequest), global::Google.Bigtable.V1.SampleRowKeysRequest.Parser, new[]{ "TableName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.SampleRowKeysResponse), global::Google.Bigtable.V1.SampleRowKeysResponse.Parser, new[]{ "RowKey", "OffsetBytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.MutateRowRequest), global::Google.Bigtable.V1.MutateRowRequest.Parser, new[]{ "TableName", "RowKey", "Mutations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.MutateRowsRequest), global::Google.Bigtable.V1.MutateRowsRequest.Parser, new[]{ "TableName", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry), global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry.Parser, new[]{ "RowKey", "Mutations" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.MutateRowsResponse), global::Google.Bigtable.V1.MutateRowsResponse.Parser, new[]{ "Statuses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.CheckAndMutateRowRequest), global::Google.Bigtable.V1.CheckAndMutateRowRequest.Parser, new[]{ "TableName", "RowKey", "PredicateFilter", "TrueMutations", "FalseMutations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.CheckAndMutateRowResponse), global::Google.Bigtable.V1.CheckAndMutateRowResponse.Parser, new[]{ "PredicateMatched" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.V1.ReadModifyWriteRowRequest), global::Google.Bigtable.V1.ReadModifyWriteRowRequest.Parser, new[]{ "TableName", "RowKey", "Rules" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request message for BigtableServer.ReadRows.
  /// </summary>
  public sealed partial class ReadRowsRequest : pb::IMessage<ReadRowsRequest> {
    private static readonly pb::MessageParser<ReadRowsRequest> _parser = new pb::MessageParser<ReadRowsRequest>(() => new ReadRowsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadRowsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRowsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRowsRequest(ReadRowsRequest other) : this() {
      tableName_ = other.tableName_;
      Filter = other.filter_ != null ? other.Filter.Clone() : null;
      allowRowInterleaving_ = other.allowRowInterleaving_;
      numRowsLimit_ = other.numRowsLimit_;
      switch (other.TargetCase) {
        case TargetOneofCase.RowKey:
          RowKey = other.RowKey;
          break;
        case TargetOneofCase.RowRange:
          RowRange = other.RowRange.Clone();
          break;
        case TargetOneofCase.RowSet:
          RowSet = other.RowSet.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRowsRequest Clone() {
      return new ReadRowsRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table from which to read.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_key" field.</summary>
    public const int RowKeyFieldNumber = 2;
    /// <summary>
    ///  The key of a single row from which to read.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKey {
      get { return targetCase_ == TargetOneofCase.RowKey ? (pb::ByteString) target_ : pb::ByteString.Empty; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetCase_ = TargetOneofCase.RowKey;
      }
    }

    /// <summary>Field number for the "row_range" field.</summary>
    public const int RowRangeFieldNumber = 3;
    /// <summary>
    ///  A range of rows from which to read.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.V1.RowRange RowRange {
      get { return targetCase_ == TargetOneofCase.RowRange ? (global::Google.Bigtable.V1.RowRange) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.RowRange;
      }
    }

    /// <summary>Field number for the "row_set" field.</summary>
    public const int RowSetFieldNumber = 8;
    /// <summary>
    ///  A set of rows from which to read. Entries need not be in order, and will
    ///  be deduplicated before reading.
    ///  The total serialized size of the set must not exceed 1MB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.V1.RowSet RowSet {
      get { return targetCase_ == TargetOneofCase.RowSet ? (global::Google.Bigtable.V1.RowSet) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.RowSet;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 5;
    private global::Google.Bigtable.V1.RowFilter filter_;
    /// <summary>
    ///  The filter to apply to the contents of the specified row(s). If unset,
    ///  reads the entire table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.V1.RowFilter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    /// <summary>Field number for the "allow_row_interleaving" field.</summary>
    public const int AllowRowInterleavingFieldNumber = 6;
    private bool allowRowInterleaving_;
    /// <summary>
    ///  By default, rows are read sequentially, producing results which are
    ///  guaranteed to arrive in increasing row order. Setting
    ///  "allow_row_interleaving" to true allows multiple rows to be interleaved in
    ///  the response stream, which increases throughput but breaks this guarantee,
    ///  and may force the client to use more memory to buffer partially-received
    ///  rows. Cannot be set to true when specifying "num_rows_limit".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowRowInterleaving {
      get { return allowRowInterleaving_; }
      set {
        allowRowInterleaving_ = value;
      }
    }

    /// <summary>Field number for the "num_rows_limit" field.</summary>
    public const int NumRowsLimitFieldNumber = 7;
    private long numRowsLimit_;
    /// <summary>
    ///  The read will terminate after committing to N rows' worth of results. The
    ///  default (zero) is to return all results.
    ///  Note that "allow_row_interleaving" cannot be set to true when this is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumRowsLimit {
      get { return numRowsLimit_; }
      set {
        numRowsLimit_ = value;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      RowKey = 2,
      RowRange = 3,
      RowSet = 8,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadRowsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadRowsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (RowKey != other.RowKey) return false;
      if (!object.Equals(RowRange, other.RowRange)) return false;
      if (!object.Equals(RowSet, other.RowSet)) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (AllowRowInterleaving != other.AllowRowInterleaving) return false;
      if (NumRowsLimit != other.NumRowsLimit) return false;
      if (TargetCase != other.TargetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (targetCase_ == TargetOneofCase.RowKey) hash ^= RowKey.GetHashCode();
      if (targetCase_ == TargetOneofCase.RowRange) hash ^= RowRange.GetHashCode();
      if (targetCase_ == TargetOneofCase.RowSet) hash ^= RowSet.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (AllowRowInterleaving != false) hash ^= AllowRowInterleaving.GetHashCode();
      if (NumRowsLimit != 0L) hash ^= NumRowsLimit.GetHashCode();
      hash ^= (int) targetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (targetCase_ == TargetOneofCase.RowKey) {
        output.WriteRawTag(18);
        output.WriteBytes(RowKey);
      }
      if (targetCase_ == TargetOneofCase.RowRange) {
        output.WriteRawTag(26);
        output.WriteMessage(RowRange);
      }
      if (filter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Filter);
      }
      if (AllowRowInterleaving != false) {
        output.WriteRawTag(48);
        output.WriteBool(AllowRowInterleaving);
      }
      if (NumRowsLimit != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NumRowsLimit);
      }
      if (targetCase_ == TargetOneofCase.RowSet) {
        output.WriteRawTag(66);
        output.WriteMessage(RowSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (targetCase_ == TargetOneofCase.RowKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
      }
      if (targetCase_ == TargetOneofCase.RowRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RowRange);
      }
      if (targetCase_ == TargetOneofCase.RowSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RowSet);
      }
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (AllowRowInterleaving != false) {
        size += 1 + 1;
      }
      if (NumRowsLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumRowsLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadRowsRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          filter_ = new global::Google.Bigtable.V1.RowFilter();
        }
        Filter.MergeFrom(other.Filter);
      }
      if (other.AllowRowInterleaving != false) {
        AllowRowInterleaving = other.AllowRowInterleaving;
      }
      if (other.NumRowsLimit != 0L) {
        NumRowsLimit = other.NumRowsLimit;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.RowKey:
          RowKey = other.RowKey;
          break;
        case TargetOneofCase.RowRange:
          RowRange = other.RowRange;
          break;
        case TargetOneofCase.RowSet:
          RowSet = other.RowSet;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            RowKey = input.ReadBytes();
            break;
          }
          case 26: {
            global::Google.Bigtable.V1.RowRange subBuilder = new global::Google.Bigtable.V1.RowRange();
            if (targetCase_ == TargetOneofCase.RowRange) {
              subBuilder.MergeFrom(RowRange);
            }
            input.ReadMessage(subBuilder);
            RowRange = subBuilder;
            break;
          }
          case 42: {
            if (filter_ == null) {
              filter_ = new global::Google.Bigtable.V1.RowFilter();
            }
            input.ReadMessage(filter_);
            break;
          }
          case 48: {
            AllowRowInterleaving = input.ReadBool();
            break;
          }
          case 56: {
            NumRowsLimit = input.ReadInt64();
            break;
          }
          case 66: {
            global::Google.Bigtable.V1.RowSet subBuilder = new global::Google.Bigtable.V1.RowSet();
            if (targetCase_ == TargetOneofCase.RowSet) {
              subBuilder.MergeFrom(RowSet);
            }
            input.ReadMessage(subBuilder);
            RowSet = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for BigtableService.ReadRows.
  /// </summary>
  public sealed partial class ReadRowsResponse : pb::IMessage<ReadRowsResponse> {
    private static readonly pb::MessageParser<ReadRowsResponse> _parser = new pb::MessageParser<ReadRowsResponse>(() => new ReadRowsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadRowsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRowsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRowsResponse(ReadRowsResponse other) : this() {
      rowKey_ = other.rowKey_;
      chunks_ = other.chunks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadRowsResponse Clone() {
      return new ReadRowsResponse(this);
    }

    /// <summary>Field number for the "row_key" field.</summary>
    public const int RowKeyFieldNumber = 1;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The key of the row for which we're receiving data.
    ///  Results will be received in increasing row key order, unless
    ///  "allow_row_interleaving" was specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chunks" field.</summary>
    public const int ChunksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk> _repeated_chunks_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk> chunks_ = new pbc::RepeatedField<global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk>();
    /// <summary>
    ///  One or more chunks of the row specified by "row_key".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.V1.ReadRowsResponse.Types.Chunk> Chunks {
      get { return chunks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadRowsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadRowsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowKey != other.RowKey) return false;
      if(!chunks_.Equals(other.chunks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowKey.Length != 0) hash ^= RowKey.GetHashCode();
      hash ^= chunks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RowKey);
      }
      chunks_.WriteTo(output, _repeated_chunks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
      }
      size += chunks_.CalculateSize(_repeated_chunks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadRowsResponse other) {
      if (other == null) {
        return;
      }
      if (other.RowKey.Length != 0) {
        RowKey = other.RowKey;
      }
      chunks_.Add(other.chunks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RowKey = input.ReadBytes();
            break;
          }
          case 18: {
            chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReadRowsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Specifies a piece of a row's contents returned as part of the read
      ///  response stream.
      /// </summary>
      public sealed partial class Chunk : pb::IMessage<Chunk> {
        private static readonly pb::MessageParser<Chunk> _parser = new pb::MessageParser<Chunk>(() => new Chunk());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Chunk> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.ReadRowsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chunk() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chunk(Chunk other) : this() {
          switch (other.ChunkCase) {
            case ChunkOneofCase.RowContents:
              RowContents = other.RowContents.Clone();
              break;
            case ChunkOneofCase.ResetRow:
              ResetRow = other.ResetRow;
              break;
            case ChunkOneofCase.CommitRow:
              CommitRow = other.CommitRow;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chunk Clone() {
          return new Chunk(this);
        }

        /// <summary>Field number for the "row_contents" field.</summary>
        public const int RowContentsFieldNumber = 1;
        /// <summary>
        ///  A subset of the data from a particular row. As long as no "reset_row"
        ///  is received in between, multiple "row_contents" from the same row are
        ///  from the same atomic view of that row, and will be received in the
        ///  expected family/column/timestamp order.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Bigtable.V1.Family RowContents {
          get { return chunkCase_ == ChunkOneofCase.RowContents ? (global::Google.Bigtable.V1.Family) chunk_ : null; }
          set {
            chunk_ = value;
            chunkCase_ = value == null ? ChunkOneofCase.None : ChunkOneofCase.RowContents;
          }
        }

        /// <summary>Field number for the "reset_row" field.</summary>
        public const int ResetRowFieldNumber = 2;
        /// <summary>
        ///  Indicates that the client should drop all previous chunks for
        ///  "row_key", as it will be re-read from the beginning.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ResetRow {
          get { return chunkCase_ == ChunkOneofCase.ResetRow ? (bool) chunk_ : false; }
          set {
            chunk_ = value;
            chunkCase_ = ChunkOneofCase.ResetRow;
          }
        }

        /// <summary>Field number for the "commit_row" field.</summary>
        public const int CommitRowFieldNumber = 3;
        /// <summary>
        ///  Indicates that the client can safely process all previous chunks for
        ///  "row_key", as its data has been fully read.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CommitRow {
          get { return chunkCase_ == ChunkOneofCase.CommitRow ? (bool) chunk_ : false; }
          set {
            chunk_ = value;
            chunkCase_ = ChunkOneofCase.CommitRow;
          }
        }

        private object chunk_;
        /// <summary>Enum of possible cases for the "chunk" oneof.</summary>
        public enum ChunkOneofCase {
          None = 0,
          RowContents = 1,
          ResetRow = 2,
          CommitRow = 3,
        }
        private ChunkOneofCase chunkCase_ = ChunkOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChunkOneofCase ChunkCase {
          get { return chunkCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearChunk() {
          chunkCase_ = ChunkOneofCase.None;
          chunk_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Chunk);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Chunk other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(RowContents, other.RowContents)) return false;
          if (ResetRow != other.ResetRow) return false;
          if (CommitRow != other.CommitRow) return false;
          if (ChunkCase != other.ChunkCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (chunkCase_ == ChunkOneofCase.RowContents) hash ^= RowContents.GetHashCode();
          if (chunkCase_ == ChunkOneofCase.ResetRow) hash ^= ResetRow.GetHashCode();
          if (chunkCase_ == ChunkOneofCase.CommitRow) hash ^= CommitRow.GetHashCode();
          hash ^= (int) chunkCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (chunkCase_ == ChunkOneofCase.RowContents) {
            output.WriteRawTag(10);
            output.WriteMessage(RowContents);
          }
          if (chunkCase_ == ChunkOneofCase.ResetRow) {
            output.WriteRawTag(16);
            output.WriteBool(ResetRow);
          }
          if (chunkCase_ == ChunkOneofCase.CommitRow) {
            output.WriteRawTag(24);
            output.WriteBool(CommitRow);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (chunkCase_ == ChunkOneofCase.RowContents) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RowContents);
          }
          if (chunkCase_ == ChunkOneofCase.ResetRow) {
            size += 1 + 1;
          }
          if (chunkCase_ == ChunkOneofCase.CommitRow) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Chunk other) {
          if (other == null) {
            return;
          }
          switch (other.ChunkCase) {
            case ChunkOneofCase.RowContents:
              RowContents = other.RowContents;
              break;
            case ChunkOneofCase.ResetRow:
              ResetRow = other.ResetRow;
              break;
            case ChunkOneofCase.CommitRow:
              CommitRow = other.CommitRow;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Bigtable.V1.Family subBuilder = new global::Google.Bigtable.V1.Family();
                if (chunkCase_ == ChunkOneofCase.RowContents) {
                  subBuilder.MergeFrom(RowContents);
                }
                input.ReadMessage(subBuilder);
                RowContents = subBuilder;
                break;
              }
              case 16: {
                ResetRow = input.ReadBool();
                break;
              }
              case 24: {
                CommitRow = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  Request message for BigtableService.SampleRowKeys.
  /// </summary>
  public sealed partial class SampleRowKeysRequest : pb::IMessage<SampleRowKeysRequest> {
    private static readonly pb::MessageParser<SampleRowKeysRequest> _parser = new pb::MessageParser<SampleRowKeysRequest>(() => new SampleRowKeysRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SampleRowKeysRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleRowKeysRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleRowKeysRequest(SampleRowKeysRequest other) : this() {
      tableName_ = other.tableName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleRowKeysRequest Clone() {
      return new SampleRowKeysRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table from which to sample row keys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SampleRowKeysRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SampleRowKeysRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SampleRowKeysRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for BigtableService.SampleRowKeys.
  /// </summary>
  public sealed partial class SampleRowKeysResponse : pb::IMessage<SampleRowKeysResponse> {
    private static readonly pb::MessageParser<SampleRowKeysResponse> _parser = new pb::MessageParser<SampleRowKeysResponse>(() => new SampleRowKeysResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SampleRowKeysResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleRowKeysResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleRowKeysResponse(SampleRowKeysResponse other) : this() {
      rowKey_ = other.rowKey_;
      offsetBytes_ = other.offsetBytes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SampleRowKeysResponse Clone() {
      return new SampleRowKeysResponse(this);
    }

    /// <summary>Field number for the "row_key" field.</summary>
    public const int RowKeyFieldNumber = 1;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Sorted streamed sequence of sample row keys in the table. The table might
    ///  have contents before the first row key in the list and after the last one,
    ///  but a key containing the empty string indicates "end of table" and will be
    ///  the last response given, if present.
    ///  Note that row keys in this list may not have ever been written to or read
    ///  from, and users should therefore not make any assumptions about the row key
    ///  structure that are specific to their use case.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset_bytes" field.</summary>
    public const int OffsetBytesFieldNumber = 2;
    private long offsetBytes_;
    /// <summary>
    ///  Approximate total storage space used by all rows in the table which precede
    ///  "row_key". Buffering the contents of all rows between two subsequent
    ///  samples would require space roughly equal to the difference in their
    ///  "offset_bytes" fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OffsetBytes {
      get { return offsetBytes_; }
      set {
        offsetBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SampleRowKeysResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SampleRowKeysResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowKey != other.RowKey) return false;
      if (OffsetBytes != other.OffsetBytes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowKey.Length != 0) hash ^= RowKey.GetHashCode();
      if (OffsetBytes != 0L) hash ^= OffsetBytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RowKey);
      }
      if (OffsetBytes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OffsetBytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
      }
      if (OffsetBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OffsetBytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SampleRowKeysResponse other) {
      if (other == null) {
        return;
      }
      if (other.RowKey.Length != 0) {
        RowKey = other.RowKey;
      }
      if (other.OffsetBytes != 0L) {
        OffsetBytes = other.OffsetBytes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RowKey = input.ReadBytes();
            break;
          }
          case 16: {
            OffsetBytes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for BigtableService.MutateRow.
  /// </summary>
  public sealed partial class MutateRowRequest : pb::IMessage<MutateRowRequest> {
    private static readonly pb::MessageParser<MutateRowRequest> _parser = new pb::MessageParser<MutateRowRequest>(() => new MutateRowRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateRowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowRequest(MutateRowRequest other) : this() {
      tableName_ = other.tableName_;
      rowKey_ = other.rowKey_;
      mutations_ = other.mutations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowRequest Clone() {
      return new MutateRowRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table to which the mutation should be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_key" field.</summary>
    public const int RowKeyFieldNumber = 2;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The key of the row to which the mutation should be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mutations" field.</summary>
    public const int MutationsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Mutation> _repeated_mutations_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Bigtable.V1.Mutation.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> mutations_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Mutation>();
    /// <summary>
    ///  Changes to be atomically applied to the specified row. Entries are applied
    ///  in order, meaning that earlier mutations can be masked by later ones.
    ///  Must contain at least one entry and at most 100000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> Mutations {
      get { return mutations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateRowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateRowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (RowKey != other.RowKey) return false;
      if(!mutations_.Equals(other.mutations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (RowKey.Length != 0) hash ^= RowKey.GetHashCode();
      hash ^= mutations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (RowKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RowKey);
      }
      mutations_.WriteTo(output, _repeated_mutations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (RowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
      }
      size += mutations_.CalculateSize(_repeated_mutations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateRowRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.RowKey.Length != 0) {
        RowKey = other.RowKey;
      }
      mutations_.Add(other.mutations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            RowKey = input.ReadBytes();
            break;
          }
          case 26: {
            mutations_.AddEntriesFrom(input, _repeated_mutations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for BigtableService.MutateRows.
  /// </summary>
  public sealed partial class MutateRowsRequest : pb::IMessage<MutateRowsRequest> {
    private static readonly pb::MessageParser<MutateRowsRequest> _parser = new pb::MessageParser<MutateRowsRequest>(() => new MutateRowsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateRowsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowsRequest(MutateRowsRequest other) : this() {
      tableName_ = other.tableName_;
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowsRequest Clone() {
      return new MutateRowsRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table to which the mutations should be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry> entries_ = new pbc::RepeatedField<global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry>();
    /// <summary>
    ///  The row keys/mutations to be applied in bulk.
    ///  Each entry is applied as an atomic mutation, but the entries may be
    ///  applied in arbitrary order (even between entries for the same row).
    ///  At least one entry must be specified, and in total the entries may
    ///  contain at most 100000 mutations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.V1.MutateRowsRequest.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateRowsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateRowsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateRowsRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MutateRowsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.MutateRowsRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          rowKey_ = other.rowKey_;
          mutations_ = other.mutations_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "row_key" field.</summary>
        public const int RowKeyFieldNumber = 1;
        private pb::ByteString rowKey_ = pb::ByteString.Empty;
        /// <summary>
        ///  The key of the row to which the `mutations` should be applied.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RowKey {
          get { return rowKey_; }
          set {
            rowKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "mutations" field.</summary>
        public const int MutationsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Mutation> _repeated_mutations_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.V1.Mutation.Parser);
        private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> mutations_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Mutation>();
        /// <summary>
        ///  Changes to be atomically applied to the specified row. Mutations are
        ///  applied in order, meaning that earlier mutations can be masked by
        ///  later ones.
        ///  At least one mutation must be specified.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> Mutations {
          get { return mutations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RowKey != other.RowKey) return false;
          if(!mutations_.Equals(other.mutations_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RowKey.Length != 0) hash ^= RowKey.GetHashCode();
          hash ^= mutations_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RowKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(RowKey);
          }
          mutations_.WriteTo(output, _repeated_mutations_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RowKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
          }
          size += mutations_.CalculateSize(_repeated_mutations_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.RowKey.Length != 0) {
            RowKey = other.RowKey;
          }
          mutations_.Add(other.mutations_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                RowKey = input.ReadBytes();
                break;
              }
              case 18: {
                mutations_.AddEntriesFrom(input, _repeated_mutations_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  Response message for BigtableService.MutateRows.
  /// </summary>
  public sealed partial class MutateRowsResponse : pb::IMessage<MutateRowsResponse> {
    private static readonly pb::MessageParser<MutateRowsResponse> _parser = new pb::MessageParser<MutateRowsResponse>(() => new MutateRowsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutateRowsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowsResponse(MutateRowsResponse other) : this() {
      statuses_ = other.statuses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutateRowsResponse Clone() {
      return new MutateRowsResponse(this);
    }

    /// <summary>Field number for the "statuses" field.</summary>
    public const int StatusesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Rpc.Status> _repeated_statuses_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Rpc.Status.Parser);
    private readonly pbc::RepeatedField<global::Google.Rpc.Status> statuses_ = new pbc::RepeatedField<global::Google.Rpc.Status>();
    /// <summary>
    ///  The results for each Entry from the request, presented in the order
    ///  in which the entries were originally given.
    ///  Depending on how requests are batched during execution, it is possible
    ///  for one Entry to fail due to an error with another Entry. In the event
    ///  that this occurs, the same error will be reported for both entries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Rpc.Status> Statuses {
      get { return statuses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutateRowsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutateRowsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statuses_.Equals(other.statuses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statuses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statuses_.WriteTo(output, _repeated_statuses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statuses_.CalculateSize(_repeated_statuses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutateRowsResponse other) {
      if (other == null) {
        return;
      }
      statuses_.Add(other.statuses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            statuses_.AddEntriesFrom(input, _repeated_statuses_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for BigtableService.CheckAndMutateRowRequest
  /// </summary>
  public sealed partial class CheckAndMutateRowRequest : pb::IMessage<CheckAndMutateRowRequest> {
    private static readonly pb::MessageParser<CheckAndMutateRowRequest> _parser = new pb::MessageParser<CheckAndMutateRowRequest>(() => new CheckAndMutateRowRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckAndMutateRowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAndMutateRowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAndMutateRowRequest(CheckAndMutateRowRequest other) : this() {
      tableName_ = other.tableName_;
      rowKey_ = other.rowKey_;
      PredicateFilter = other.predicateFilter_ != null ? other.PredicateFilter.Clone() : null;
      trueMutations_ = other.trueMutations_.Clone();
      falseMutations_ = other.falseMutations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAndMutateRowRequest Clone() {
      return new CheckAndMutateRowRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table to which the conditional mutation should be
    ///  applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_key" field.</summary>
    public const int RowKeyFieldNumber = 2;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The key of the row to which the conditional mutation should be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "predicate_filter" field.</summary>
    public const int PredicateFilterFieldNumber = 6;
    private global::Google.Bigtable.V1.RowFilter predicateFilter_;
    /// <summary>
    ///  The filter to be applied to the contents of the specified row. Depending
    ///  on whether or not any results are yielded, either "true_mutations" or
    ///  "false_mutations" will be executed. If unset, checks that the row contains
    ///  any values at all.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.V1.RowFilter PredicateFilter {
      get { return predicateFilter_; }
      set {
        predicateFilter_ = value;
      }
    }

    /// <summary>Field number for the "true_mutations" field.</summary>
    public const int TrueMutationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Mutation> _repeated_trueMutations_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Bigtable.V1.Mutation.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> trueMutations_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Mutation>();
    /// <summary>
    ///  Changes to be atomically applied to the specified row if "predicate_filter"
    ///  yields at least one cell when applied to "row_key". Entries are applied in
    ///  order, meaning that earlier mutations can be masked by later ones.
    ///  Must contain at least one entry if "false_mutations" is empty, and at most
    ///  100000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> TrueMutations {
      get { return trueMutations_; }
    }

    /// <summary>Field number for the "false_mutations" field.</summary>
    public const int FalseMutationsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Mutation> _repeated_falseMutations_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Bigtable.V1.Mutation.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> falseMutations_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Mutation>();
    /// <summary>
    ///  Changes to be atomically applied to the specified row if "predicate_filter"
    ///  does not yield any cells when applied to "row_key". Entries are applied in
    ///  order, meaning that earlier mutations can be masked by later ones.
    ///  Must contain at least one entry if "true_mutations" is empty, and at most
    ///  100000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.V1.Mutation> FalseMutations {
      get { return falseMutations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckAndMutateRowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckAndMutateRowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (RowKey != other.RowKey) return false;
      if (!object.Equals(PredicateFilter, other.PredicateFilter)) return false;
      if(!trueMutations_.Equals(other.trueMutations_)) return false;
      if(!falseMutations_.Equals(other.falseMutations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (RowKey.Length != 0) hash ^= RowKey.GetHashCode();
      if (predicateFilter_ != null) hash ^= PredicateFilter.GetHashCode();
      hash ^= trueMutations_.GetHashCode();
      hash ^= falseMutations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (RowKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RowKey);
      }
      trueMutations_.WriteTo(output, _repeated_trueMutations_codec);
      falseMutations_.WriteTo(output, _repeated_falseMutations_codec);
      if (predicateFilter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PredicateFilter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (RowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
      }
      if (predicateFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredicateFilter);
      }
      size += trueMutations_.CalculateSize(_repeated_trueMutations_codec);
      size += falseMutations_.CalculateSize(_repeated_falseMutations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckAndMutateRowRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.RowKey.Length != 0) {
        RowKey = other.RowKey;
      }
      if (other.predicateFilter_ != null) {
        if (predicateFilter_ == null) {
          predicateFilter_ = new global::Google.Bigtable.V1.RowFilter();
        }
        PredicateFilter.MergeFrom(other.PredicateFilter);
      }
      trueMutations_.Add(other.trueMutations_);
      falseMutations_.Add(other.falseMutations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            RowKey = input.ReadBytes();
            break;
          }
          case 34: {
            trueMutations_.AddEntriesFrom(input, _repeated_trueMutations_codec);
            break;
          }
          case 42: {
            falseMutations_.AddEntriesFrom(input, _repeated_falseMutations_codec);
            break;
          }
          case 50: {
            if (predicateFilter_ == null) {
              predicateFilter_ = new global::Google.Bigtable.V1.RowFilter();
            }
            input.ReadMessage(predicateFilter_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for BigtableService.CheckAndMutateRowRequest.
  /// </summary>
  public sealed partial class CheckAndMutateRowResponse : pb::IMessage<CheckAndMutateRowResponse> {
    private static readonly pb::MessageParser<CheckAndMutateRowResponse> _parser = new pb::MessageParser<CheckAndMutateRowResponse>(() => new CheckAndMutateRowResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckAndMutateRowResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAndMutateRowResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAndMutateRowResponse(CheckAndMutateRowResponse other) : this() {
      predicateMatched_ = other.predicateMatched_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAndMutateRowResponse Clone() {
      return new CheckAndMutateRowResponse(this);
    }

    /// <summary>Field number for the "predicate_matched" field.</summary>
    public const int PredicateMatchedFieldNumber = 1;
    private bool predicateMatched_;
    /// <summary>
    ///  Whether or not the request's "predicate_filter" yielded any results for
    ///  the specified row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PredicateMatched {
      get { return predicateMatched_; }
      set {
        predicateMatched_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckAndMutateRowResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckAndMutateRowResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PredicateMatched != other.PredicateMatched) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PredicateMatched != false) hash ^= PredicateMatched.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PredicateMatched != false) {
        output.WriteRawTag(8);
        output.WriteBool(PredicateMatched);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PredicateMatched != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckAndMutateRowResponse other) {
      if (other == null) {
        return;
      }
      if (other.PredicateMatched != false) {
        PredicateMatched = other.PredicateMatched;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PredicateMatched = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for BigtableService.ReadModifyWriteRowRequest.
  /// </summary>
  public sealed partial class ReadModifyWriteRowRequest : pb::IMessage<ReadModifyWriteRowRequest> {
    private static readonly pb::MessageParser<ReadModifyWriteRowRequest> _parser = new pb::MessageParser<ReadModifyWriteRowRequest>(() => new ReadModifyWriteRowRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadModifyWriteRowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableServiceMessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadModifyWriteRowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadModifyWriteRowRequest(ReadModifyWriteRowRequest other) : this() {
      tableName_ = other.tableName_;
      rowKey_ = other.rowKey_;
      rules_ = other.rules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadModifyWriteRowRequest Clone() {
      return new ReadModifyWriteRowRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table to which the read/modify/write rules should be
    ///  applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_key" field.</summary>
    public const int RowKeyFieldNumber = 2;
    private pb::ByteString rowKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  The key of the row to which the read/modify/write rules should be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.ReadModifyWriteRule> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Bigtable.V1.ReadModifyWriteRule.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.ReadModifyWriteRule> rules_ = new pbc::RepeatedField<global::Google.Bigtable.V1.ReadModifyWriteRule>();
    /// <summary>
    ///  Rules specifying how the specified row's contents are to be transformed
    ///  into writes. Entries are applied in order, meaning that earlier rules will
    ///  affect the results of later ones.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.V1.ReadModifyWriteRule> Rules {
      get { return rules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadModifyWriteRowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadModifyWriteRowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (RowKey != other.RowKey) return false;
      if(!rules_.Equals(other.rules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (RowKey.Length != 0) hash ^= RowKey.GetHashCode();
      hash ^= rules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (RowKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RowKey);
      }
      rules_.WriteTo(output, _repeated_rules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (RowKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKey);
      }
      size += rules_.CalculateSize(_repeated_rules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadModifyWriteRowRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.RowKey.Length != 0) {
        RowKey = other.RowKey;
      }
      rules_.Add(other.rules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            RowKey = input.ReadBytes();
            break;
          }
          case 26: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
