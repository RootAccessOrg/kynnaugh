// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/readgroupset.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Genomics.V1 {

  /// <summary>Holder for reflection information generated from google/genomics/v1/readgroupset.proto</summary>
  public static partial class ReadgroupsetReflection {

    #region Descriptor
    /// <summary>File descriptor for google/genomics/v1/readgroupset.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReadgroupsetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVnb29nbGUvZ2Vub21pY3MvdjEvcmVhZGdyb3Vwc2V0LnByb3RvEhJnb29n",
            "bGUuZ2Vub21pY3MudjEaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8a",
            "Imdvb2dsZS9nZW5vbWljcy92MS9yZWFkZ3JvdXAucHJvdG8aHGdvb2dsZS9w",
            "cm90b2J1Zi9zdHJ1Y3QucHJvdG8inwIKDFJlYWRHcm91cFNldBIKCgJpZBgB",
            "IAEoCRISCgpkYXRhc2V0X2lkGAIgASgJEhgKEHJlZmVyZW5jZV9zZXRfaWQY",
            "AyABKAkSDAoEbmFtZRgEIAEoCRIQCghmaWxlbmFtZRgFIAEoCRIyCgtyZWFk",
            "X2dyb3VwcxgGIAMoCzIdLmdvb2dsZS5nZW5vbWljcy52MS5SZWFkR3JvdXAS",
            "OAoEaW5mbxgHIAMoCzIqLmdvb2dsZS5nZW5vbWljcy52MS5SZWFkR3JvdXBT",
            "ZXQuSW5mb0VudHJ5GkcKCUluZm9FbnRyeRILCgNrZXkYASABKAkSKQoFdmFs",
            "dWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuTGlzdFZhbHVlOgI4AUJsChZj",
            "b20uZ29vZ2xlLmdlbm9taWNzLnYxQhFSZWFkR3JvdXBTZXRQcm90b1ABWjpn",
            "b29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2dlbm9taWNz",
            "L3YxO2dlbm9taWNz+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Genomics.V1.ReadgroupReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Genomics.V1.ReadGroupSet), global::Google.Genomics.V1.ReadGroupSet.Parser, new[]{ "Id", "DatasetId", "ReferenceSetId", "Name", "Filename", "ReadGroups", "Info" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  A read group set is a logical collection of read groups, which are
  ///  collections of reads produced by a sequencer. A read group set typically
  ///  models reads corresponding to one sample, sequenced one way, and aligned one
  ///  way.
  ///
  ///  * A read group set belongs to one dataset.
  ///  * A read group belongs to one read group set.
  ///  * A read belongs to one read group.
  ///
  ///  For more genomics resource definitions, see [Fundamentals of Google
  ///  Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
  /// </summary>
  public sealed partial class ReadGroupSet : pb::IMessage<ReadGroupSet> {
    private static readonly pb::MessageParser<ReadGroupSet> _parser = new pb::MessageParser<ReadGroupSet>(() => new ReadGroupSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadGroupSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Genomics.V1.ReadgroupsetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadGroupSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadGroupSet(ReadGroupSet other) : this() {
      id_ = other.id_;
      datasetId_ = other.datasetId_;
      referenceSetId_ = other.referenceSetId_;
      name_ = other.name_;
      filename_ = other.filename_;
      readGroups_ = other.readGroups_.Clone();
      info_ = other.info_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadGroupSet Clone() {
      return new ReadGroupSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  The server-generated read group set ID, unique for all read group sets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataset_id" field.</summary>
    public const int DatasetIdFieldNumber = 2;
    private string datasetId_ = "";
    /// <summary>
    ///  The dataset to which this read group set belongs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatasetId {
      get { return datasetId_; }
      set {
        datasetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reference_set_id" field.</summary>
    public const int ReferenceSetIdFieldNumber = 3;
    private string referenceSetId_ = "";
    /// <summary>
    ///  The reference set to which the reads in this read group set are aligned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferenceSetId {
      get { return referenceSetId_; }
      set {
        referenceSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    ///  The read group set name. By default this will be initialized to the sample
    ///  name of the sequenced data contained in this set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 5;
    private string filename_ = "";
    /// <summary>
    ///  The filename of the original source file for this read group set, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_groups" field.</summary>
    public const int ReadGroupsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Genomics.V1.ReadGroup> _repeated_readGroups_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Genomics.V1.ReadGroup.Parser);
    private readonly pbc::RepeatedField<global::Google.Genomics.V1.ReadGroup> readGroups_ = new pbc::RepeatedField<global::Google.Genomics.V1.ReadGroup>();
    /// <summary>
    ///  The read groups in this set. There are typically 1-10 read groups in a read
    ///  group set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Genomics.V1.ReadGroup> ReadGroups {
      get { return readGroups_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec _map_info_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.ListValue.Parser), 58);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> info_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue>();
    /// <summary>
    ///  A map of additional read group set information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.ListValue> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadGroupSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadGroupSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DatasetId != other.DatasetId) return false;
      if (ReferenceSetId != other.ReferenceSetId) return false;
      if (Name != other.Name) return false;
      if (Filename != other.Filename) return false;
      if(!readGroups_.Equals(other.readGroups_)) return false;
      if (!Info.Equals(other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DatasetId.Length != 0) hash ^= DatasetId.GetHashCode();
      if (ReferenceSetId.Length != 0) hash ^= ReferenceSetId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      hash ^= readGroups_.GetHashCode();
      hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DatasetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DatasetId);
      }
      if (ReferenceSetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReferenceSetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Filename);
      }
      readGroups_.WriteTo(output, _repeated_readGroups_codec);
      info_.WriteTo(output, _map_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DatasetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetId);
      }
      if (ReferenceSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceSetId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      size += readGroups_.CalculateSize(_repeated_readGroups_codec);
      size += info_.CalculateSize(_map_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadGroupSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DatasetId.Length != 0) {
        DatasetId = other.DatasetId;
      }
      if (other.ReferenceSetId.Length != 0) {
        ReferenceSetId = other.ReferenceSetId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      readGroups_.Add(other.readGroups_);
      info_.Add(other.info_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            DatasetId = input.ReadString();
            break;
          }
          case 26: {
            ReferenceSetId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Filename = input.ReadString();
            break;
          }
          case 50: {
            readGroups_.AddEntriesFrom(input, _repeated_readGroups_codec);
            break;
          }
          case 58: {
            info_.AddEntriesFrom(input, _map_info_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
