// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/image_annotator.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Vision.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/vision/v1/image_annotator.proto</summary>
  public static partial class ImageAnnotatorReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/vision/v1/image_annotator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageAnnotatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvY2xvdWQvdmlzaW9uL3YxL2ltYWdlX2Fubm90YXRvci5wcm90",
            "bxIWZ29vZ2xlLmNsb3VkLnZpc2lvbi52MRocZ29vZ2xlL2FwaS9hbm5vdGF0",
            "aW9ucy5wcm90bxolZ29vZ2xlL2Nsb3VkL3Zpc2lvbi92MS9nZW9tZXRyeS5w",
            "cm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8aF2dvb2dsZS90eXBlL2Nv",
            "bG9yLnByb3RvGhhnb29nbGUvdHlwZS9sYXRsbmcucHJvdG8iiwIKB0ZlYXR1",
            "cmUSMgoEdHlwZRgBIAEoDjIkLmdvb2dsZS5jbG91ZC52aXNpb24udjEuRmVh",
            "dHVyZS5UeXBlEhMKC21heF9yZXN1bHRzGAIgASgFIrYBCgRUeXBlEhQKEFRZ",
            "UEVfVU5TUEVDSUZJRUQQABISCg5GQUNFX0RFVEVDVElPThABEhYKEkxBTkRN",
            "QVJLX0RFVEVDVElPThACEhIKDkxPR09fREVURUNUSU9OEAMSEwoPTEFCRUxf",
            "REVURUNUSU9OEAQSEgoOVEVYVF9ERVRFQ1RJT04QBRIZChVTQUZFX1NFQVJD",
            "SF9ERVRFQ1RJT04QBhIUChBJTUFHRV9QUk9QRVJUSUVTEAciJAoLSW1hZ2VT",
            "b3VyY2USFQoNZ2NzX2ltYWdlX3VyaRgBIAEoCSJNCgVJbWFnZRIPCgdjb250",
            "ZW50GAEgASgMEjMKBnNvdXJjZRgCIAEoCzIjLmdvb2dsZS5jbG91ZC52aXNp",
            "b24udjEuSW1hZ2VTb3VyY2Uixw0KDkZhY2VBbm5vdGF0aW9uEjsKDWJvdW5k",
            "aW5nX3BvbHkYASABKAsyJC5nb29nbGUuY2xvdWQudmlzaW9uLnYxLkJvdW5k",
            "aW5nUG9seRI+ChBmZF9ib3VuZGluZ19wb2x5GAIgASgLMiQuZ29vZ2xlLmNs",
            "b3VkLnZpc2lvbi52MS5Cb3VuZGluZ1BvbHkSQgoJbGFuZG1hcmtzGAMgAygL",
            "Mi8uZ29vZ2xlLmNsb3VkLnZpc2lvbi52MS5GYWNlQW5ub3RhdGlvbi5MYW5k",
            "bWFyaxISCgpyb2xsX2FuZ2xlGAQgASgCEhEKCXBhbl9hbmdsZRgFIAEoAhIS",
            "Cgp0aWx0X2FuZ2xlGAYgASgCEhwKFGRldGVjdGlvbl9jb25maWRlbmNlGAcg",
            "ASgCEh4KFmxhbmRtYXJraW5nX2NvbmZpZGVuY2UYCCABKAISOgoOam95X2xp",
            "a2VsaWhvb2QYCSABKA4yIi5nb29nbGUuY2xvdWQudmlzaW9uLnYxLkxpa2Vs",
            "aWhvb2QSPQoRc29ycm93X2xpa2VsaWhvb2QYCiABKA4yIi5nb29nbGUuY2xv",
            "dWQudmlzaW9uLnYxLkxpa2VsaWhvb2QSPAoQYW5nZXJfbGlrZWxpaG9vZBgL",
            "IAEoDjIiLmdvb2dsZS5jbG91ZC52aXNpb24udjEuTGlrZWxpaG9vZBI/ChNz",
            "dXJwcmlzZV9saWtlbGlob29kGAwgASgOMiIuZ29vZ2xlLmNsb3VkLnZpc2lv",
            "bi52MS5MaWtlbGlob29kEkQKGHVuZGVyX2V4cG9zZWRfbGlrZWxpaG9vZBgN",
            "IAEoDjIiLmdvb2dsZS5jbG91ZC52aXNpb24udjEuTGlrZWxpaG9vZBI+ChJi",
            "bHVycmVkX2xpa2VsaWhvb2QYDiABKA4yIi5nb29nbGUuY2xvdWQudmlzaW9u",
            "LnYxLkxpa2VsaWhvb2QSPwoTaGVhZHdlYXJfbGlrZWxpaG9vZBgPIAEoDjIi",
            "Lmdvb2dsZS5jbG91ZC52aXNpb24udjEuTGlrZWxpaG9vZBq5BwoITGFuZG1h",
            "cmsSQgoEdHlwZRgDIAEoDjI0Lmdvb2dsZS5jbG91ZC52aXNpb24udjEuRmFj",
            "ZUFubm90YXRpb24uTGFuZG1hcmsuVHlwZRIyCghwb3NpdGlvbhgEIAEoCzIg",
            "Lmdvb2dsZS5jbG91ZC52aXNpb24udjEuUG9zaXRpb24itAYKBFR5cGUSFAoQ",
            "VU5LTk9XTl9MQU5ETUFSSxAAEgwKCExFRlRfRVlFEAESDQoJUklHSFRfRVlF",
            "EAISGAoUTEVGVF9PRl9MRUZUX0VZRUJST1cQAxIZChVSSUdIVF9PRl9MRUZU",
            "X0VZRUJST1cQBBIZChVMRUZUX09GX1JJR0hUX0VZRUJST1cQBRIaChZSSUdI",
            "VF9PRl9SSUdIVF9FWUVCUk9XEAYSGQoVTUlEUE9JTlRfQkVUV0VFTl9FWUVT",
            "EAcSDAoITk9TRV9USVAQCBINCglVUFBFUl9MSVAQCRINCglMT1dFUl9MSVAQ",
            "ChIOCgpNT1VUSF9MRUZUEAsSDwoLTU9VVEhfUklHSFQQDBIQCgxNT1VUSF9D",
            "RU5URVIQDRIVChFOT1NFX0JPVFRPTV9SSUdIVBAOEhQKEE5PU0VfQk9UVE9N",
            "X0xFRlQQDxIWChJOT1NFX0JPVFRPTV9DRU5URVIQEBIZChVMRUZUX0VZRV9U",
            "T1BfQk9VTkRBUlkQERIZChVMRUZUX0VZRV9SSUdIVF9DT1JORVIQEhIcChhM",
            "RUZUX0VZRV9CT1RUT01fQk9VTkRBUlkQExIYChRMRUZUX0VZRV9MRUZUX0NP",
            "Uk5FUhAUEhoKFlJJR0hUX0VZRV9UT1BfQk9VTkRBUlkQFRIaChZSSUdIVF9F",
            "WUVfUklHSFRfQ09STkVSEBYSHQoZUklHSFRfRVlFX0JPVFRPTV9CT1VOREFS",
            "WRAXEhkKFVJJR0hUX0VZRV9MRUZUX0NPUk5FUhAYEh8KG0xFRlRfRVlFQlJP",
            "V19VUFBFUl9NSURQT0lOVBAZEiAKHFJJR0hUX0VZRUJST1dfVVBQRVJfTUlE",
            "UE9JTlQQGhIUChBMRUZUX0VBUl9UUkFHSU9OEBsSFQoRUklHSFRfRUFSX1RS",
            "QUdJT04QHBISCg5MRUZUX0VZRV9QVVBJTBAdEhMKD1JJR0hUX0VZRV9QVVBJ",
            "TBAeEhUKEUZPUkVIRUFEX0dMQUJFTExBEB8SEQoNQ0hJTl9HTkFUSElPThAg",
            "EhQKEENISU5fTEVGVF9HT05JT04QIRIVChFDSElOX1JJR0hUX0dPTklPThAi",
            "IjQKDExvY2F0aW9uSW5mbxIkCgdsYXRfbG5nGAEgASgLMhMuZ29vZ2xlLnR5",
            "cGUuTGF0TG5nIicKCFByb3BlcnR5EgwKBG5hbWUYASABKAkSDQoFdmFsdWUY",
            "AiABKAkipwIKEEVudGl0eUFubm90YXRpb24SCwoDbWlkGAEgASgJEg4KBmxv",
            "Y2FsZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRINCgVzY29yZRgEIAEo",
            "AhISCgpjb25maWRlbmNlGAUgASgCEhIKCnRvcGljYWxpdHkYBiABKAISOwoN",
            "Ym91bmRpbmdfcG9seRgHIAEoCzIkLmdvb2dsZS5jbG91ZC52aXNpb24udjEu",
            "Qm91bmRpbmdQb2x5EjcKCWxvY2F0aW9ucxgIIAMoCzIkLmdvb2dsZS5jbG91",
            "ZC52aXNpb24udjEuTG9jYXRpb25JbmZvEjQKCnByb3BlcnRpZXMYCSADKAsy",
            "IC5nb29nbGUuY2xvdWQudmlzaW9uLnYxLlByb3BlcnR5IucBChRTYWZlU2Vh",
            "cmNoQW5ub3RhdGlvbhIxCgVhZHVsdBgBIAEoDjIiLmdvb2dsZS5jbG91ZC52",
            "aXNpb24udjEuTGlrZWxpaG9vZBIxCgVzcG9vZhgCIAEoDjIiLmdvb2dsZS5j",
            "bG91ZC52aXNpb24udjEuTGlrZWxpaG9vZBIzCgdtZWRpY2FsGAMgASgOMiIu",
            "Z29vZ2xlLmNsb3VkLnZpc2lvbi52MS5MaWtlbGlob29kEjQKCHZpb2xlbmNl",
            "GAQgASgOMiIuZ29vZ2xlLmNsb3VkLnZpc2lvbi52MS5MaWtlbGlob29kImEK",
            "C0xhdExvbmdSZWN0EigKC21pbl9sYXRfbG5nGAEgASgLMhMuZ29vZ2xlLnR5",
            "cGUuTGF0TG5nEigKC21heF9sYXRfbG5nGAIgASgLMhMuZ29vZ2xlLnR5cGUu",
            "TGF0TG5nIlUKCUNvbG9ySW5mbxIhCgVjb2xvchgBIAEoCzISLmdvb2dsZS50",
            "eXBlLkNvbG9yEg0KBXNjb3JlGAIgASgCEhYKDnBpeGVsX2ZyYWN0aW9uGAMg",
            "ASgCIk0KGERvbWluYW50Q29sb3JzQW5ub3RhdGlvbhIxCgZjb2xvcnMYASAD",
            "KAsyIS5nb29nbGUuY2xvdWQudmlzaW9uLnYxLkNvbG9ySW5mbyJcCg9JbWFn",
            "ZVByb3BlcnRpZXMSSQoPZG9taW5hbnRfY29sb3JzGAEgASgLMjAuZ29vZ2xl",
            "LmNsb3VkLnZpc2lvbi52MS5Eb21pbmFudENvbG9yc0Fubm90YXRpb24iYgoM",
            "SW1hZ2VDb250ZXh0EjoKDWxhdF9sb25nX3JlY3QYASABKAsyIy5nb29nbGUu",
            "Y2xvdWQudmlzaW9uLnYxLkxhdExvbmdSZWN0EhYKDmxhbmd1YWdlX2hpbnRz",
            "GAIgAygJIrQBChRBbm5vdGF0ZUltYWdlUmVxdWVzdBIsCgVpbWFnZRgBIAEo",
            "CzIdLmdvb2dsZS5jbG91ZC52aXNpb24udjEuSW1hZ2USMQoIZmVhdHVyZXMY",
            "AiADKAsyHy5nb29nbGUuY2xvdWQudmlzaW9uLnYxLkZlYXR1cmUSOwoNaW1h",
            "Z2VfY29udGV4dBgDIAEoCzIkLmdvb2dsZS5jbG91ZC52aXNpb24udjEuSW1h",
            "Z2VDb250ZXh0Iq0EChVBbm5vdGF0ZUltYWdlUmVzcG9uc2USQAoQZmFjZV9h",
            "bm5vdGF0aW9ucxgBIAMoCzImLmdvb2dsZS5jbG91ZC52aXNpb24udjEuRmFj",
            "ZUFubm90YXRpb24SRgoUbGFuZG1hcmtfYW5ub3RhdGlvbnMYAiADKAsyKC5n",
            "b29nbGUuY2xvdWQudmlzaW9uLnYxLkVudGl0eUFubm90YXRpb24SQgoQbG9n",
            "b19hbm5vdGF0aW9ucxgDIAMoCzIoLmdvb2dsZS5jbG91ZC52aXNpb24udjEu",
            "RW50aXR5QW5ub3RhdGlvbhJDChFsYWJlbF9hbm5vdGF0aW9ucxgEIAMoCzIo",
            "Lmdvb2dsZS5jbG91ZC52aXNpb24udjEuRW50aXR5QW5ub3RhdGlvbhJCChB0",
            "ZXh0X2Fubm90YXRpb25zGAUgAygLMiguZ29vZ2xlLmNsb3VkLnZpc2lvbi52",
            "MS5FbnRpdHlBbm5vdGF0aW9uEkwKFnNhZmVfc2VhcmNoX2Fubm90YXRpb24Y",
            "BiABKAsyLC5nb29nbGUuY2xvdWQudmlzaW9uLnYxLlNhZmVTZWFyY2hBbm5v",
            "dGF0aW9uEkwKG2ltYWdlX3Byb3BlcnRpZXNfYW5ub3RhdGlvbhgIIAEoCzIn",
            "Lmdvb2dsZS5jbG91ZC52aXNpb24udjEuSW1hZ2VQcm9wZXJ0aWVzEiEKBWVy",
            "cm9yGAkgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXMiXAoaQmF0Y2hBbm5vdGF0",
            "ZUltYWdlc1JlcXVlc3QSPgoIcmVxdWVzdHMYASADKAsyLC5nb29nbGUuY2xv",
            "dWQudmlzaW9uLnYxLkFubm90YXRlSW1hZ2VSZXF1ZXN0Il8KG0JhdGNoQW5u",
            "b3RhdGVJbWFnZXNSZXNwb25zZRJACglyZXNwb25zZXMYASADKAsyLS5nb29n",
            "bGUuY2xvdWQudmlzaW9uLnYxLkFubm90YXRlSW1hZ2VSZXNwb25zZSplCgpM",
            "aWtlbGlob29kEgsKB1VOS05PV04QABIRCg1WRVJZX1VOTElLRUxZEAESDAoI",
            "VU5MSUtFTFkQAhIMCghQT1NTSUJMRRADEgoKBkxJS0VMWRAEEg8KC1ZFUllf",
            "TElLRUxZEAUysQEKDkltYWdlQW5ub3RhdG9yEp4BChNCYXRjaEFubm90YXRl",
            "SW1hZ2VzEjIuZ29vZ2xlLmNsb3VkLnZpc2lvbi52MS5CYXRjaEFubm90YXRl",
            "SW1hZ2VzUmVxdWVzdBozLmdvb2dsZS5jbG91ZC52aXNpb24udjEuQmF0Y2hB",
            "bm5vdGF0ZUltYWdlc1Jlc3BvbnNlIh6C0+STAhgiEy92MS9pbWFnZXM6YW5u",
            "b3RhdGU6ASpCdAoaY29tLmdvb2dsZS5jbG91ZC52aXNpb24udjFCE0ltYWdl",
            "QW5ub3RhdG9yUHJvdG9QAVo8Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8v",
            "Z29vZ2xlYXBpcy9jbG91ZC92aXNpb24vdjE7dmlzaW9u+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Vision.V1.GeometryReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, global::Google.Type.ColorReflection.Descriptor, global::Google.Type.LatlngReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Vision.V1.Likelihood), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Feature), global::Google.Cloud.Vision.V1.Feature.Parser, new[]{ "Type", "MaxResults" }, null, new[]{ typeof(global::Google.Cloud.Vision.V1.Feature.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.ImageSource), global::Google.Cloud.Vision.V1.ImageSource.Parser, new[]{ "GcsImageUri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Image), global::Google.Cloud.Vision.V1.Image.Parser, new[]{ "Content", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.FaceAnnotation), global::Google.Cloud.Vision.V1.FaceAnnotation.Parser, new[]{ "BoundingPoly", "FdBoundingPoly", "Landmarks", "RollAngle", "PanAngle", "TiltAngle", "DetectionConfidence", "LandmarkingConfidence", "JoyLikelihood", "SorrowLikelihood", "AngerLikelihood", "SurpriseLikelihood", "UnderExposedLikelihood", "BlurredLikelihood", "HeadwearLikelihood" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark), global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark.Parser, new[]{ "Type", "Position" }, null, new[]{ typeof(global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.LocationInfo), global::Google.Cloud.Vision.V1.LocationInfo.Parser, new[]{ "LatLng" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.Property), global::Google.Cloud.Vision.V1.Property.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.EntityAnnotation), global::Google.Cloud.Vision.V1.EntityAnnotation.Parser, new[]{ "Mid", "Locale", "Description", "Score", "Confidence", "Topicality", "BoundingPoly", "Locations", "Properties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.SafeSearchAnnotation), global::Google.Cloud.Vision.V1.SafeSearchAnnotation.Parser, new[]{ "Adult", "Spoof", "Medical", "Violence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.LatLongRect), global::Google.Cloud.Vision.V1.LatLongRect.Parser, new[]{ "MinLatLng", "MaxLatLng" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.ColorInfo), global::Google.Cloud.Vision.V1.ColorInfo.Parser, new[]{ "Color", "Score", "PixelFraction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.DominantColorsAnnotation), global::Google.Cloud.Vision.V1.DominantColorsAnnotation.Parser, new[]{ "Colors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.ImageProperties), global::Google.Cloud.Vision.V1.ImageProperties.Parser, new[]{ "DominantColors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.ImageContext), global::Google.Cloud.Vision.V1.ImageContext.Parser, new[]{ "LatLongRect", "LanguageHints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.AnnotateImageRequest), global::Google.Cloud.Vision.V1.AnnotateImageRequest.Parser, new[]{ "Image", "Features", "ImageContext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.AnnotateImageResponse), global::Google.Cloud.Vision.V1.AnnotateImageResponse.Parser, new[]{ "FaceAnnotations", "LandmarkAnnotations", "LogoAnnotations", "LabelAnnotations", "TextAnnotations", "SafeSearchAnnotation", "ImagePropertiesAnnotation", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest), global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest.Parser, new[]{ "Requests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse), global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse.Parser, new[]{ "Responses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  A bucketized representation of likelihood meant to give our clients highly
  ///  stable results across model upgrades.
  /// </summary>
  public enum Likelihood {
    /// <summary>
    ///  Unknown likelihood.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    ///  The image very unlikely belongs to the vertical specified.
    /// </summary>
    [pbr::OriginalName("VERY_UNLIKELY")] VeryUnlikely = 1,
    /// <summary>
    ///  The image unlikely belongs to the vertical specified.
    /// </summary>
    [pbr::OriginalName("UNLIKELY")] Unlikely = 2,
    /// <summary>
    ///  The image possibly belongs to the vertical specified.
    /// </summary>
    [pbr::OriginalName("POSSIBLE")] Possible = 3,
    /// <summary>
    ///  The image likely belongs to the vertical specified.
    /// </summary>
    [pbr::OriginalName("LIKELY")] Likely = 4,
    /// <summary>
    ///  The image very likely belongs to the vertical specified.
    /// </summary>
    [pbr::OriginalName("VERY_LIKELY")] VeryLikely = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  The &lt;em>Feature&lt;/em> indicates what type of image detection task to perform.
  ///  Users describe the type of Google Cloud Vision API tasks to perform over
  ///  images by using &lt;em>Feature&lt;/em>s. Features encode the Cloud Vision API
  ///  vertical to operate on and the number of top-scoring results to return.
  /// </summary>
  public sealed partial class Feature : pb::IMessage<Feature> {
    private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Feature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature(Feature other) : this() {
      type_ = other.type_;
      maxResults_ = other.maxResults_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature Clone() {
      return new Feature(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.Feature.Types.Type type_ = 0;
    /// <summary>
    ///  The feature type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Feature.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "max_results" field.</summary>
    public const int MaxResultsFieldNumber = 2;
    private int maxResults_;
    /// <summary>
    ///  Maximum number of results of this type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxResults {
      get { return maxResults_; }
      set {
        maxResults_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Feature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Feature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MaxResults != other.MaxResults) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MaxResults != 0) hash ^= MaxResults.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MaxResults != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxResults);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MaxResults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxResults);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Feature other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MaxResults != 0) {
        MaxResults = other.MaxResults;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Google.Cloud.Vision.V1.Feature.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            MaxResults = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Feature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Type of image feature.
      /// </summary>
      public enum Type {
        /// <summary>
        ///  Unspecified feature type.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  Run face detection.
        /// </summary>
        [pbr::OriginalName("FACE_DETECTION")] FaceDetection = 1,
        /// <summary>
        ///  Run landmark detection.
        /// </summary>
        [pbr::OriginalName("LANDMARK_DETECTION")] LandmarkDetection = 2,
        /// <summary>
        ///  Run logo detection.
        /// </summary>
        [pbr::OriginalName("LOGO_DETECTION")] LogoDetection = 3,
        /// <summary>
        ///  Run label detection.
        /// </summary>
        [pbr::OriginalName("LABEL_DETECTION")] LabelDetection = 4,
        /// <summary>
        ///  Run OCR.
        /// </summary>
        [pbr::OriginalName("TEXT_DETECTION")] TextDetection = 5,
        /// <summary>
        ///  Run various computer vision models to compute image safe-search properties.
        /// </summary>
        [pbr::OriginalName("SAFE_SEARCH_DETECTION")] SafeSearchDetection = 6,
        /// <summary>
        ///  Compute a set of properties about the image (such as the image's dominant colors).
        /// </summary>
        [pbr::OriginalName("IMAGE_PROPERTIES")] ImageProperties = 7,
      }

    }
    #endregion

  }

  /// <summary>
  ///  External image source (Google Cloud Storage image location).
  /// </summary>
  public sealed partial class ImageSource : pb::IMessage<ImageSource> {
    private static readonly pb::MessageParser<ImageSource> _parser = new pb::MessageParser<ImageSource>(() => new ImageSource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSource(ImageSource other) : this() {
      gcsImageUri_ = other.gcsImageUri_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSource Clone() {
      return new ImageSource(this);
    }

    /// <summary>Field number for the "gcs_image_uri" field.</summary>
    public const int GcsImageUriFieldNumber = 1;
    private string gcsImageUri_ = "";
    /// <summary>
    ///  Google Cloud Storage image URI. It must be in the following form:
    ///  `gs://bucket_name/object_name`. For more
    ///  details, please see: https://cloud.google.com/storage/docs/reference-uris.
    ///  NOTE: Cloud Storage object versioning is not supported!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GcsImageUri {
      get { return gcsImageUri_; }
      set {
        gcsImageUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GcsImageUri != other.GcsImageUri) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GcsImageUri.Length != 0) hash ^= GcsImageUri.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GcsImageUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GcsImageUri);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GcsImageUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GcsImageUri);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSource other) {
      if (other == null) {
        return;
      }
      if (other.GcsImageUri.Length != 0) {
        GcsImageUri = other.GcsImageUri;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GcsImageUri = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Client image to perform Google Cloud Vision API tasks over.
  /// </summary>
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      content_ = other.content_;
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    ///  Image content, represented as a stream of bytes.
    ///  Note: as with all `bytes` fields, protobuffers use a pure binary
    ///  representation, whereas JSON representations use base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.ImageSource source_;
    /// <summary>
    ///  Google Cloud Storage image location. If both 'content' and 'source'
    ///  are filled for an image, 'content' takes precedence and it will be
    ///  used for performing the image annotation request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.ImageSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Google.Cloud.Vision.V1.ImageSource();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::Google.Cloud.Vision.V1.ImageSource();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A face annotation object contains the results of face detection.
  /// </summary>
  public sealed partial class FaceAnnotation : pb::IMessage<FaceAnnotation> {
    private static readonly pb::MessageParser<FaceAnnotation> _parser = new pb::MessageParser<FaceAnnotation>(() => new FaceAnnotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceAnnotation(FaceAnnotation other) : this() {
      BoundingPoly = other.boundingPoly_ != null ? other.BoundingPoly.Clone() : null;
      FdBoundingPoly = other.fdBoundingPoly_ != null ? other.FdBoundingPoly.Clone() : null;
      landmarks_ = other.landmarks_.Clone();
      rollAngle_ = other.rollAngle_;
      panAngle_ = other.panAngle_;
      tiltAngle_ = other.tiltAngle_;
      detectionConfidence_ = other.detectionConfidence_;
      landmarkingConfidence_ = other.landmarkingConfidence_;
      joyLikelihood_ = other.joyLikelihood_;
      sorrowLikelihood_ = other.sorrowLikelihood_;
      angerLikelihood_ = other.angerLikelihood_;
      surpriseLikelihood_ = other.surpriseLikelihood_;
      underExposedLikelihood_ = other.underExposedLikelihood_;
      blurredLikelihood_ = other.blurredLikelihood_;
      headwearLikelihood_ = other.headwearLikelihood_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceAnnotation Clone() {
      return new FaceAnnotation(this);
    }

    /// <summary>Field number for the "bounding_poly" field.</summary>
    public const int BoundingPolyFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.BoundingPoly boundingPoly_;
    /// <summary>
    ///  The bounding polygon around the face. The coordinates of the bounding box
    ///  are in the original image's scale, as returned in ImageParams.
    ///  The bounding box is computed to "frame" the face in accordance with human
    ///  expectations. It is based on the landmarker results.
    ///  Note that one or more x and/or y coordinates may not be generated in the
    ///  BoundingPoly (the polygon will be unbounded) if only a partial face appears in
    ///  the image to be annotated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly BoundingPoly {
      get { return boundingPoly_; }
      set {
        boundingPoly_ = value;
      }
    }

    /// <summary>Field number for the "fd_bounding_poly" field.</summary>
    public const int FdBoundingPolyFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.BoundingPoly fdBoundingPoly_;
    /// <summary>
    ///  This bounding polygon is tighter than the previous
    ///  &lt;code>boundingPoly&lt;/code>, and
    ///  encloses only the skin part of the face. Typically, it is used to
    ///  eliminate the face from any image analysis that detects the
    ///  "amount of skin" visible in an image. It is not based on the
    ///  landmarker results, only on the initial face detection, hence
    ///  the &lt;code>fd&lt;/code> (face detection) prefix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly FdBoundingPoly {
      get { return fdBoundingPoly_; }
      set {
        fdBoundingPoly_ = value;
      }
    }

    /// <summary>Field number for the "landmarks" field.</summary>
    public const int LandmarksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark> _repeated_landmarks_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark> landmarks_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark>();
    /// <summary>
    ///  Detected face landmarks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark> Landmarks {
      get { return landmarks_; }
    }

    /// <summary>Field number for the "roll_angle" field.</summary>
    public const int RollAngleFieldNumber = 4;
    private float rollAngle_;
    /// <summary>
    ///  Roll angle. Indicates the amount of clockwise/anti-clockwise rotation of
    ///  the
    ///  face relative to the image vertical, about the axis perpendicular to the
    ///  face. Range [-180,180].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RollAngle {
      get { return rollAngle_; }
      set {
        rollAngle_ = value;
      }
    }

    /// <summary>Field number for the "pan_angle" field.</summary>
    public const int PanAngleFieldNumber = 5;
    private float panAngle_;
    /// <summary>
    ///  Yaw angle. Indicates the leftward/rightward angle that the face is
    ///  pointing, relative to the vertical plane perpendicular to the image. Range
    ///  [-180,180].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PanAngle {
      get { return panAngle_; }
      set {
        panAngle_ = value;
      }
    }

    /// <summary>Field number for the "tilt_angle" field.</summary>
    public const int TiltAngleFieldNumber = 6;
    private float tiltAngle_;
    /// <summary>
    ///  Pitch angle. Indicates the upwards/downwards angle that the face is
    ///  pointing
    ///  relative to the image's horizontal plane. Range [-180,180].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TiltAngle {
      get { return tiltAngle_; }
      set {
        tiltAngle_ = value;
      }
    }

    /// <summary>Field number for the "detection_confidence" field.</summary>
    public const int DetectionConfidenceFieldNumber = 7;
    private float detectionConfidence_;
    /// <summary>
    ///  Detection confidence. Range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetectionConfidence {
      get { return detectionConfidence_; }
      set {
        detectionConfidence_ = value;
      }
    }

    /// <summary>Field number for the "landmarking_confidence" field.</summary>
    public const int LandmarkingConfidenceFieldNumber = 8;
    private float landmarkingConfidence_;
    /// <summary>
    ///  Face landmarking confidence. Range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LandmarkingConfidence {
      get { return landmarkingConfidence_; }
      set {
        landmarkingConfidence_ = value;
      }
    }

    /// <summary>Field number for the "joy_likelihood" field.</summary>
    public const int JoyLikelihoodFieldNumber = 9;
    private global::Google.Cloud.Vision.V1.Likelihood joyLikelihood_ = 0;
    /// <summary>
    ///  Joy likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood JoyLikelihood {
      get { return joyLikelihood_; }
      set {
        joyLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "sorrow_likelihood" field.</summary>
    public const int SorrowLikelihoodFieldNumber = 10;
    private global::Google.Cloud.Vision.V1.Likelihood sorrowLikelihood_ = 0;
    /// <summary>
    ///  Sorrow likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood SorrowLikelihood {
      get { return sorrowLikelihood_; }
      set {
        sorrowLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "anger_likelihood" field.</summary>
    public const int AngerLikelihoodFieldNumber = 11;
    private global::Google.Cloud.Vision.V1.Likelihood angerLikelihood_ = 0;
    /// <summary>
    ///  Anger likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood AngerLikelihood {
      get { return angerLikelihood_; }
      set {
        angerLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "surprise_likelihood" field.</summary>
    public const int SurpriseLikelihoodFieldNumber = 12;
    private global::Google.Cloud.Vision.V1.Likelihood surpriseLikelihood_ = 0;
    /// <summary>
    ///  Surprise likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood SurpriseLikelihood {
      get { return surpriseLikelihood_; }
      set {
        surpriseLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "under_exposed_likelihood" field.</summary>
    public const int UnderExposedLikelihoodFieldNumber = 13;
    private global::Google.Cloud.Vision.V1.Likelihood underExposedLikelihood_ = 0;
    /// <summary>
    ///  Under-exposed likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood UnderExposedLikelihood {
      get { return underExposedLikelihood_; }
      set {
        underExposedLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "blurred_likelihood" field.</summary>
    public const int BlurredLikelihoodFieldNumber = 14;
    private global::Google.Cloud.Vision.V1.Likelihood blurredLikelihood_ = 0;
    /// <summary>
    ///  Blurred likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood BlurredLikelihood {
      get { return blurredLikelihood_; }
      set {
        blurredLikelihood_ = value;
      }
    }

    /// <summary>Field number for the "headwear_likelihood" field.</summary>
    public const int HeadwearLikelihoodFieldNumber = 15;
    private global::Google.Cloud.Vision.V1.Likelihood headwearLikelihood_ = 0;
    /// <summary>
    ///  Headwear likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood HeadwearLikelihood {
      get { return headwearLikelihood_; }
      set {
        headwearLikelihood_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BoundingPoly, other.BoundingPoly)) return false;
      if (!object.Equals(FdBoundingPoly, other.FdBoundingPoly)) return false;
      if(!landmarks_.Equals(other.landmarks_)) return false;
      if (RollAngle != other.RollAngle) return false;
      if (PanAngle != other.PanAngle) return false;
      if (TiltAngle != other.TiltAngle) return false;
      if (DetectionConfidence != other.DetectionConfidence) return false;
      if (LandmarkingConfidence != other.LandmarkingConfidence) return false;
      if (JoyLikelihood != other.JoyLikelihood) return false;
      if (SorrowLikelihood != other.SorrowLikelihood) return false;
      if (AngerLikelihood != other.AngerLikelihood) return false;
      if (SurpriseLikelihood != other.SurpriseLikelihood) return false;
      if (UnderExposedLikelihood != other.UnderExposedLikelihood) return false;
      if (BlurredLikelihood != other.BlurredLikelihood) return false;
      if (HeadwearLikelihood != other.HeadwearLikelihood) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (boundingPoly_ != null) hash ^= BoundingPoly.GetHashCode();
      if (fdBoundingPoly_ != null) hash ^= FdBoundingPoly.GetHashCode();
      hash ^= landmarks_.GetHashCode();
      if (RollAngle != 0F) hash ^= RollAngle.GetHashCode();
      if (PanAngle != 0F) hash ^= PanAngle.GetHashCode();
      if (TiltAngle != 0F) hash ^= TiltAngle.GetHashCode();
      if (DetectionConfidence != 0F) hash ^= DetectionConfidence.GetHashCode();
      if (LandmarkingConfidence != 0F) hash ^= LandmarkingConfidence.GetHashCode();
      if (JoyLikelihood != 0) hash ^= JoyLikelihood.GetHashCode();
      if (SorrowLikelihood != 0) hash ^= SorrowLikelihood.GetHashCode();
      if (AngerLikelihood != 0) hash ^= AngerLikelihood.GetHashCode();
      if (SurpriseLikelihood != 0) hash ^= SurpriseLikelihood.GetHashCode();
      if (UnderExposedLikelihood != 0) hash ^= UnderExposedLikelihood.GetHashCode();
      if (BlurredLikelihood != 0) hash ^= BlurredLikelihood.GetHashCode();
      if (HeadwearLikelihood != 0) hash ^= HeadwearLikelihood.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (boundingPoly_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BoundingPoly);
      }
      if (fdBoundingPoly_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FdBoundingPoly);
      }
      landmarks_.WriteTo(output, _repeated_landmarks_codec);
      if (RollAngle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RollAngle);
      }
      if (PanAngle != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PanAngle);
      }
      if (TiltAngle != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TiltAngle);
      }
      if (DetectionConfidence != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DetectionConfidence);
      }
      if (LandmarkingConfidence != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(LandmarkingConfidence);
      }
      if (JoyLikelihood != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) JoyLikelihood);
      }
      if (SorrowLikelihood != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SorrowLikelihood);
      }
      if (AngerLikelihood != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) AngerLikelihood);
      }
      if (SurpriseLikelihood != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) SurpriseLikelihood);
      }
      if (UnderExposedLikelihood != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) UnderExposedLikelihood);
      }
      if (BlurredLikelihood != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) BlurredLikelihood);
      }
      if (HeadwearLikelihood != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) HeadwearLikelihood);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (boundingPoly_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingPoly);
      }
      if (fdBoundingPoly_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FdBoundingPoly);
      }
      size += landmarks_.CalculateSize(_repeated_landmarks_codec);
      if (RollAngle != 0F) {
        size += 1 + 4;
      }
      if (PanAngle != 0F) {
        size += 1 + 4;
      }
      if (TiltAngle != 0F) {
        size += 1 + 4;
      }
      if (DetectionConfidence != 0F) {
        size += 1 + 4;
      }
      if (LandmarkingConfidence != 0F) {
        size += 1 + 4;
      }
      if (JoyLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoyLikelihood);
      }
      if (SorrowLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SorrowLikelihood);
      }
      if (AngerLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AngerLikelihood);
      }
      if (SurpriseLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SurpriseLikelihood);
      }
      if (UnderExposedLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnderExposedLikelihood);
      }
      if (BlurredLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlurredLikelihood);
      }
      if (HeadwearLikelihood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HeadwearLikelihood);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceAnnotation other) {
      if (other == null) {
        return;
      }
      if (other.boundingPoly_ != null) {
        if (boundingPoly_ == null) {
          boundingPoly_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        BoundingPoly.MergeFrom(other.BoundingPoly);
      }
      if (other.fdBoundingPoly_ != null) {
        if (fdBoundingPoly_ == null) {
          fdBoundingPoly_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        FdBoundingPoly.MergeFrom(other.FdBoundingPoly);
      }
      landmarks_.Add(other.landmarks_);
      if (other.RollAngle != 0F) {
        RollAngle = other.RollAngle;
      }
      if (other.PanAngle != 0F) {
        PanAngle = other.PanAngle;
      }
      if (other.TiltAngle != 0F) {
        TiltAngle = other.TiltAngle;
      }
      if (other.DetectionConfidence != 0F) {
        DetectionConfidence = other.DetectionConfidence;
      }
      if (other.LandmarkingConfidence != 0F) {
        LandmarkingConfidence = other.LandmarkingConfidence;
      }
      if (other.JoyLikelihood != 0) {
        JoyLikelihood = other.JoyLikelihood;
      }
      if (other.SorrowLikelihood != 0) {
        SorrowLikelihood = other.SorrowLikelihood;
      }
      if (other.AngerLikelihood != 0) {
        AngerLikelihood = other.AngerLikelihood;
      }
      if (other.SurpriseLikelihood != 0) {
        SurpriseLikelihood = other.SurpriseLikelihood;
      }
      if (other.UnderExposedLikelihood != 0) {
        UnderExposedLikelihood = other.UnderExposedLikelihood;
      }
      if (other.BlurredLikelihood != 0) {
        BlurredLikelihood = other.BlurredLikelihood;
      }
      if (other.HeadwearLikelihood != 0) {
        HeadwearLikelihood = other.HeadwearLikelihood;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (boundingPoly_ == null) {
              boundingPoly_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(boundingPoly_);
            break;
          }
          case 18: {
            if (fdBoundingPoly_ == null) {
              fdBoundingPoly_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(fdBoundingPoly_);
            break;
          }
          case 26: {
            landmarks_.AddEntriesFrom(input, _repeated_landmarks_codec);
            break;
          }
          case 37: {
            RollAngle = input.ReadFloat();
            break;
          }
          case 45: {
            PanAngle = input.ReadFloat();
            break;
          }
          case 53: {
            TiltAngle = input.ReadFloat();
            break;
          }
          case 61: {
            DetectionConfidence = input.ReadFloat();
            break;
          }
          case 69: {
            LandmarkingConfidence = input.ReadFloat();
            break;
          }
          case 72: {
            joyLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 80: {
            sorrowLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 88: {
            angerLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 96: {
            surpriseLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 104: {
            underExposedLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 112: {
            blurredLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 120: {
            headwearLikelihood_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FaceAnnotation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  A face-specific landmark (for example, a face feature).
      ///  Landmark positions may fall outside the bounds of the image
      ///  when the face is near one or more edges of the image.
      ///  Therefore it is NOT guaranteed that 0 &lt;= x &lt; width or 0 &lt;= y &lt; height.
      /// </summary>
      public sealed partial class Landmark : pb::IMessage<Landmark> {
        private static readonly pb::MessageParser<Landmark> _parser = new pb::MessageParser<Landmark>(() => new Landmark());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Landmark> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Vision.V1.FaceAnnotation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Landmark() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Landmark(Landmark other) : this() {
          type_ = other.type_;
          Position = other.position_ != null ? other.Position.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Landmark Clone() {
          return new Landmark(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark.Types.Type type_ = 0;
        /// <summary>
        ///  Face landmark type.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 4;
        private global::Google.Cloud.Vision.V1.Position position_;
        /// <summary>
        ///  Face landmark position.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Vision.V1.Position Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Landmark);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Landmark other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(Position, other.Position)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (position_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Position);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Landmark other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::Google.Cloud.Vision.V1.Position();
            }
            Position.MergeFrom(other.Position);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 24: {
                type_ = (global::Google.Cloud.Vision.V1.FaceAnnotation.Types.Landmark.Types.Type) input.ReadEnum();
                break;
              }
              case 34: {
                if (position_ == null) {
                  position_ = new global::Google.Cloud.Vision.V1.Position();
                }
                input.ReadMessage(position_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Landmark message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///  Face landmark (feature) type.
          ///  Left and right are defined from the vantage of the viewer of the image,
          ///  without considering mirror projections typical of photos. So, LEFT_EYE,
          ///  typically is the person's right eye.
          /// </summary>
          public enum Type {
            /// <summary>
            ///  Unknown face landmark detected. Should not be filled.
            /// </summary>
            [pbr::OriginalName("UNKNOWN_LANDMARK")] UnknownLandmark = 0,
            /// <summary>
            ///  Left eye.
            /// </summary>
            [pbr::OriginalName("LEFT_EYE")] LeftEye = 1,
            /// <summary>
            ///  Right eye.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYE")] RightEye = 2,
            /// <summary>
            ///  Left of left eyebrow.
            /// </summary>
            [pbr::OriginalName("LEFT_OF_LEFT_EYEBROW")] LeftOfLeftEyebrow = 3,
            /// <summary>
            ///  Right of left eyebrow.
            /// </summary>
            [pbr::OriginalName("RIGHT_OF_LEFT_EYEBROW")] RightOfLeftEyebrow = 4,
            /// <summary>
            ///  Left of right eyebrow.
            /// </summary>
            [pbr::OriginalName("LEFT_OF_RIGHT_EYEBROW")] LeftOfRightEyebrow = 5,
            /// <summary>
            ///  Right of right eyebrow.
            /// </summary>
            [pbr::OriginalName("RIGHT_OF_RIGHT_EYEBROW")] RightOfRightEyebrow = 6,
            /// <summary>
            ///  Midpoint between eyes.
            /// </summary>
            [pbr::OriginalName("MIDPOINT_BETWEEN_EYES")] MidpointBetweenEyes = 7,
            /// <summary>
            ///  Nose tip.
            /// </summary>
            [pbr::OriginalName("NOSE_TIP")] NoseTip = 8,
            /// <summary>
            ///  Upper lip.
            /// </summary>
            [pbr::OriginalName("UPPER_LIP")] UpperLip = 9,
            /// <summary>
            ///  Lower lip.
            /// </summary>
            [pbr::OriginalName("LOWER_LIP")] LowerLip = 10,
            /// <summary>
            ///  Mouth left.
            /// </summary>
            [pbr::OriginalName("MOUTH_LEFT")] MouthLeft = 11,
            /// <summary>
            ///  Mouth right.
            /// </summary>
            [pbr::OriginalName("MOUTH_RIGHT")] MouthRight = 12,
            /// <summary>
            ///  Mouth center.
            /// </summary>
            [pbr::OriginalName("MOUTH_CENTER")] MouthCenter = 13,
            /// <summary>
            ///  Nose, bottom right.
            /// </summary>
            [pbr::OriginalName("NOSE_BOTTOM_RIGHT")] NoseBottomRight = 14,
            /// <summary>
            ///  Nose, bottom left.
            /// </summary>
            [pbr::OriginalName("NOSE_BOTTOM_LEFT")] NoseBottomLeft = 15,
            /// <summary>
            ///  Nose, bottom center.
            /// </summary>
            [pbr::OriginalName("NOSE_BOTTOM_CENTER")] NoseBottomCenter = 16,
            /// <summary>
            ///  Left eye, top boundary.
            /// </summary>
            [pbr::OriginalName("LEFT_EYE_TOP_BOUNDARY")] LeftEyeTopBoundary = 17,
            /// <summary>
            ///  Left eye, right corner.
            /// </summary>
            [pbr::OriginalName("LEFT_EYE_RIGHT_CORNER")] LeftEyeRightCorner = 18,
            /// <summary>
            ///  Left eye, bottom boundary.
            /// </summary>
            [pbr::OriginalName("LEFT_EYE_BOTTOM_BOUNDARY")] LeftEyeBottomBoundary = 19,
            /// <summary>
            ///  Left eye, left corner.
            /// </summary>
            [pbr::OriginalName("LEFT_EYE_LEFT_CORNER")] LeftEyeLeftCorner = 20,
            /// <summary>
            ///  Right eye, top boundary.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYE_TOP_BOUNDARY")] RightEyeTopBoundary = 21,
            /// <summary>
            ///  Right eye, right corner.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYE_RIGHT_CORNER")] RightEyeRightCorner = 22,
            /// <summary>
            ///  Right eye, bottom boundary.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYE_BOTTOM_BOUNDARY")] RightEyeBottomBoundary = 23,
            /// <summary>
            ///  Right eye, left corner.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYE_LEFT_CORNER")] RightEyeLeftCorner = 24,
            /// <summary>
            ///  Left eyebrow, upper midpoint.
            /// </summary>
            [pbr::OriginalName("LEFT_EYEBROW_UPPER_MIDPOINT")] LeftEyebrowUpperMidpoint = 25,
            /// <summary>
            ///  Right eyebrow, upper midpoint.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYEBROW_UPPER_MIDPOINT")] RightEyebrowUpperMidpoint = 26,
            /// <summary>
            ///  Left ear tragion.
            /// </summary>
            [pbr::OriginalName("LEFT_EAR_TRAGION")] LeftEarTragion = 27,
            /// <summary>
            ///  Right ear tragion.
            /// </summary>
            [pbr::OriginalName("RIGHT_EAR_TRAGION")] RightEarTragion = 28,
            /// <summary>
            ///  Left eye pupil.
            /// </summary>
            [pbr::OriginalName("LEFT_EYE_PUPIL")] LeftEyePupil = 29,
            /// <summary>
            ///  Right eye pupil.
            /// </summary>
            [pbr::OriginalName("RIGHT_EYE_PUPIL")] RightEyePupil = 30,
            /// <summary>
            ///  Forehead glabella.
            /// </summary>
            [pbr::OriginalName("FOREHEAD_GLABELLA")] ForeheadGlabella = 31,
            /// <summary>
            ///  Chin gnathion.
            /// </summary>
            [pbr::OriginalName("CHIN_GNATHION")] ChinGnathion = 32,
            /// <summary>
            ///  Chin left gonion.
            /// </summary>
            [pbr::OriginalName("CHIN_LEFT_GONION")] ChinLeftGonion = 33,
            /// <summary>
            ///  Chin right gonion.
            /// </summary>
            [pbr::OriginalName("CHIN_RIGHT_GONION")] ChinRightGonion = 34,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///  Detected entity location information.
  /// </summary>
  public sealed partial class LocationInfo : pb::IMessage<LocationInfo> {
    private static readonly pb::MessageParser<LocationInfo> _parser = new pb::MessageParser<LocationInfo>(() => new LocationInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationInfo(LocationInfo other) : this() {
      LatLng = other.latLng_ != null ? other.LatLng.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationInfo Clone() {
      return new LocationInfo(this);
    }

    /// <summary>Field number for the "lat_lng" field.</summary>
    public const int LatLngFieldNumber = 1;
    private global::Google.Type.LatLng latLng_;
    /// <summary>
    ///  Lat - long location coordinates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.LatLng LatLng {
      get { return latLng_; }
      set {
        latLng_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LatLng, other.LatLng)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (latLng_ != null) hash ^= LatLng.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (latLng_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LatLng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (latLng_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatLng);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationInfo other) {
      if (other == null) {
        return;
      }
      if (other.latLng_ != null) {
        if (latLng_ == null) {
          latLng_ = new global::Google.Type.LatLng();
        }
        LatLng.MergeFrom(other.LatLng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (latLng_ == null) {
              latLng_ = new global::Google.Type.LatLng();
            }
            input.ReadMessage(latLng_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Arbitrary name/value pair.
  /// </summary>
  public sealed partial class Property : pb::IMessage<Property> {
    private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Property> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property(Property other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property Clone() {
      return new Property(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Name of the property.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    ///  Value of the property.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Property);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Property other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Property other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Set of detected entity features.
  /// </summary>
  public sealed partial class EntityAnnotation : pb::IMessage<EntityAnnotation> {
    private static readonly pb::MessageParser<EntityAnnotation> _parser = new pb::MessageParser<EntityAnnotation>(() => new EntityAnnotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityAnnotation(EntityAnnotation other) : this() {
      mid_ = other.mid_;
      locale_ = other.locale_;
      description_ = other.description_;
      score_ = other.score_;
      confidence_ = other.confidence_;
      topicality_ = other.topicality_;
      BoundingPoly = other.boundingPoly_ != null ? other.BoundingPoly.Clone() : null;
      locations_ = other.locations_.Clone();
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityAnnotation Clone() {
      return new EntityAnnotation(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private string mid_ = "";
    /// <summary>
    ///  Opaque entity ID. Some IDs might be available in Knowledge Graph(KG).
    ///  For more details on KG please see:
    ///  https://developers.google.com/knowledge-graph/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mid {
      get { return mid_; }
      set {
        mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 2;
    private string locale_ = "";
    /// <summary>
    ///  The language code for the locale in which the entity textual
    ///  &lt;code>description&lt;/code> (next field) is expressed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///  Entity textual description, expressed in its &lt;code>locale&lt;/code> language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private float score_;
    /// <summary>
    ///  Overall score of the result. Range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 5;
    private float confidence_;
    /// <summary>
    ///  The accuracy of the entity detection in an image.
    ///  For example, for an image containing 'Eiffel Tower,' this field represents
    ///  the confidence that there is a tower in the query image. Range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "topicality" field.</summary>
    public const int TopicalityFieldNumber = 6;
    private float topicality_;
    /// <summary>
    ///  The relevancy of the ICA (Image Content Annotation) label to the
    ///  image. For example, the relevancy of 'tower' to an image containing
    ///  'Eiffel Tower' is likely higher than an image containing a distant towering
    ///  building, though the confidence that there is a tower may be the same.
    ///  Range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Topicality {
      get { return topicality_; }
      set {
        topicality_ = value;
      }
    }

    /// <summary>Field number for the "bounding_poly" field.</summary>
    public const int BoundingPolyFieldNumber = 7;
    private global::Google.Cloud.Vision.V1.BoundingPoly boundingPoly_;
    /// <summary>
    ///  Image region to which this entity belongs. Not filled currently
    ///  for `LABEL_DETECTION` features. For `TEXT_DETECTION` (OCR), `boundingPoly`s
    ///  are produced for the entire text detected in an image region, followed by
    ///  `boundingPoly`s for each word within the detected text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.BoundingPoly BoundingPoly {
      get { return boundingPoly_; }
      set {
        boundingPoly_ = value;
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.LocationInfo> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Cloud.Vision.V1.LocationInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.LocationInfo> locations_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.LocationInfo>();
    /// <summary>
    ///  The location information for the detected entity. Multiple
    ///  &lt;code>LocationInfo&lt;/code> elements can be present since one location may
    ///  indicate the location of the scene in the query image, and another the
    ///  location of the place where the query image was taken. Location information
    ///  is usually present for landmarks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.LocationInfo> Locations {
      get { return locations_; }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Property> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Cloud.Vision.V1.Property.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Property> properties_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Property>();
    /// <summary>
    ///  Some entities can have additional optional &lt;code>Property&lt;/code> fields.
    ///  For example a different kind of score or string that qualifies the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Property> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Locale != other.Locale) return false;
      if (Description != other.Description) return false;
      if (Score != other.Score) return false;
      if (Confidence != other.Confidence) return false;
      if (Topicality != other.Topicality) return false;
      if (!object.Equals(BoundingPoly, other.BoundingPoly)) return false;
      if(!locations_.Equals(other.locations_)) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid.Length != 0) hash ^= Mid.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Score != 0F) hash ^= Score.GetHashCode();
      if (Confidence != 0F) hash ^= Confidence.GetHashCode();
      if (Topicality != 0F) hash ^= Topicality.GetHashCode();
      if (boundingPoly_ != null) hash ^= BoundingPoly.GetHashCode();
      hash ^= locations_.GetHashCode();
      hash ^= properties_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mid);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Locale);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Score != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Score);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Confidence);
      }
      if (Topicality != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Topicality);
      }
      if (boundingPoly_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BoundingPoly);
      }
      locations_.WriteTo(output, _repeated_locations_codec);
      properties_.WriteTo(output, _repeated_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (Topicality != 0F) {
        size += 1 + 4;
      }
      if (boundingPoly_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingPoly);
      }
      size += locations_.CalculateSize(_repeated_locations_codec);
      size += properties_.CalculateSize(_repeated_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityAnnotation other) {
      if (other == null) {
        return;
      }
      if (other.Mid.Length != 0) {
        Mid = other.Mid;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      if (other.Topicality != 0F) {
        Topicality = other.Topicality;
      }
      if (other.boundingPoly_ != null) {
        if (boundingPoly_ == null) {
          boundingPoly_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
        }
        BoundingPoly.MergeFrom(other.BoundingPoly);
      }
      locations_.Add(other.locations_);
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mid = input.ReadString();
            break;
          }
          case 18: {
            Locale = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 37: {
            Score = input.ReadFloat();
            break;
          }
          case 45: {
            Confidence = input.ReadFloat();
            break;
          }
          case 53: {
            Topicality = input.ReadFloat();
            break;
          }
          case 58: {
            if (boundingPoly_ == null) {
              boundingPoly_ = new global::Google.Cloud.Vision.V1.BoundingPoly();
            }
            input.ReadMessage(boundingPoly_);
            break;
          }
          case 66: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
          case 74: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Set of features pertaining to the image, computed by various computer vision
  ///  methods over safe-search verticals (for example, adult, spoof, medical,
  ///  violence).
  /// </summary>
  public sealed partial class SafeSearchAnnotation : pb::IMessage<SafeSearchAnnotation> {
    private static readonly pb::MessageParser<SafeSearchAnnotation> _parser = new pb::MessageParser<SafeSearchAnnotation>(() => new SafeSearchAnnotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SafeSearchAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SafeSearchAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SafeSearchAnnotation(SafeSearchAnnotation other) : this() {
      adult_ = other.adult_;
      spoof_ = other.spoof_;
      medical_ = other.medical_;
      violence_ = other.violence_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SafeSearchAnnotation Clone() {
      return new SafeSearchAnnotation(this);
    }

    /// <summary>Field number for the "adult" field.</summary>
    public const int AdultFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.Likelihood adult_ = 0;
    /// <summary>
    ///  Represents the adult contents likelihood for the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood Adult {
      get { return adult_; }
      set {
        adult_ = value;
      }
    }

    /// <summary>Field number for the "spoof" field.</summary>
    public const int SpoofFieldNumber = 2;
    private global::Google.Cloud.Vision.V1.Likelihood spoof_ = 0;
    /// <summary>
    ///  Spoof likelihood. The likelihood that an obvious modification
    ///  was made to the image's canonical version to make it appear
    ///  funny or offensive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood Spoof {
      get { return spoof_; }
      set {
        spoof_ = value;
      }
    }

    /// <summary>Field number for the "medical" field.</summary>
    public const int MedicalFieldNumber = 3;
    private global::Google.Cloud.Vision.V1.Likelihood medical_ = 0;
    /// <summary>
    ///  Likelihood this is a medical image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood Medical {
      get { return medical_; }
      set {
        medical_ = value;
      }
    }

    /// <summary>Field number for the "violence" field.</summary>
    public const int ViolenceFieldNumber = 4;
    private global::Google.Cloud.Vision.V1.Likelihood violence_ = 0;
    /// <summary>
    ///  Violence likelihood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Likelihood Violence {
      get { return violence_; }
      set {
        violence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SafeSearchAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SafeSearchAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Adult != other.Adult) return false;
      if (Spoof != other.Spoof) return false;
      if (Medical != other.Medical) return false;
      if (Violence != other.Violence) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Adult != 0) hash ^= Adult.GetHashCode();
      if (Spoof != 0) hash ^= Spoof.GetHashCode();
      if (Medical != 0) hash ^= Medical.GetHashCode();
      if (Violence != 0) hash ^= Violence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Adult != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Adult);
      }
      if (Spoof != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Spoof);
      }
      if (Medical != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Medical);
      }
      if (Violence != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Violence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Adult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Adult);
      }
      if (Spoof != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Spoof);
      }
      if (Medical != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Medical);
      }
      if (Violence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Violence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SafeSearchAnnotation other) {
      if (other == null) {
        return;
      }
      if (other.Adult != 0) {
        Adult = other.Adult;
      }
      if (other.Spoof != 0) {
        Spoof = other.Spoof;
      }
      if (other.Medical != 0) {
        Medical = other.Medical;
      }
      if (other.Violence != 0) {
        Violence = other.Violence;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            adult_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 16: {
            spoof_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 24: {
            medical_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
          case 32: {
            violence_ = (global::Google.Cloud.Vision.V1.Likelihood) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Rectangle determined by min and max LatLng pairs.
  /// </summary>
  public sealed partial class LatLongRect : pb::IMessage<LatLongRect> {
    private static readonly pb::MessageParser<LatLongRect> _parser = new pb::MessageParser<LatLongRect>(() => new LatLongRect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatLongRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatLongRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatLongRect(LatLongRect other) : this() {
      MinLatLng = other.minLatLng_ != null ? other.MinLatLng.Clone() : null;
      MaxLatLng = other.maxLatLng_ != null ? other.MaxLatLng.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatLongRect Clone() {
      return new LatLongRect(this);
    }

    /// <summary>Field number for the "min_lat_lng" field.</summary>
    public const int MinLatLngFieldNumber = 1;
    private global::Google.Type.LatLng minLatLng_;
    /// <summary>
    ///  Min lat/long pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.LatLng MinLatLng {
      get { return minLatLng_; }
      set {
        minLatLng_ = value;
      }
    }

    /// <summary>Field number for the "max_lat_lng" field.</summary>
    public const int MaxLatLngFieldNumber = 2;
    private global::Google.Type.LatLng maxLatLng_;
    /// <summary>
    ///  Max lat/long pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.LatLng MaxLatLng {
      get { return maxLatLng_; }
      set {
        maxLatLng_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatLongRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatLongRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MinLatLng, other.MinLatLng)) return false;
      if (!object.Equals(MaxLatLng, other.MaxLatLng)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (minLatLng_ != null) hash ^= MinLatLng.GetHashCode();
      if (maxLatLng_ != null) hash ^= MaxLatLng.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minLatLng_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MinLatLng);
      }
      if (maxLatLng_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MaxLatLng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minLatLng_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinLatLng);
      }
      if (maxLatLng_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxLatLng);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatLongRect other) {
      if (other == null) {
        return;
      }
      if (other.minLatLng_ != null) {
        if (minLatLng_ == null) {
          minLatLng_ = new global::Google.Type.LatLng();
        }
        MinLatLng.MergeFrom(other.MinLatLng);
      }
      if (other.maxLatLng_ != null) {
        if (maxLatLng_ == null) {
          maxLatLng_ = new global::Google.Type.LatLng();
        }
        MaxLatLng.MergeFrom(other.MaxLatLng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (minLatLng_ == null) {
              minLatLng_ = new global::Google.Type.LatLng();
            }
            input.ReadMessage(minLatLng_);
            break;
          }
          case 18: {
            if (maxLatLng_ == null) {
              maxLatLng_ = new global::Google.Type.LatLng();
            }
            input.ReadMessage(maxLatLng_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Color information consists of RGB channels, score and fraction of
  ///  image the color occupies in the image.
  /// </summary>
  public sealed partial class ColorInfo : pb::IMessage<ColorInfo> {
    private static readonly pb::MessageParser<ColorInfo> _parser = new pb::MessageParser<ColorInfo>(() => new ColorInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorInfo(ColorInfo other) : this() {
      Color = other.color_ != null ? other.Color.Clone() : null;
      score_ = other.score_;
      pixelFraction_ = other.pixelFraction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorInfo Clone() {
      return new ColorInfo(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Google.Type.Color color_;
    /// <summary>
    ///  RGB components of the color.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private float score_;
    /// <summary>
    ///  Image-specific score for this color. Value in range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "pixel_fraction" field.</summary>
    public const int PixelFractionFieldNumber = 3;
    private float pixelFraction_;
    /// <summary>
    ///  Stores the fraction of pixels the color occupies in the image.
    ///  Value in range [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PixelFraction {
      get { return pixelFraction_; }
      set {
        pixelFraction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (Score != other.Score) return false;
      if (PixelFraction != other.PixelFraction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Score != 0F) hash ^= Score.GetHashCode();
      if (PixelFraction != 0F) hash ^= PixelFraction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (Score != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Score);
      }
      if (PixelFraction != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PixelFraction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (PixelFraction != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorInfo other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Google.Type.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.PixelFraction != 0F) {
        PixelFraction = other.PixelFraction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (color_ == null) {
              color_ = new global::Google.Type.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 21: {
            Score = input.ReadFloat();
            break;
          }
          case 29: {
            PixelFraction = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Set of dominant colors and their corresponding scores.
  /// </summary>
  public sealed partial class DominantColorsAnnotation : pb::IMessage<DominantColorsAnnotation> {
    private static readonly pb::MessageParser<DominantColorsAnnotation> _parser = new pb::MessageParser<DominantColorsAnnotation>(() => new DominantColorsAnnotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominantColorsAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominantColorsAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominantColorsAnnotation(DominantColorsAnnotation other) : this() {
      colors_ = other.colors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominantColorsAnnotation Clone() {
      return new DominantColorsAnnotation(this);
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.ColorInfo> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Vision.V1.ColorInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.ColorInfo> colors_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.ColorInfo>();
    /// <summary>
    ///  RGB color values, with their score and pixel fraction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.ColorInfo> Colors {
      get { return colors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominantColorsAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominantColorsAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!colors_.Equals(other.colors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= colors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      colors_.WriteTo(output, _repeated_colors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += colors_.CalculateSize(_repeated_colors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominantColorsAnnotation other) {
      if (other == null) {
        return;
      }
      colors_.Add(other.colors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Stores image properties (e.g. dominant colors).
  /// </summary>
  public sealed partial class ImageProperties : pb::IMessage<ImageProperties> {
    private static readonly pb::MessageParser<ImageProperties> _parser = new pb::MessageParser<ImageProperties>(() => new ImageProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageProperties(ImageProperties other) : this() {
      DominantColors = other.dominantColors_ != null ? other.DominantColors.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageProperties Clone() {
      return new ImageProperties(this);
    }

    /// <summary>Field number for the "dominant_colors" field.</summary>
    public const int DominantColorsFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.DominantColorsAnnotation dominantColors_;
    /// <summary>
    ///  If present, dominant colors completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.DominantColorsAnnotation DominantColors {
      get { return dominantColors_; }
      set {
        dominantColors_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DominantColors, other.DominantColors)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dominantColors_ != null) hash ^= DominantColors.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dominantColors_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DominantColors);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dominantColors_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DominantColors);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageProperties other) {
      if (other == null) {
        return;
      }
      if (other.dominantColors_ != null) {
        if (dominantColors_ == null) {
          dominantColors_ = new global::Google.Cloud.Vision.V1.DominantColorsAnnotation();
        }
        DominantColors.MergeFrom(other.DominantColors);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dominantColors_ == null) {
              dominantColors_ = new global::Google.Cloud.Vision.V1.DominantColorsAnnotation();
            }
            input.ReadMessage(dominantColors_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Image context.
  /// </summary>
  public sealed partial class ImageContext : pb::IMessage<ImageContext> {
    private static readonly pb::MessageParser<ImageContext> _parser = new pb::MessageParser<ImageContext>(() => new ImageContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContext(ImageContext other) : this() {
      LatLongRect = other.latLongRect_ != null ? other.LatLongRect.Clone() : null;
      languageHints_ = other.languageHints_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContext Clone() {
      return new ImageContext(this);
    }

    /// <summary>Field number for the "lat_long_rect" field.</summary>
    public const int LatLongRectFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.LatLongRect latLongRect_;
    /// <summary>
    ///  Lat/long rectangle that specifies the location of the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.LatLongRect LatLongRect {
      get { return latLongRect_; }
      set {
        latLongRect_ = value;
      }
    }

    /// <summary>Field number for the "language_hints" field.</summary>
    public const int LanguageHintsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_languageHints_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> languageHints_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  List of languages to use for TEXT_DETECTION. In most cases, an empty value
    ///  yields the best results since it enables automatic language detection. For
    ///  languages based on the Latin alphabet, setting `language_hints` is not
    ///  needed. In rare cases, when the language of the text in the image is known,
    ///  setting a hint will help get better results (although it will be a
    ///  significant hindrance if the hint is wrong). Text detection returns an
    ///  error if one or more of the specified languages is not one of the
    ///  [supported
    ///  languages](/translate/v2/translate-reference#supported_languages).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LanguageHints {
      get { return languageHints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LatLongRect, other.LatLongRect)) return false;
      if(!languageHints_.Equals(other.languageHints_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (latLongRect_ != null) hash ^= LatLongRect.GetHashCode();
      hash ^= languageHints_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (latLongRect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LatLongRect);
      }
      languageHints_.WriteTo(output, _repeated_languageHints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (latLongRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatLongRect);
      }
      size += languageHints_.CalculateSize(_repeated_languageHints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageContext other) {
      if (other == null) {
        return;
      }
      if (other.latLongRect_ != null) {
        if (latLongRect_ == null) {
          latLongRect_ = new global::Google.Cloud.Vision.V1.LatLongRect();
        }
        LatLongRect.MergeFrom(other.LatLongRect);
      }
      languageHints_.Add(other.languageHints_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (latLongRect_ == null) {
              latLongRect_ = new global::Google.Cloud.Vision.V1.LatLongRect();
            }
            input.ReadMessage(latLongRect_);
            break;
          }
          case 18: {
            languageHints_.AddEntriesFrom(input, _repeated_languageHints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request for performing Google Cloud Vision API tasks over a user-provided
  ///  image, with user-requested features.
  /// </summary>
  public sealed partial class AnnotateImageRequest : pb::IMessage<AnnotateImageRequest> {
    private static readonly pb::MessageParser<AnnotateImageRequest> _parser = new pb::MessageParser<AnnotateImageRequest>(() => new AnnotateImageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotateImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateImageRequest(AnnotateImageRequest other) : this() {
      Image = other.image_ != null ? other.Image.Clone() : null;
      features_ = other.features_.Clone();
      ImageContext = other.imageContext_ != null ? other.ImageContext.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateImageRequest Clone() {
      return new AnnotateImageRequest(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Google.Cloud.Vision.V1.Image image_;
    /// <summary>
    ///  The image to be processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.Feature> _repeated_features_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Vision.V1.Feature.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.Feature> features_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.Feature>();
    /// <summary>
    ///  Requested features.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.Feature> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "image_context" field.</summary>
    public const int ImageContextFieldNumber = 3;
    private global::Google.Cloud.Vision.V1.ImageContext imageContext_;
    /// <summary>
    ///  Additional context that may accompany the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.ImageContext ImageContext {
      get { return imageContext_; }
      set {
        imageContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotateImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotateImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if(!features_.Equals(other.features_)) return false;
      if (!object.Equals(ImageContext, other.ImageContext)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      hash ^= features_.GetHashCode();
      if (imageContext_ != null) hash ^= ImageContext.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      features_.WriteTo(output, _repeated_features_codec);
      if (imageContext_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ImageContext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      if (imageContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageContext);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotateImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::Google.Cloud.Vision.V1.Image();
        }
        Image.MergeFrom(other.Image);
      }
      features_.Add(other.features_);
      if (other.imageContext_ != null) {
        if (imageContext_ == null) {
          imageContext_ = new global::Google.Cloud.Vision.V1.ImageContext();
        }
        ImageContext.MergeFrom(other.ImageContext);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (image_ == null) {
              image_ = new global::Google.Cloud.Vision.V1.Image();
            }
            input.ReadMessage(image_);
            break;
          }
          case 18: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
          case 26: {
            if (imageContext_ == null) {
              imageContext_ = new global::Google.Cloud.Vision.V1.ImageContext();
            }
            input.ReadMessage(imageContext_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response to an image annotation request.
  /// </summary>
  public sealed partial class AnnotateImageResponse : pb::IMessage<AnnotateImageResponse> {
    private static readonly pb::MessageParser<AnnotateImageResponse> _parser = new pb::MessageParser<AnnotateImageResponse>(() => new AnnotateImageResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotateImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateImageResponse(AnnotateImageResponse other) : this() {
      faceAnnotations_ = other.faceAnnotations_.Clone();
      landmarkAnnotations_ = other.landmarkAnnotations_.Clone();
      logoAnnotations_ = other.logoAnnotations_.Clone();
      labelAnnotations_ = other.labelAnnotations_.Clone();
      textAnnotations_ = other.textAnnotations_.Clone();
      SafeSearchAnnotation = other.safeSearchAnnotation_ != null ? other.SafeSearchAnnotation.Clone() : null;
      ImagePropertiesAnnotation = other.imagePropertiesAnnotation_ != null ? other.ImagePropertiesAnnotation.Clone() : null;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateImageResponse Clone() {
      return new AnnotateImageResponse(this);
    }

    /// <summary>Field number for the "face_annotations" field.</summary>
    public const int FaceAnnotationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.FaceAnnotation> _repeated_faceAnnotations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Vision.V1.FaceAnnotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.FaceAnnotation> faceAnnotations_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.FaceAnnotation>();
    /// <summary>
    ///  If present, face detection completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.FaceAnnotation> FaceAnnotations {
      get { return faceAnnotations_; }
    }

    /// <summary>Field number for the "landmark_annotations" field.</summary>
    public const int LandmarkAnnotationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.EntityAnnotation> _repeated_landmarkAnnotations_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Vision.V1.EntityAnnotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> landmarkAnnotations_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation>();
    /// <summary>
    ///  If present, landmark detection completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> LandmarkAnnotations {
      get { return landmarkAnnotations_; }
    }

    /// <summary>Field number for the "logo_annotations" field.</summary>
    public const int LogoAnnotationsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.EntityAnnotation> _repeated_logoAnnotations_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Vision.V1.EntityAnnotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> logoAnnotations_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation>();
    /// <summary>
    ///  If present, logo detection completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> LogoAnnotations {
      get { return logoAnnotations_; }
    }

    /// <summary>Field number for the "label_annotations" field.</summary>
    public const int LabelAnnotationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.EntityAnnotation> _repeated_labelAnnotations_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Cloud.Vision.V1.EntityAnnotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> labelAnnotations_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation>();
    /// <summary>
    ///  If present, label detection completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> LabelAnnotations {
      get { return labelAnnotations_; }
    }

    /// <summary>Field number for the "text_annotations" field.</summary>
    public const int TextAnnotationsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.EntityAnnotation> _repeated_textAnnotations_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Vision.V1.EntityAnnotation.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> textAnnotations_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation>();
    /// <summary>
    ///  If present, text (OCR) detection completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.EntityAnnotation> TextAnnotations {
      get { return textAnnotations_; }
    }

    /// <summary>Field number for the "safe_search_annotation" field.</summary>
    public const int SafeSearchAnnotationFieldNumber = 6;
    private global::Google.Cloud.Vision.V1.SafeSearchAnnotation safeSearchAnnotation_;
    /// <summary>
    ///  If present, safe-search annotation completed successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.SafeSearchAnnotation SafeSearchAnnotation {
      get { return safeSearchAnnotation_; }
      set {
        safeSearchAnnotation_ = value;
      }
    }

    /// <summary>Field number for the "image_properties_annotation" field.</summary>
    public const int ImagePropertiesAnnotationFieldNumber = 8;
    private global::Google.Cloud.Vision.V1.ImageProperties imagePropertiesAnnotation_;
    /// <summary>
    ///  If present, image properties were extracted successfully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Vision.V1.ImageProperties ImagePropertiesAnnotation {
      get { return imagePropertiesAnnotation_; }
      set {
        imagePropertiesAnnotation_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 9;
    private global::Google.Rpc.Status error_;
    /// <summary>
    ///  If set, represents the error message for the operation.
    ///  Note that filled-in mage annotations are guaranteed to be
    ///  correct, even when &lt;code>error&lt;/code> is non-empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotateImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotateImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!faceAnnotations_.Equals(other.faceAnnotations_)) return false;
      if(!landmarkAnnotations_.Equals(other.landmarkAnnotations_)) return false;
      if(!logoAnnotations_.Equals(other.logoAnnotations_)) return false;
      if(!labelAnnotations_.Equals(other.labelAnnotations_)) return false;
      if(!textAnnotations_.Equals(other.textAnnotations_)) return false;
      if (!object.Equals(SafeSearchAnnotation, other.SafeSearchAnnotation)) return false;
      if (!object.Equals(ImagePropertiesAnnotation, other.ImagePropertiesAnnotation)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= faceAnnotations_.GetHashCode();
      hash ^= landmarkAnnotations_.GetHashCode();
      hash ^= logoAnnotations_.GetHashCode();
      hash ^= labelAnnotations_.GetHashCode();
      hash ^= textAnnotations_.GetHashCode();
      if (safeSearchAnnotation_ != null) hash ^= SafeSearchAnnotation.GetHashCode();
      if (imagePropertiesAnnotation_ != null) hash ^= ImagePropertiesAnnotation.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      faceAnnotations_.WriteTo(output, _repeated_faceAnnotations_codec);
      landmarkAnnotations_.WriteTo(output, _repeated_landmarkAnnotations_codec);
      logoAnnotations_.WriteTo(output, _repeated_logoAnnotations_codec);
      labelAnnotations_.WriteTo(output, _repeated_labelAnnotations_codec);
      textAnnotations_.WriteTo(output, _repeated_textAnnotations_codec);
      if (safeSearchAnnotation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SafeSearchAnnotation);
      }
      if (imagePropertiesAnnotation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ImagePropertiesAnnotation);
      }
      if (error_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += faceAnnotations_.CalculateSize(_repeated_faceAnnotations_codec);
      size += landmarkAnnotations_.CalculateSize(_repeated_landmarkAnnotations_codec);
      size += logoAnnotations_.CalculateSize(_repeated_logoAnnotations_codec);
      size += labelAnnotations_.CalculateSize(_repeated_labelAnnotations_codec);
      size += textAnnotations_.CalculateSize(_repeated_textAnnotations_codec);
      if (safeSearchAnnotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SafeSearchAnnotation);
      }
      if (imagePropertiesAnnotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImagePropertiesAnnotation);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotateImageResponse other) {
      if (other == null) {
        return;
      }
      faceAnnotations_.Add(other.faceAnnotations_);
      landmarkAnnotations_.Add(other.landmarkAnnotations_);
      logoAnnotations_.Add(other.logoAnnotations_);
      labelAnnotations_.Add(other.labelAnnotations_);
      textAnnotations_.Add(other.textAnnotations_);
      if (other.safeSearchAnnotation_ != null) {
        if (safeSearchAnnotation_ == null) {
          safeSearchAnnotation_ = new global::Google.Cloud.Vision.V1.SafeSearchAnnotation();
        }
        SafeSearchAnnotation.MergeFrom(other.SafeSearchAnnotation);
      }
      if (other.imagePropertiesAnnotation_ != null) {
        if (imagePropertiesAnnotation_ == null) {
          imagePropertiesAnnotation_ = new global::Google.Cloud.Vision.V1.ImageProperties();
        }
        ImagePropertiesAnnotation.MergeFrom(other.ImagePropertiesAnnotation);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Google.Rpc.Status();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            faceAnnotations_.AddEntriesFrom(input, _repeated_faceAnnotations_codec);
            break;
          }
          case 18: {
            landmarkAnnotations_.AddEntriesFrom(input, _repeated_landmarkAnnotations_codec);
            break;
          }
          case 26: {
            logoAnnotations_.AddEntriesFrom(input, _repeated_logoAnnotations_codec);
            break;
          }
          case 34: {
            labelAnnotations_.AddEntriesFrom(input, _repeated_labelAnnotations_codec);
            break;
          }
          case 42: {
            textAnnotations_.AddEntriesFrom(input, _repeated_textAnnotations_codec);
            break;
          }
          case 50: {
            if (safeSearchAnnotation_ == null) {
              safeSearchAnnotation_ = new global::Google.Cloud.Vision.V1.SafeSearchAnnotation();
            }
            input.ReadMessage(safeSearchAnnotation_);
            break;
          }
          case 66: {
            if (imagePropertiesAnnotation_ == null) {
              imagePropertiesAnnotation_ = new global::Google.Cloud.Vision.V1.ImageProperties();
            }
            input.ReadMessage(imagePropertiesAnnotation_);
            break;
          }
          case 74: {
            if (error_ == null) {
              error_ = new global::Google.Rpc.Status();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Multiple image annotation requests are batched into a single service call.
  /// </summary>
  public sealed partial class BatchAnnotateImagesRequest : pb::IMessage<BatchAnnotateImagesRequest> {
    private static readonly pb::MessageParser<BatchAnnotateImagesRequest> _parser = new pb::MessageParser<BatchAnnotateImagesRequest>(() => new BatchAnnotateImagesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchAnnotateImagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchAnnotateImagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchAnnotateImagesRequest(BatchAnnotateImagesRequest other) : this() {
      requests_ = other.requests_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchAnnotateImagesRequest Clone() {
      return new BatchAnnotateImagesRequest(this);
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.AnnotateImageRequest> _repeated_requests_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Vision.V1.AnnotateImageRequest.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.AnnotateImageRequest> requests_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.AnnotateImageRequest>();
    /// <summary>
    ///  Individual image annotation requests for this batch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.AnnotateImageRequest> Requests {
      get { return requests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchAnnotateImagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchAnnotateImagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requests_.Equals(other.requests_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requests_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requests_.WriteTo(output, _repeated_requests_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requests_.CalculateSize(_repeated_requests_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchAnnotateImagesRequest other) {
      if (other == null) {
        return;
      }
      requests_.Add(other.requests_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            requests_.AddEntriesFrom(input, _repeated_requests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response to a batch image annotation request.
  /// </summary>
  public sealed partial class BatchAnnotateImagesResponse : pb::IMessage<BatchAnnotateImagesResponse> {
    private static readonly pb::MessageParser<BatchAnnotateImagesResponse> _parser = new pb::MessageParser<BatchAnnotateImagesResponse>(() => new BatchAnnotateImagesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchAnnotateImagesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchAnnotateImagesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchAnnotateImagesResponse(BatchAnnotateImagesResponse other) : this() {
      responses_ = other.responses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchAnnotateImagesResponse Clone() {
      return new BatchAnnotateImagesResponse(this);
    }

    /// <summary>Field number for the "responses" field.</summary>
    public const int ResponsesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Vision.V1.AnnotateImageResponse> _repeated_responses_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Vision.V1.AnnotateImageResponse.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Vision.V1.AnnotateImageResponse> responses_ = new pbc::RepeatedField<global::Google.Cloud.Vision.V1.AnnotateImageResponse>();
    /// <summary>
    ///  Individual responses to image annotation requests within the batch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Vision.V1.AnnotateImageResponse> Responses {
      get { return responses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchAnnotateImagesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchAnnotateImagesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!responses_.Equals(other.responses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= responses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      responses_.WriteTo(output, _repeated_responses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += responses_.CalculateSize(_repeated_responses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchAnnotateImagesResponse other) {
      if (other == null) {
        return;
      }
      responses_.Add(other.responses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            responses_.AddEntriesFrom(input, _repeated_responses_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
