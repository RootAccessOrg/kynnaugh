// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataproc/v1/clusters.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Dataproc.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/dataproc/v1/clusters.proto</summary>
  public static partial class ClustersReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/dataproc/v1/clusters.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClustersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cidnb29nbGUvY2xvdWQvZGF0YXByb2MvdjEvY2x1c3RlcnMucHJvdG8SGGdv",
            "b2dsZS5jbG91ZC5kYXRhcHJvYy52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9u",
            "cy5wcm90bxopZ29vZ2xlL2Nsb3VkL2RhdGFwcm9jL3YxL29wZXJhdGlvbnMu",
            "cHJvdG8aI2dvb2dsZS9sb25ncnVubmluZy9vcGVyYXRpb25zLnByb3RvGh5n",
            "b29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aIGdvb2dsZS9wcm90b2J1",
            "Zi9maWVsZF9tYXNrLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1w",
            "LnByb3RvIvwBCgdDbHVzdGVyEhIKCnByb2plY3RfaWQYASABKAkSFAoMY2x1",
            "c3Rlcl9uYW1lGAIgASgJEjcKBmNvbmZpZxgDIAEoCzInLmdvb2dsZS5jbG91",
            "ZC5kYXRhcHJvYy52MS5DbHVzdGVyQ29uZmlnEjcKBnN0YXR1cxgEIAEoCzIn",
            "Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyU3RhdHVzEj8KDnN0",
            "YXR1c19oaXN0b3J5GAcgAygLMicuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYx",
            "LkNsdXN0ZXJTdGF0dXMSFAoMY2x1c3Rlcl91dWlkGAYgASgJIuEDCg1DbHVz",
            "dGVyQ29uZmlnEhUKDWNvbmZpZ19idWNrZXQYASABKAkSRgoSZ2NlX2NsdXN0",
            "ZXJfY29uZmlnGAggASgLMiouZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkdj",
            "ZUNsdXN0ZXJDb25maWcSRAoNbWFzdGVyX2NvbmZpZxgJIAEoCzItLmdvb2ds",
            "ZS5jbG91ZC5kYXRhcHJvYy52MS5JbnN0YW5jZUdyb3VwQ29uZmlnEkQKDXdv",
            "cmtlcl9jb25maWcYCiABKAsyLS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEu",
            "SW5zdGFuY2VHcm91cENvbmZpZxJOChdzZWNvbmRhcnlfd29ya2VyX2NvbmZp",
            "ZxgMIAEoCzItLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5JbnN0YW5jZUdy",
            "b3VwQ29uZmlnEkEKD3NvZnR3YXJlX2NvbmZpZxgNIAEoCzIoLmdvb2dsZS5j",
            "bG91ZC5kYXRhcHJvYy52MS5Tb2Z0d2FyZUNvbmZpZxJSChZpbml0aWFsaXph",
            "dGlvbl9hY3Rpb25zGAsgAygLMjIuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYx",
            "Lk5vZGVJbml0aWFsaXphdGlvbkFjdGlvbiKWAgoQR2NlQ2x1c3RlckNvbmZp",
            "ZxIQCgh6b25lX3VyaRgBIAEoCRITCgtuZXR3b3JrX3VyaRgCIAEoCRIWCg5z",
            "dWJuZXR3b3JrX3VyaRgGIAEoCRIYChBpbnRlcm5hbF9pcF9vbmx5GAcgASgI",
            "Eh4KFnNlcnZpY2VfYWNjb3VudF9zY29wZXMYAyADKAkSDAoEdGFncxgEIAMo",
            "CRJKCghtZXRhZGF0YRgFIAMoCzI4Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52",
            "MS5HY2VDbHVzdGVyQ29uZmlnLk1ldGFkYXRhRW50cnkaLwoNTWV0YWRhdGFF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpACChNJbnN0",
            "YW5jZUdyb3VwQ29uZmlnEhUKDW51bV9pbnN0YW5jZXMYASABKAUSFgoOaW5z",
            "dGFuY2VfbmFtZXMYAiADKAkSEQoJaW1hZ2VfdXJpGAMgASgJEhgKEG1hY2hp",
            "bmVfdHlwZV91cmkYBCABKAkSOQoLZGlza19jb25maWcYBSABKAsyJC5nb29n",
            "bGUuY2xvdWQuZGF0YXByb2MudjEuRGlza0NvbmZpZxIWCg5pc19wcmVlbXB0",
            "aWJsZRgGIAEoCBJKChRtYW5hZ2VkX2dyb3VwX2NvbmZpZxgHIAEoCzIsLmdv",
            "b2dsZS5jbG91ZC5kYXRhcHJvYy52MS5NYW5hZ2VkR3JvdXBDb25maWciWQoS",
            "TWFuYWdlZEdyb3VwQ29uZmlnEh4KFmluc3RhbmNlX3RlbXBsYXRlX25hbWUY",
            "ASABKAkSIwobaW5zdGFuY2VfZ3JvdXBfbWFuYWdlcl9uYW1lGAIgASgJIj8K",
            "CkRpc2tDb25maWcSGQoRYm9vdF9kaXNrX3NpemVfZ2IYASABKAUSFgoObnVt",
            "X2xvY2FsX3NzZHMYAiABKAUiaQoYTm9kZUluaXRpYWxpemF0aW9uQWN0aW9u",
            "EhcKD2V4ZWN1dGFibGVfZmlsZRgBIAEoCRI0ChFleGVjdXRpb25fdGltZW91",
            "dBgCIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiLrAQoNQ2x1c3Rl",
            "clN0YXR1cxI8CgVzdGF0ZRgBIAEoDjItLmdvb2dsZS5jbG91ZC5kYXRhcHJv",
            "Yy52MS5DbHVzdGVyU3RhdHVzLlN0YXRlEg4KBmRldGFpbBgCIAEoCRI0ChBz",
            "dGF0ZV9zdGFydF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcCJWCgVTdGF0ZRILCgdVTktOT1dOEAASDAoIQ1JFQVRJTkcQARILCgdS",
            "VU5OSU5HEAISCQoFRVJST1IQAxIMCghERUxFVElORxAEEgwKCFVQREFUSU5H",
            "EAUiqAEKDlNvZnR3YXJlQ29uZmlnEhUKDWltYWdlX3ZlcnNpb24YASABKAkS",
            "TAoKcHJvcGVydGllcxgCIAMoCzI4Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52",
            "MS5Tb2Z0d2FyZUNvbmZpZy5Qcm9wZXJ0aWVzRW50cnkaMQoPUHJvcGVydGll",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEibgoUQ3Jl",
            "YXRlQ2x1c3RlclJlcXVlc3QSEgoKcHJvamVjdF9pZBgBIAEoCRIOCgZyZWdp",
            "b24YAyABKAkSMgoHY2x1c3RlchgCIAEoCzIhLmdvb2dsZS5jbG91ZC5kYXRh",
            "cHJvYy52MS5DbHVzdGVyIrUBChRVcGRhdGVDbHVzdGVyUmVxdWVzdBISCgpw",
            "cm9qZWN0X2lkGAEgASgJEg4KBnJlZ2lvbhgFIAEoCRIUCgxjbHVzdGVyX25h",
            "bWUYAiABKAkSMgoHY2x1c3RlchgDIAEoCzIhLmdvb2dsZS5jbG91ZC5kYXRh",
            "cHJvYy52MS5DbHVzdGVyEi8KC3VwZGF0ZV9tYXNrGAQgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLkZpZWxkTWFzayJQChREZWxldGVDbHVzdGVyUmVxdWVzdBIS",
            "Cgpwcm9qZWN0X2lkGAEgASgJEg4KBnJlZ2lvbhgDIAEoCRIUCgxjbHVzdGVy",
            "X25hbWUYAiABKAkiTQoRR2V0Q2x1c3RlclJlcXVlc3QSEgoKcHJvamVjdF9p",
            "ZBgBIAEoCRIOCgZyZWdpb24YAyABKAkSFAoMY2x1c3Rlcl9uYW1lGAIgASgJ",
            "ImAKE0xpc3RDbHVzdGVyc1JlcXVlc3QSEgoKcHJvamVjdF9pZBgBIAEoCRIO",
            "CgZyZWdpb24YBCABKAkSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9r",
            "ZW4YAyABKAkiZAoUTGlzdENsdXN0ZXJzUmVzcG9uc2USMwoIY2x1c3RlcnMY",
            "ASADKAsyIS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3RlchIXCg9u",
            "ZXh0X3BhZ2VfdG9rZW4YAiABKAkiUgoWRGlhZ25vc2VDbHVzdGVyUmVxdWVz",
            "dBISCgpwcm9qZWN0X2lkGAEgASgJEg4KBnJlZ2lvbhgDIAEoCRIUCgxjbHVz",
            "dGVyX25hbWUYAiABKAkiLAoWRGlhZ25vc2VDbHVzdGVyUmVzdWx0cxISCgpv",
            "dXRwdXRfdXJpGAEgASgJMrIIChFDbHVzdGVyQ29udHJvbGxlchKkAQoNQ3Jl",
            "YXRlQ2x1c3RlchIuLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DcmVhdGVD",
            "bHVzdGVyUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24i",
            "RILT5JMCPiIzL3YxL3Byb2plY3RzL3twcm9qZWN0X2lkfS9yZWdpb25zL3ty",
            "ZWdpb259L2NsdXN0ZXJzOgdjbHVzdGVyErMBCg1VcGRhdGVDbHVzdGVyEi4u",
            "Z29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLlVwZGF0ZUNsdXN0ZXJSZXF1ZXN0",
            "Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJTgtPkkwJNMkIvdjEv",
            "cHJvamVjdHMve3Byb2plY3RfaWR9L3JlZ2lvbnMve3JlZ2lvbn0vY2x1c3Rl",
            "cnMve2NsdXN0ZXJfbmFtZX06B2NsdXN0ZXISqgEKDURlbGV0ZUNsdXN0ZXIS",
            "Li5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuRGVsZXRlQ2x1c3RlclJlcXVl",
            "c3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIkqC0+STAkQqQi92",
            "MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vcmVnaW9ucy97cmVnaW9ufS9jbHVz",
            "dGVycy97Y2x1c3Rlcl9uYW1lfRKoAQoKR2V0Q2x1c3RlchIrLmdvb2dsZS5j",
            "bG91ZC5kYXRhcHJvYy52MS5HZXRDbHVzdGVyUmVxdWVzdBohLmdvb2dsZS5j",
            "bG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyIkqC0+STAkQSQi92MS9wcm9qZWN0",
            "cy97cHJvamVjdF9pZH0vcmVnaW9ucy97cmVnaW9ufS9jbHVzdGVycy97Y2x1",
            "c3Rlcl9uYW1lfRKqAQoMTGlzdENsdXN0ZXJzEi0uZ29vZ2xlLmNsb3VkLmRh",
            "dGFwcm9jLnYxLkxpc3RDbHVzdGVyc1JlcXVlc3QaLi5nb29nbGUuY2xvdWQu",
            "ZGF0YXByb2MudjEuTGlzdENsdXN0ZXJzUmVzcG9uc2UiO4LT5JMCNRIzL3Yx",
            "L3Byb2plY3RzL3twcm9qZWN0X2lkfS9yZWdpb25zL3tyZWdpb259L2NsdXN0",
            "ZXJzEroBCg9EaWFnbm9zZUNsdXN0ZXISMC5nb29nbGUuY2xvdWQuZGF0YXBy",
            "b2MudjEuRGlhZ25vc2VDbHVzdGVyUmVxdWVzdBodLmdvb2dsZS5sb25ncnVu",
            "bmluZy5PcGVyYXRpb24iVoLT5JMCUCJLL3YxL3Byb2plY3RzL3twcm9qZWN0",
            "X2lkfS9yZWdpb25zL3tyZWdpb259L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9",
            "OmRpYWdub3NlOgEqQnEKHGNvbS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjFC",
            "DUNsdXN0ZXJzUHJvdG9QAVpAZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8v",
            "Z29vZ2xlYXBpcy9jbG91ZC9kYXRhcHJvYy92MTtkYXRhcHJvY2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Dataproc.V1.OperationsReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.Cluster), global::Google.Cloud.Dataproc.V1.Cluster.Parser, new[]{ "ProjectId", "ClusterName", "Config", "Status", "StatusHistory", "ClusterUuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.ClusterConfig), global::Google.Cloud.Dataproc.V1.ClusterConfig.Parser, new[]{ "ConfigBucket", "GceClusterConfig", "MasterConfig", "WorkerConfig", "SecondaryWorkerConfig", "SoftwareConfig", "InitializationActions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.GceClusterConfig), global::Google.Cloud.Dataproc.V1.GceClusterConfig.Parser, new[]{ "ZoneUri", "NetworkUri", "SubnetworkUri", "InternalIpOnly", "ServiceAccountScopes", "Tags", "Metadata" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.InstanceGroupConfig), global::Google.Cloud.Dataproc.V1.InstanceGroupConfig.Parser, new[]{ "NumInstances", "InstanceNames", "ImageUri", "MachineTypeUri", "DiskConfig", "IsPreemptible", "ManagedGroupConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.ManagedGroupConfig), global::Google.Cloud.Dataproc.V1.ManagedGroupConfig.Parser, new[]{ "InstanceTemplateName", "InstanceGroupManagerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.DiskConfig), global::Google.Cloud.Dataproc.V1.DiskConfig.Parser, new[]{ "BootDiskSizeGb", "NumLocalSsds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.NodeInitializationAction), global::Google.Cloud.Dataproc.V1.NodeInitializationAction.Parser, new[]{ "ExecutableFile", "ExecutionTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.ClusterStatus), global::Google.Cloud.Dataproc.V1.ClusterStatus.Parser, new[]{ "State", "Detail", "StateStartTime" }, null, new[]{ typeof(global::Google.Cloud.Dataproc.V1.ClusterStatus.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.SoftwareConfig), global::Google.Cloud.Dataproc.V1.SoftwareConfig.Parser, new[]{ "ImageVersion", "Properties" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.CreateClusterRequest), global::Google.Cloud.Dataproc.V1.CreateClusterRequest.Parser, new[]{ "ProjectId", "Region", "Cluster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.UpdateClusterRequest), global::Google.Cloud.Dataproc.V1.UpdateClusterRequest.Parser, new[]{ "ProjectId", "Region", "ClusterName", "Cluster", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.DeleteClusterRequest), global::Google.Cloud.Dataproc.V1.DeleteClusterRequest.Parser, new[]{ "ProjectId", "Region", "ClusterName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.GetClusterRequest), global::Google.Cloud.Dataproc.V1.GetClusterRequest.Parser, new[]{ "ProjectId", "Region", "ClusterName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.ListClustersRequest), global::Google.Cloud.Dataproc.V1.ListClustersRequest.Parser, new[]{ "ProjectId", "Region", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.ListClustersResponse), global::Google.Cloud.Dataproc.V1.ListClustersResponse.Parser, new[]{ "Clusters", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.DiagnoseClusterRequest), global::Google.Cloud.Dataproc.V1.DiagnoseClusterRequest.Parser, new[]{ "ProjectId", "Region", "ClusterName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Dataproc.V1.DiagnoseClusterResults), global::Google.Cloud.Dataproc.V1.DiagnoseClusterResults.Parser, new[]{ "OutputUri" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Describes the identifying information, config, and status of
  ///  a cluster of Google Compute Engine instances.
  /// </summary>
  public sealed partial class Cluster : pb::IMessage<Cluster> {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      projectId_ = other.projectId_;
      clusterName_ = other.clusterName_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      Status = other.status_ != null ? other.Status.Clone() : null;
      statusHistory_ = other.statusHistory_.Clone();
      clusterUuid_ = other.clusterUuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The Google Cloud Platform project ID that the cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 2;
    private string clusterName_ = "";
    /// <summary>
    ///  [Required] The cluster name. Cluster names within a project must be
    ///  unique. Names of deleted clusters can be reused.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Google.Cloud.Dataproc.V1.ClusterConfig config_;
    /// <summary>
    ///  [Required] The cluster config. Note that Cloud Dataproc may set
    ///  default values, and values may change when clusters are updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.ClusterConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Google.Cloud.Dataproc.V1.ClusterStatus status_;
    /// <summary>
    ///  [Output-only] Cluster status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.ClusterStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "status_history" field.</summary>
    public const int StatusHistoryFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dataproc.V1.ClusterStatus> _repeated_statusHistory_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Cloud.Dataproc.V1.ClusterStatus.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.ClusterStatus> statusHistory_ = new pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.ClusterStatus>();
    /// <summary>
    ///  [Output-only] The previous cluster status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.ClusterStatus> StatusHistory {
      get { return statusHistory_; }
    }

    /// <summary>Field number for the "cluster_uuid" field.</summary>
    public const int ClusterUuidFieldNumber = 6;
    private string clusterUuid_ = "";
    /// <summary>
    ///  [Output-only] A cluster UUID (Unique Universal Identifier). Cloud Dataproc
    ///  generates this value when it creates the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterUuid {
      get { return clusterUuid_; }
      set {
        clusterUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (ClusterName != other.ClusterName) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if(!statusHistory_.Equals(other.statusHistory_)) return false;
      if (ClusterUuid != other.ClusterUuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= statusHistory_.GetHashCode();
      if (ClusterUuid.Length != 0) hash ^= ClusterUuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterName);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (status_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Status);
      }
      if (ClusterUuid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClusterUuid);
      }
      statusHistory_.WriteTo(output, _repeated_statusHistory_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += statusHistory_.CalculateSize(_repeated_statusHistory_codec);
      if (ClusterUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Cloud.Dataproc.V1.ClusterConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Google.Cloud.Dataproc.V1.ClusterStatus();
        }
        Status.MergeFrom(other.Status);
      }
      statusHistory_.Add(other.statusHistory_);
      if (other.ClusterUuid.Length != 0) {
        ClusterUuid = other.ClusterUuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ClusterName = input.ReadString();
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Google.Cloud.Dataproc.V1.ClusterConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 34: {
            if (status_ == null) {
              status_ = new global::Google.Cloud.Dataproc.V1.ClusterStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 50: {
            ClusterUuid = input.ReadString();
            break;
          }
          case 58: {
            statusHistory_.AddEntriesFrom(input, _repeated_statusHistory_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The cluster config.
  /// </summary>
  public sealed partial class ClusterConfig : pb::IMessage<ClusterConfig> {
    private static readonly pb::MessageParser<ClusterConfig> _parser = new pb::MessageParser<ClusterConfig>(() => new ClusterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig(ClusterConfig other) : this() {
      configBucket_ = other.configBucket_;
      GceClusterConfig = other.gceClusterConfig_ != null ? other.GceClusterConfig.Clone() : null;
      MasterConfig = other.masterConfig_ != null ? other.MasterConfig.Clone() : null;
      WorkerConfig = other.workerConfig_ != null ? other.WorkerConfig.Clone() : null;
      SecondaryWorkerConfig = other.secondaryWorkerConfig_ != null ? other.SecondaryWorkerConfig.Clone() : null;
      SoftwareConfig = other.softwareConfig_ != null ? other.SoftwareConfig.Clone() : null;
      initializationActions_ = other.initializationActions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig Clone() {
      return new ClusterConfig(this);
    }

    /// <summary>Field number for the "config_bucket" field.</summary>
    public const int ConfigBucketFieldNumber = 1;
    private string configBucket_ = "";
    /// <summary>
    ///  [Optional] A Google Cloud Storage staging bucket used for sharing generated
    ///  SSH keys and config. If you do not specify a staging bucket, Cloud
    ///  Dataproc will determine an appropriate Cloud Storage location (US,
    ///  ASIA, or EU) for your cluster's staging bucket according to the Google
    ///  Compute Engine zone where your cluster is deployed, and then it will create
    ///  and manage this project-level, per-location bucket for you.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigBucket {
      get { return configBucket_; }
      set {
        configBucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gce_cluster_config" field.</summary>
    public const int GceClusterConfigFieldNumber = 8;
    private global::Google.Cloud.Dataproc.V1.GceClusterConfig gceClusterConfig_;
    /// <summary>
    ///  [Required] The shared Google Compute Engine config settings for
    ///  all instances in a cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.GceClusterConfig GceClusterConfig {
      get { return gceClusterConfig_; }
      set {
        gceClusterConfig_ = value;
      }
    }

    /// <summary>Field number for the "master_config" field.</summary>
    public const int MasterConfigFieldNumber = 9;
    private global::Google.Cloud.Dataproc.V1.InstanceGroupConfig masterConfig_;
    /// <summary>
    ///  [Optional] The Google Compute Engine config settings for
    ///  the master instance in a cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.InstanceGroupConfig MasterConfig {
      get { return masterConfig_; }
      set {
        masterConfig_ = value;
      }
    }

    /// <summary>Field number for the "worker_config" field.</summary>
    public const int WorkerConfigFieldNumber = 10;
    private global::Google.Cloud.Dataproc.V1.InstanceGroupConfig workerConfig_;
    /// <summary>
    ///  [Optional] The Google Compute Engine config settings for
    ///  worker instances in a cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.InstanceGroupConfig WorkerConfig {
      get { return workerConfig_; }
      set {
        workerConfig_ = value;
      }
    }

    /// <summary>Field number for the "secondary_worker_config" field.</summary>
    public const int SecondaryWorkerConfigFieldNumber = 12;
    private global::Google.Cloud.Dataproc.V1.InstanceGroupConfig secondaryWorkerConfig_;
    /// <summary>
    ///  [Optional] The Google Compute Engine config settings for
    ///  additional worker instances in a cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.InstanceGroupConfig SecondaryWorkerConfig {
      get { return secondaryWorkerConfig_; }
      set {
        secondaryWorkerConfig_ = value;
      }
    }

    /// <summary>Field number for the "software_config" field.</summary>
    public const int SoftwareConfigFieldNumber = 13;
    private global::Google.Cloud.Dataproc.V1.SoftwareConfig softwareConfig_;
    /// <summary>
    ///  [Optional] The config settings for software inside the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.SoftwareConfig SoftwareConfig {
      get { return softwareConfig_; }
      set {
        softwareConfig_ = value;
      }
    }

    /// <summary>Field number for the "initialization_actions" field.</summary>
    public const int InitializationActionsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dataproc.V1.NodeInitializationAction> _repeated_initializationActions_codec
        = pb::FieldCodec.ForMessage(90, global::Google.Cloud.Dataproc.V1.NodeInitializationAction.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.NodeInitializationAction> initializationActions_ = new pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.NodeInitializationAction>();
    /// <summary>
    ///  [Optional] Commands to execute on each node after config is
    ///  completed. By default, executables are run on master and all worker nodes.
    ///  You can test a node's &lt;code>role&lt;/code> metadata to run an executable on
    ///  a master or worker node, as shown below using `curl` (you can also use `wget`):
    ///
    ///      ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role)
    ///      if [[ "${ROLE}" == 'Master' ]]; then
    ///        ... master specific actions ...
    ///      else
    ///        ... worker specific actions ...
    ///      fi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.NodeInitializationAction> InitializationActions {
      get { return initializationActions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigBucket != other.ConfigBucket) return false;
      if (!object.Equals(GceClusterConfig, other.GceClusterConfig)) return false;
      if (!object.Equals(MasterConfig, other.MasterConfig)) return false;
      if (!object.Equals(WorkerConfig, other.WorkerConfig)) return false;
      if (!object.Equals(SecondaryWorkerConfig, other.SecondaryWorkerConfig)) return false;
      if (!object.Equals(SoftwareConfig, other.SoftwareConfig)) return false;
      if(!initializationActions_.Equals(other.initializationActions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigBucket.Length != 0) hash ^= ConfigBucket.GetHashCode();
      if (gceClusterConfig_ != null) hash ^= GceClusterConfig.GetHashCode();
      if (masterConfig_ != null) hash ^= MasterConfig.GetHashCode();
      if (workerConfig_ != null) hash ^= WorkerConfig.GetHashCode();
      if (secondaryWorkerConfig_ != null) hash ^= SecondaryWorkerConfig.GetHashCode();
      if (softwareConfig_ != null) hash ^= SoftwareConfig.GetHashCode();
      hash ^= initializationActions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigBucket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConfigBucket);
      }
      if (gceClusterConfig_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(GceClusterConfig);
      }
      if (masterConfig_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MasterConfig);
      }
      if (workerConfig_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WorkerConfig);
      }
      initializationActions_.WriteTo(output, _repeated_initializationActions_codec);
      if (secondaryWorkerConfig_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SecondaryWorkerConfig);
      }
      if (softwareConfig_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SoftwareConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigBucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigBucket);
      }
      if (gceClusterConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GceClusterConfig);
      }
      if (masterConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MasterConfig);
      }
      if (workerConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorkerConfig);
      }
      if (secondaryWorkerConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondaryWorkerConfig);
      }
      if (softwareConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SoftwareConfig);
      }
      size += initializationActions_.CalculateSize(_repeated_initializationActions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterConfig other) {
      if (other == null) {
        return;
      }
      if (other.ConfigBucket.Length != 0) {
        ConfigBucket = other.ConfigBucket;
      }
      if (other.gceClusterConfig_ != null) {
        if (gceClusterConfig_ == null) {
          gceClusterConfig_ = new global::Google.Cloud.Dataproc.V1.GceClusterConfig();
        }
        GceClusterConfig.MergeFrom(other.GceClusterConfig);
      }
      if (other.masterConfig_ != null) {
        if (masterConfig_ == null) {
          masterConfig_ = new global::Google.Cloud.Dataproc.V1.InstanceGroupConfig();
        }
        MasterConfig.MergeFrom(other.MasterConfig);
      }
      if (other.workerConfig_ != null) {
        if (workerConfig_ == null) {
          workerConfig_ = new global::Google.Cloud.Dataproc.V1.InstanceGroupConfig();
        }
        WorkerConfig.MergeFrom(other.WorkerConfig);
      }
      if (other.secondaryWorkerConfig_ != null) {
        if (secondaryWorkerConfig_ == null) {
          secondaryWorkerConfig_ = new global::Google.Cloud.Dataproc.V1.InstanceGroupConfig();
        }
        SecondaryWorkerConfig.MergeFrom(other.SecondaryWorkerConfig);
      }
      if (other.softwareConfig_ != null) {
        if (softwareConfig_ == null) {
          softwareConfig_ = new global::Google.Cloud.Dataproc.V1.SoftwareConfig();
        }
        SoftwareConfig.MergeFrom(other.SoftwareConfig);
      }
      initializationActions_.Add(other.initializationActions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConfigBucket = input.ReadString();
            break;
          }
          case 66: {
            if (gceClusterConfig_ == null) {
              gceClusterConfig_ = new global::Google.Cloud.Dataproc.V1.GceClusterConfig();
            }
            input.ReadMessage(gceClusterConfig_);
            break;
          }
          case 74: {
            if (masterConfig_ == null) {
              masterConfig_ = new global::Google.Cloud.Dataproc.V1.InstanceGroupConfig();
            }
            input.ReadMessage(masterConfig_);
            break;
          }
          case 82: {
            if (workerConfig_ == null) {
              workerConfig_ = new global::Google.Cloud.Dataproc.V1.InstanceGroupConfig();
            }
            input.ReadMessage(workerConfig_);
            break;
          }
          case 90: {
            initializationActions_.AddEntriesFrom(input, _repeated_initializationActions_codec);
            break;
          }
          case 98: {
            if (secondaryWorkerConfig_ == null) {
              secondaryWorkerConfig_ = new global::Google.Cloud.Dataproc.V1.InstanceGroupConfig();
            }
            input.ReadMessage(secondaryWorkerConfig_);
            break;
          }
          case 106: {
            if (softwareConfig_ == null) {
              softwareConfig_ = new global::Google.Cloud.Dataproc.V1.SoftwareConfig();
            }
            input.ReadMessage(softwareConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Common config settings for resources of Google Compute Engine cluster
  ///  instances, applicable to all instances in the cluster.
  /// </summary>
  public sealed partial class GceClusterConfig : pb::IMessage<GceClusterConfig> {
    private static readonly pb::MessageParser<GceClusterConfig> _parser = new pb::MessageParser<GceClusterConfig>(() => new GceClusterConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GceClusterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GceClusterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GceClusterConfig(GceClusterConfig other) : this() {
      zoneUri_ = other.zoneUri_;
      networkUri_ = other.networkUri_;
      subnetworkUri_ = other.subnetworkUri_;
      internalIpOnly_ = other.internalIpOnly_;
      serviceAccountScopes_ = other.serviceAccountScopes_.Clone();
      tags_ = other.tags_.Clone();
      metadata_ = other.metadata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GceClusterConfig Clone() {
      return new GceClusterConfig(this);
    }

    /// <summary>Field number for the "zone_uri" field.</summary>
    public const int ZoneUriFieldNumber = 1;
    private string zoneUri_ = "";
    /// <summary>
    ///  [Required] The zone where the Google Compute Engine cluster will be located.
    ///  Example: `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneUri {
      get { return zoneUri_; }
      set {
        zoneUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_uri" field.</summary>
    public const int NetworkUriFieldNumber = 2;
    private string networkUri_ = "";
    /// <summary>
    ///  [Optional] The Google Compute Engine network to be used for machine
    ///  communications. Cannot be specified with subnetwork_uri. If neither
    ///  `network_uri` nor `subnetwork_uri` is specified, the "default" network of
    ///  the project is used, if it exists. Cannot be a "Custom Subnet Network" (see
    ///  [Using Subnetworks](/compute/docs/subnetworks) for more information).
    ///  Example: `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkUri {
      get { return networkUri_; }
      set {
        networkUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnetwork_uri" field.</summary>
    public const int SubnetworkUriFieldNumber = 6;
    private string subnetworkUri_ = "";
    /// <summary>
    ///  [Optional] The Google Compute Engine subnetwork to be used for machine
    ///  communications. Cannot be specified with network_uri.
    ///  Example: `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/sub0`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetworkUri {
      get { return subnetworkUri_; }
      set {
        subnetworkUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "internal_ip_only" field.</summary>
    public const int InternalIpOnlyFieldNumber = 7;
    private bool internalIpOnly_;
    /// <summary>
    ///  [Optional] If true, all instances in the cluster will only have internal IP
    ///  addresses. By default, clusters are not restricted to internal IP addresses,
    ///  and will have ephemeral external IP addresses assigned to each instance.
    ///  This `internal_ip_only` restriction can only be enabled for subnetwork
    ///  enabled networks, and all off-cluster dependencies must be configured to be
    ///  accessible without external IP addresses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InternalIpOnly {
      get { return internalIpOnly_; }
      set {
        internalIpOnly_ = value;
      }
    }

    /// <summary>Field number for the "service_account_scopes" field.</summary>
    public const int ServiceAccountScopesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_serviceAccountScopes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> serviceAccountScopes_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  [Optional] The URIs of service account scopes to be included in Google
    ///  Compute Engine instances. The following base set of scopes is always
    ///  included:
    ///
    ///  * https://www.googleapis.com/auth/cloud.useraccounts.readonly
    ///  * https://www.googleapis.com/auth/devstorage.read_write
    ///  * https://www.googleapis.com/auth/logging.write
    ///
    ///  If no scopes are specified, the following defaults are also provided:
    ///
    ///  * https://www.googleapis.com/auth/bigquery
    ///  * https://www.googleapis.com/auth/bigtable.admin.table
    ///  * https://www.googleapis.com/auth/bigtable.data
    ///  * https://www.googleapis.com/auth/devstorage.full_control
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServiceAccountScopes {
      get { return serviceAccountScopes_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The Google Compute Engine tags to add to all instances (see
    ///  [Labeling instances](/compute/docs/label-or-tag-resources#labeling_instances)).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  The Google Compute Engine metadata entries to add to all instances (see
    ///  [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GceClusterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GceClusterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneUri != other.ZoneUri) return false;
      if (NetworkUri != other.NetworkUri) return false;
      if (SubnetworkUri != other.SubnetworkUri) return false;
      if (InternalIpOnly != other.InternalIpOnly) return false;
      if(!serviceAccountScopes_.Equals(other.serviceAccountScopes_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneUri.Length != 0) hash ^= ZoneUri.GetHashCode();
      if (NetworkUri.Length != 0) hash ^= NetworkUri.GetHashCode();
      if (SubnetworkUri.Length != 0) hash ^= SubnetworkUri.GetHashCode();
      if (InternalIpOnly != false) hash ^= InternalIpOnly.GetHashCode();
      hash ^= serviceAccountScopes_.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZoneUri);
      }
      if (NetworkUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NetworkUri);
      }
      serviceAccountScopes_.WriteTo(output, _repeated_serviceAccountScopes_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      metadata_.WriteTo(output, _map_metadata_codec);
      if (SubnetworkUri.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SubnetworkUri);
      }
      if (InternalIpOnly != false) {
        output.WriteRawTag(56);
        output.WriteBool(InternalIpOnly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneUri);
      }
      if (NetworkUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkUri);
      }
      if (SubnetworkUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetworkUri);
      }
      if (InternalIpOnly != false) {
        size += 1 + 1;
      }
      size += serviceAccountScopes_.CalculateSize(_repeated_serviceAccountScopes_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += metadata_.CalculateSize(_map_metadata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GceClusterConfig other) {
      if (other == null) {
        return;
      }
      if (other.ZoneUri.Length != 0) {
        ZoneUri = other.ZoneUri;
      }
      if (other.NetworkUri.Length != 0) {
        NetworkUri = other.NetworkUri;
      }
      if (other.SubnetworkUri.Length != 0) {
        SubnetworkUri = other.SubnetworkUri;
      }
      if (other.InternalIpOnly != false) {
        InternalIpOnly = other.InternalIpOnly;
      }
      serviceAccountScopes_.Add(other.serviceAccountScopes_);
      tags_.Add(other.tags_);
      metadata_.Add(other.metadata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ZoneUri = input.ReadString();
            break;
          }
          case 18: {
            NetworkUri = input.ReadString();
            break;
          }
          case 26: {
            serviceAccountScopes_.AddEntriesFrom(input, _repeated_serviceAccountScopes_codec);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 42: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 50: {
            SubnetworkUri = input.ReadString();
            break;
          }
          case 56: {
            InternalIpOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  [Optional] The config settings for Google Compute Engine resources in
  ///  an instance group, such as a master or worker group.
  /// </summary>
  public sealed partial class InstanceGroupConfig : pb::IMessage<InstanceGroupConfig> {
    private static readonly pb::MessageParser<InstanceGroupConfig> _parser = new pb::MessageParser<InstanceGroupConfig>(() => new InstanceGroupConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceGroupConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceGroupConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceGroupConfig(InstanceGroupConfig other) : this() {
      numInstances_ = other.numInstances_;
      instanceNames_ = other.instanceNames_.Clone();
      imageUri_ = other.imageUri_;
      machineTypeUri_ = other.machineTypeUri_;
      DiskConfig = other.diskConfig_ != null ? other.DiskConfig.Clone() : null;
      isPreemptible_ = other.isPreemptible_;
      ManagedGroupConfig = other.managedGroupConfig_ != null ? other.ManagedGroupConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceGroupConfig Clone() {
      return new InstanceGroupConfig(this);
    }

    /// <summary>Field number for the "num_instances" field.</summary>
    public const int NumInstancesFieldNumber = 1;
    private int numInstances_;
    /// <summary>
    ///  [Required] The number of VM instances in the instance group.
    ///  For master instance groups, must be set to 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumInstances {
      get { return numInstances_; }
      set {
        numInstances_ = value;
      }
    }

    /// <summary>Field number for the "instance_names" field.</summary>
    public const int InstanceNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_instanceNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> instanceNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  [Optional] The list of instance names. Cloud Dataproc derives the names from
    ///  `cluster_name`, `num_instances`, and the instance group if not set by user
    ///  (recommended practice is to let Cloud Dataproc derive the name).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InstanceNames {
      get { return instanceNames_; }
    }

    /// <summary>Field number for the "image_uri" field.</summary>
    public const int ImageUriFieldNumber = 3;
    private string imageUri_ = "";
    /// <summary>
    ///  [Output-only] The Google Compute Engine image resource used for cluster
    ///  instances. Inferred from `SoftwareConfig.image_version`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUri {
      get { return imageUri_; }
      set {
        imageUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machine_type_uri" field.</summary>
    public const int MachineTypeUriFieldNumber = 4;
    private string machineTypeUri_ = "";
    /// <summary>
    ///  [Required] The Google Compute Engine machine type used for cluster instances.
    ///  Example: `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineTypeUri {
      get { return machineTypeUri_; }
      set {
        machineTypeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_config" field.</summary>
    public const int DiskConfigFieldNumber = 5;
    private global::Google.Cloud.Dataproc.V1.DiskConfig diskConfig_;
    /// <summary>
    ///  [Optional] Disk option config settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.DiskConfig DiskConfig {
      get { return diskConfig_; }
      set {
        diskConfig_ = value;
      }
    }

    /// <summary>Field number for the "is_preemptible" field.</summary>
    public const int IsPreemptibleFieldNumber = 6;
    private bool isPreemptible_;
    /// <summary>
    ///  [Optional] Specifies that this instance group contains preemptible instances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPreemptible {
      get { return isPreemptible_; }
      set {
        isPreemptible_ = value;
      }
    }

    /// <summary>Field number for the "managed_group_config" field.</summary>
    public const int ManagedGroupConfigFieldNumber = 7;
    private global::Google.Cloud.Dataproc.V1.ManagedGroupConfig managedGroupConfig_;
    /// <summary>
    ///  [Output-only] The config for Google Compute Engine Instance Group
    ///  Manager that manages this group.
    ///  This is only used for preemptible instance groups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.ManagedGroupConfig ManagedGroupConfig {
      get { return managedGroupConfig_; }
      set {
        managedGroupConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceGroupConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceGroupConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumInstances != other.NumInstances) return false;
      if(!instanceNames_.Equals(other.instanceNames_)) return false;
      if (ImageUri != other.ImageUri) return false;
      if (MachineTypeUri != other.MachineTypeUri) return false;
      if (!object.Equals(DiskConfig, other.DiskConfig)) return false;
      if (IsPreemptible != other.IsPreemptible) return false;
      if (!object.Equals(ManagedGroupConfig, other.ManagedGroupConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumInstances != 0) hash ^= NumInstances.GetHashCode();
      hash ^= instanceNames_.GetHashCode();
      if (ImageUri.Length != 0) hash ^= ImageUri.GetHashCode();
      if (MachineTypeUri.Length != 0) hash ^= MachineTypeUri.GetHashCode();
      if (diskConfig_ != null) hash ^= DiskConfig.GetHashCode();
      if (IsPreemptible != false) hash ^= IsPreemptible.GetHashCode();
      if (managedGroupConfig_ != null) hash ^= ManagedGroupConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumInstances != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumInstances);
      }
      instanceNames_.WriteTo(output, _repeated_instanceNames_codec);
      if (ImageUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageUri);
      }
      if (MachineTypeUri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MachineTypeUri);
      }
      if (diskConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DiskConfig);
      }
      if (IsPreemptible != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsPreemptible);
      }
      if (managedGroupConfig_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ManagedGroupConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumInstances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumInstances);
      }
      size += instanceNames_.CalculateSize(_repeated_instanceNames_codec);
      if (ImageUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUri);
      }
      if (MachineTypeUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineTypeUri);
      }
      if (diskConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiskConfig);
      }
      if (IsPreemptible != false) {
        size += 1 + 1;
      }
      if (managedGroupConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManagedGroupConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceGroupConfig other) {
      if (other == null) {
        return;
      }
      if (other.NumInstances != 0) {
        NumInstances = other.NumInstances;
      }
      instanceNames_.Add(other.instanceNames_);
      if (other.ImageUri.Length != 0) {
        ImageUri = other.ImageUri;
      }
      if (other.MachineTypeUri.Length != 0) {
        MachineTypeUri = other.MachineTypeUri;
      }
      if (other.diskConfig_ != null) {
        if (diskConfig_ == null) {
          diskConfig_ = new global::Google.Cloud.Dataproc.V1.DiskConfig();
        }
        DiskConfig.MergeFrom(other.DiskConfig);
      }
      if (other.IsPreemptible != false) {
        IsPreemptible = other.IsPreemptible;
      }
      if (other.managedGroupConfig_ != null) {
        if (managedGroupConfig_ == null) {
          managedGroupConfig_ = new global::Google.Cloud.Dataproc.V1.ManagedGroupConfig();
        }
        ManagedGroupConfig.MergeFrom(other.ManagedGroupConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumInstances = input.ReadInt32();
            break;
          }
          case 18: {
            instanceNames_.AddEntriesFrom(input, _repeated_instanceNames_codec);
            break;
          }
          case 26: {
            ImageUri = input.ReadString();
            break;
          }
          case 34: {
            MachineTypeUri = input.ReadString();
            break;
          }
          case 42: {
            if (diskConfig_ == null) {
              diskConfig_ = new global::Google.Cloud.Dataproc.V1.DiskConfig();
            }
            input.ReadMessage(diskConfig_);
            break;
          }
          case 48: {
            IsPreemptible = input.ReadBool();
            break;
          }
          case 58: {
            if (managedGroupConfig_ == null) {
              managedGroupConfig_ = new global::Google.Cloud.Dataproc.V1.ManagedGroupConfig();
            }
            input.ReadMessage(managedGroupConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Specifies the resources used to actively manage an instance group.
  /// </summary>
  public sealed partial class ManagedGroupConfig : pb::IMessage<ManagedGroupConfig> {
    private static readonly pb::MessageParser<ManagedGroupConfig> _parser = new pb::MessageParser<ManagedGroupConfig>(() => new ManagedGroupConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagedGroupConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedGroupConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedGroupConfig(ManagedGroupConfig other) : this() {
      instanceTemplateName_ = other.instanceTemplateName_;
      instanceGroupManagerName_ = other.instanceGroupManagerName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedGroupConfig Clone() {
      return new ManagedGroupConfig(this);
    }

    /// <summary>Field number for the "instance_template_name" field.</summary>
    public const int InstanceTemplateNameFieldNumber = 1;
    private string instanceTemplateName_ = "";
    /// <summary>
    ///  [Output-only] The name of the Instance Template used for the Managed
    ///  Instance Group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceTemplateName {
      get { return instanceTemplateName_; }
      set {
        instanceTemplateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance_group_manager_name" field.</summary>
    public const int InstanceGroupManagerNameFieldNumber = 2;
    private string instanceGroupManagerName_ = "";
    /// <summary>
    ///  [Output-only] The name of the Instance Group Manager for this group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceGroupManagerName {
      get { return instanceGroupManagerName_; }
      set {
        instanceGroupManagerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagedGroupConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagedGroupConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceTemplateName != other.InstanceTemplateName) return false;
      if (InstanceGroupManagerName != other.InstanceGroupManagerName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceTemplateName.Length != 0) hash ^= InstanceTemplateName.GetHashCode();
      if (InstanceGroupManagerName.Length != 0) hash ^= InstanceGroupManagerName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceTemplateName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceTemplateName);
      }
      if (InstanceGroupManagerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstanceGroupManagerName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceTemplateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceTemplateName);
      }
      if (InstanceGroupManagerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceGroupManagerName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagedGroupConfig other) {
      if (other == null) {
        return;
      }
      if (other.InstanceTemplateName.Length != 0) {
        InstanceTemplateName = other.InstanceTemplateName;
      }
      if (other.InstanceGroupManagerName.Length != 0) {
        InstanceGroupManagerName = other.InstanceGroupManagerName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InstanceTemplateName = input.ReadString();
            break;
          }
          case 18: {
            InstanceGroupManagerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Specifies the config of disk options for a group of VM instances.
  /// </summary>
  public sealed partial class DiskConfig : pb::IMessage<DiskConfig> {
    private static readonly pb::MessageParser<DiskConfig> _parser = new pb::MessageParser<DiskConfig>(() => new DiskConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiskConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskConfig(DiskConfig other) : this() {
      bootDiskSizeGb_ = other.bootDiskSizeGb_;
      numLocalSsds_ = other.numLocalSsds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskConfig Clone() {
      return new DiskConfig(this);
    }

    /// <summary>Field number for the "boot_disk_size_gb" field.</summary>
    public const int BootDiskSizeGbFieldNumber = 1;
    private int bootDiskSizeGb_;
    /// <summary>
    ///  [Optional] Size in GB of the boot disk (default is 500GB).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BootDiskSizeGb {
      get { return bootDiskSizeGb_; }
      set {
        bootDiskSizeGb_ = value;
      }
    }

    /// <summary>Field number for the "num_local_ssds" field.</summary>
    public const int NumLocalSsdsFieldNumber = 2;
    private int numLocalSsds_;
    /// <summary>
    ///  [Optional] Number of attached SSDs, from 0 to 4 (default is 0).
    ///  If SSDs are not attached, the boot disk is used to store runtime logs and
    ///  [HDFS](https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data.
    ///  If one or more SSDs are attached, this runtime bulk
    ///  data is spread across them, and the boot disk contains only basic
    ///  config and installed binaries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumLocalSsds {
      get { return numLocalSsds_; }
      set {
        numLocalSsds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiskConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiskConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BootDiskSizeGb != other.BootDiskSizeGb) return false;
      if (NumLocalSsds != other.NumLocalSsds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BootDiskSizeGb != 0) hash ^= BootDiskSizeGb.GetHashCode();
      if (NumLocalSsds != 0) hash ^= NumLocalSsds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BootDiskSizeGb != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BootDiskSizeGb);
      }
      if (NumLocalSsds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumLocalSsds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BootDiskSizeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BootDiskSizeGb);
      }
      if (NumLocalSsds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLocalSsds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiskConfig other) {
      if (other == null) {
        return;
      }
      if (other.BootDiskSizeGb != 0) {
        BootDiskSizeGb = other.BootDiskSizeGb;
      }
      if (other.NumLocalSsds != 0) {
        NumLocalSsds = other.NumLocalSsds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BootDiskSizeGb = input.ReadInt32();
            break;
          }
          case 16: {
            NumLocalSsds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Specifies an executable to run on a fully configured node and a
  ///  timeout period for executable completion.
  /// </summary>
  public sealed partial class NodeInitializationAction : pb::IMessage<NodeInitializationAction> {
    private static readonly pb::MessageParser<NodeInitializationAction> _parser = new pb::MessageParser<NodeInitializationAction>(() => new NodeInitializationAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInitializationAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInitializationAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInitializationAction(NodeInitializationAction other) : this() {
      executableFile_ = other.executableFile_;
      ExecutionTimeout = other.executionTimeout_ != null ? other.ExecutionTimeout.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInitializationAction Clone() {
      return new NodeInitializationAction(this);
    }

    /// <summary>Field number for the "executable_file" field.</summary>
    public const int ExecutableFileFieldNumber = 1;
    private string executableFile_ = "";
    /// <summary>
    ///  [Required] Google Cloud Storage URI of executable file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecutableFile {
      get { return executableFile_; }
      set {
        executableFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "execution_timeout" field.</summary>
    public const int ExecutionTimeoutFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration executionTimeout_;
    /// <summary>
    ///  [Optional] Amount of time executable has to complete. Default is
    ///  10 minutes. Cluster creation fails with an explanatory error message (the
    ///  name of the executable that caused the error and the exceeded timeout
    ///  period) if the executable is not completed at end of the timeout period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration ExecutionTimeout {
      get { return executionTimeout_; }
      set {
        executionTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInitializationAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInitializationAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecutableFile != other.ExecutableFile) return false;
      if (!object.Equals(ExecutionTimeout, other.ExecutionTimeout)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExecutableFile.Length != 0) hash ^= ExecutableFile.GetHashCode();
      if (executionTimeout_ != null) hash ^= ExecutionTimeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExecutableFile.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExecutableFile);
      }
      if (executionTimeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExecutionTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExecutableFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutableFile);
      }
      if (executionTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecutionTimeout);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInitializationAction other) {
      if (other == null) {
        return;
      }
      if (other.ExecutableFile.Length != 0) {
        ExecutableFile = other.ExecutableFile;
      }
      if (other.executionTimeout_ != null) {
        if (executionTimeout_ == null) {
          executionTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        ExecutionTimeout.MergeFrom(other.ExecutionTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ExecutableFile = input.ReadString();
            break;
          }
          case 18: {
            if (executionTimeout_ == null) {
              executionTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(executionTimeout_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The status of a cluster and its instances.
  /// </summary>
  public sealed partial class ClusterStatus : pb::IMessage<ClusterStatus> {
    private static readonly pb::MessageParser<ClusterStatus> _parser = new pb::MessageParser<ClusterStatus>(() => new ClusterStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus(ClusterStatus other) : this() {
      state_ = other.state_;
      detail_ = other.detail_;
      StateStartTime = other.stateStartTime_ != null ? other.StateStartTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterStatus Clone() {
      return new ClusterStatus(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Google.Cloud.Dataproc.V1.ClusterStatus.Types.State state_ = 0;
    /// <summary>
    ///  [Output-only] The cluster's state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.ClusterStatus.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    /// <summary>
    ///  [Output-only] Optional details of cluster's state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_start_time" field.</summary>
    public const int StateStartTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stateStartTime_;
    /// <summary>
    ///  [Output-only] Time when this state was entered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StateStartTime {
      get { return stateStartTime_; }
      set {
        stateStartTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Detail != other.Detail) return false;
      if (!object.Equals(StateStartTime, other.StateStartTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      if (stateStartTime_ != null) hash ^= StateStartTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
      if (stateStartTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StateStartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      if (stateStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateStartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterStatus other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
      if (other.stateStartTime_ != null) {
        if (stateStartTime_ == null) {
          stateStartTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StateStartTime.MergeFrom(other.StateStartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Google.Cloud.Dataproc.V1.ClusterStatus.Types.State) input.ReadEnum();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
          case 26: {
            if (stateStartTime_ == null) {
              stateStartTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(stateStartTime_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClusterStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The cluster state.
      /// </summary>
      public enum State {
        /// <summary>
        ///  The cluster state is unknown.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  The cluster is being created and set up. It is not ready for use.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        ///  The cluster is currently running and healthy. It is ready for use.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        ///  The cluster encountered an error. It is not ready for use.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 3,
        /// <summary>
        ///  The cluster is being deleted. It cannot be used.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 4,
        /// <summary>
        ///  The cluster is being updated. It continues to accept and process jobs.
        /// </summary>
        [pbr::OriginalName("UPDATING")] Updating = 5,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Specifies the selection and config of software inside the cluster.
  /// </summary>
  public sealed partial class SoftwareConfig : pb::IMessage<SoftwareConfig> {
    private static readonly pb::MessageParser<SoftwareConfig> _parser = new pb::MessageParser<SoftwareConfig>(() => new SoftwareConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoftwareConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareConfig(SoftwareConfig other) : this() {
      imageVersion_ = other.imageVersion_;
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareConfig Clone() {
      return new SoftwareConfig(this);
    }

    /// <summary>Field number for the "image_version" field.</summary>
    public const int ImageVersionFieldNumber = 1;
    private string imageVersion_ = "";
    /// <summary>
    ///  [Optional] The version of software inside the cluster. It must match the
    ///  regular expression `[0-9]+\.[0-9]+`. If unspecified, it defaults to the
    ///  latest version (see [Cloud Dataproc Versioning](/dataproc/versioning)).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageVersion {
      get { return imageVersion_; }
      set {
        imageVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  [Optional] The properties to set on daemon config files.
    ///
    ///  Property keys are specified in `prefix:property` format, such as
    ///  `core:fs.defaultFS`. The following are supported prefixes
    ///  and their mappings:
    ///
    ///  * core:   `core-site.xml`
    ///  * hdfs:   `hdfs-site.xml`
    ///  * mapred: `mapred-site.xml`
    ///  * yarn:   `yarn-site.xml`
    ///  * hive:   `hive-site.xml`
    ///  * pig:    `pig.properties`
    ///  * spark:  `spark-defaults.conf`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoftwareConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoftwareConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageVersion != other.ImageVersion) return false;
      if (!Properties.Equals(other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageVersion.Length != 0) hash ^= ImageVersion.GetHashCode();
      hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageVersion);
      }
      properties_.WriteTo(output, _map_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageVersion);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoftwareConfig other) {
      if (other == null) {
        return;
      }
      if (other.ImageVersion.Length != 0) {
        ImageVersion = other.ImageVersion;
      }
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ImageVersion = input.ReadString();
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A request to create a cluster.
  /// </summary>
  public sealed partial class CreateClusterRequest : pb::IMessage<CreateClusterRequest> {
    private static readonly pb::MessageParser<CreateClusterRequest> _parser = new pb::MessageParser<CreateClusterRequest>(() => new CreateClusterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest(CreateClusterRequest other) : this() {
      projectId_ = other.projectId_;
      region_ = other.region_;
      Cluster = other.cluster_ != null ? other.Cluster.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest Clone() {
      return new CreateClusterRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The ID of the Google Cloud Platform project that the cluster
    ///  belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    /// <summary>
    ///  [Required] The Cloud Dataproc region in which to handle the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 2;
    private global::Google.Cloud.Dataproc.V1.Cluster cluster_;
    /// <summary>
    ///  [Required] The cluster to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.Cluster Cluster {
      get { return cluster_; }
      set {
        cluster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Region != other.Region) return false;
      if (!object.Equals(Cluster, other.Cluster)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (cluster_ != null) hash ^= Cluster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (cluster_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cluster);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (cluster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cluster);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.cluster_ != null) {
        if (cluster_ == null) {
          cluster_ = new global::Google.Cloud.Dataproc.V1.Cluster();
        }
        Cluster.MergeFrom(other.Cluster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            if (cluster_ == null) {
              cluster_ = new global::Google.Cloud.Dataproc.V1.Cluster();
            }
            input.ReadMessage(cluster_);
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A request to update a cluster.
  /// </summary>
  public sealed partial class UpdateClusterRequest : pb::IMessage<UpdateClusterRequest> {
    private static readonly pb::MessageParser<UpdateClusterRequest> _parser = new pb::MessageParser<UpdateClusterRequest>(() => new UpdateClusterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest(UpdateClusterRequest other) : this() {
      projectId_ = other.projectId_;
      region_ = other.region_;
      clusterName_ = other.clusterName_;
      Cluster = other.cluster_ != null ? other.Cluster.Clone() : null;
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest Clone() {
      return new UpdateClusterRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The ID of the Google Cloud Platform project the
    ///  cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 5;
    private string region_ = "";
    /// <summary>
    ///  [Required] The Cloud Dataproc region in which to handle the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 2;
    private string clusterName_ = "";
    /// <summary>
    ///  [Required] The cluster name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 3;
    private global::Google.Cloud.Dataproc.V1.Cluster cluster_;
    /// <summary>
    ///  [Required] The changes to the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Dataproc.V1.Cluster Cluster {
      get { return cluster_; }
      set {
        cluster_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    ///  [Required] Specifies the path, relative to &lt;code>Cluster&lt;/code>, of
    ///  the field to update. For example, to change the number of workers
    ///  in a cluster to 5, the &lt;code>update_mask&lt;/code> parameter would be
    ///  specified as &lt;code>config.worker_config.num_instances&lt;/code>,
    ///  and the `PATCH` request body would specify the new value, as follows:
    ///
    ///      {
    ///        "config":{
    ///          "workerConfig":{
    ///            "numInstances":"5"
    ///          }
    ///        }
    ///      }
    ///  Similarly, to change the number of preemptible workers in a cluster to 5, the
    ///  &lt;code>update_mask&lt;/code> parameter would be &lt;code>config.secondary_worker_config.num_instances&lt;/code>,
    ///  and the `PATCH` request body would be set as follows:
    ///
    ///      {
    ///        "config":{
    ///          "secondaryWorkerConfig":{
    ///            "numInstances":"5"
    ///          }
    ///        }
    ///      }
    ///  &lt;strong>Note:&lt;/strong> Currently, &lt;code>config.worker_config.num_instances&lt;/code>
    ///  and &lt;code>config.secondary_worker_config.num_instances&lt;/code> are the only
    ///  fields that can be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Region != other.Region) return false;
      if (ClusterName != other.ClusterName) return false;
      if (!object.Equals(Cluster, other.Cluster)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      if (cluster_ != null) hash ^= Cluster.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterName);
      }
      if (cluster_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cluster);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateMask);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      if (cluster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cluster);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
      if (other.cluster_ != null) {
        if (cluster_ == null) {
          cluster_ = new global::Google.Cloud.Dataproc.V1.Cluster();
        }
        Cluster.MergeFrom(other.Cluster);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ClusterName = input.ReadString();
            break;
          }
          case 26: {
            if (cluster_ == null) {
              cluster_ = new global::Google.Cloud.Dataproc.V1.Cluster();
            }
            input.ReadMessage(cluster_);
            break;
          }
          case 34: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
          case 42: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A request to delete a cluster.
  /// </summary>
  public sealed partial class DeleteClusterRequest : pb::IMessage<DeleteClusterRequest> {
    private static readonly pb::MessageParser<DeleteClusterRequest> _parser = new pb::MessageParser<DeleteClusterRequest>(() => new DeleteClusterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest(DeleteClusterRequest other) : this() {
      projectId_ = other.projectId_;
      region_ = other.region_;
      clusterName_ = other.clusterName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest Clone() {
      return new DeleteClusterRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The ID of the Google Cloud Platform project that the cluster
    ///  belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    /// <summary>
    ///  [Required] The Cloud Dataproc region in which to handle the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 2;
    private string clusterName_ = "";
    /// <summary>
    ///  [Required] The cluster name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Region != other.Region) return false;
      if (ClusterName != other.ClusterName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterName);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ClusterName = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request to get the resource representation for a cluster in a project.
  /// </summary>
  public sealed partial class GetClusterRequest : pb::IMessage<GetClusterRequest> {
    private static readonly pb::MessageParser<GetClusterRequest> _parser = new pb::MessageParser<GetClusterRequest>(() => new GetClusterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest(GetClusterRequest other) : this() {
      projectId_ = other.projectId_;
      region_ = other.region_;
      clusterName_ = other.clusterName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest Clone() {
      return new GetClusterRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The ID of the Google Cloud Platform project that the cluster
    ///  belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    /// <summary>
    ///  [Required] The Cloud Dataproc region in which to handle the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 2;
    private string clusterName_ = "";
    /// <summary>
    ///  [Required] The cluster name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Region != other.Region) return false;
      if (ClusterName != other.ClusterName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterName);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ClusterName = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A request to list the clusters in a project.
  /// </summary>
  public sealed partial class ListClustersRequest : pb::IMessage<ListClustersRequest> {
    private static readonly pb::MessageParser<ListClustersRequest> _parser = new pb::MessageParser<ListClustersRequest>(() => new ListClustersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClustersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest(ListClustersRequest other) : this() {
      projectId_ = other.projectId_;
      region_ = other.region_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest Clone() {
      return new ListClustersRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The ID of the Google Cloud Platform project that the cluster
    ///  belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 4;
    private string region_ = "";
    /// <summary>
    ///  [Required] The Cloud Dataproc region in which to handle the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    /// <summary>
    ///  [Optional] The standard List page size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    ///  [Optional] The standard List page token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClustersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClustersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Region != other.Region) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClustersRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The list of all clusters in a project.
  /// </summary>
  public sealed partial class ListClustersResponse : pb::IMessage<ListClustersResponse> {
    private static readonly pb::MessageParser<ListClustersResponse> _parser = new pb::MessageParser<ListClustersResponse>(() => new ListClustersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClustersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse(ListClustersResponse other) : this() {
      clusters_ = other.clusters_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse Clone() {
      return new ListClustersResponse(this);
    }

    /// <summary>Field number for the "clusters" field.</summary>
    public const int ClustersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Dataproc.V1.Cluster> _repeated_clusters_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Dataproc.V1.Cluster.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.Cluster> clusters_ = new pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.Cluster>();
    /// <summary>
    ///  [Output-only] The clusters in the project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Dataproc.V1.Cluster> Clusters {
      get { return clusters_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  [Output-only] This token is included in the response if there are more
    ///  results to fetch. To fetch additional results, provide this value as the
    ///  `page_token` in a subsequent &lt;code>ListClustersRequest&lt;/code>.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClustersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClustersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clusters_.Equals(other.clusters_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clusters_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clusters_.WriteTo(output, _repeated_clusters_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clusters_.CalculateSize(_repeated_clusters_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClustersResponse other) {
      if (other == null) {
        return;
      }
      clusters_.Add(other.clusters_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A request to collect cluster diagnostic information.
  /// </summary>
  public sealed partial class DiagnoseClusterRequest : pb::IMessage<DiagnoseClusterRequest> {
    private static readonly pb::MessageParser<DiagnoseClusterRequest> _parser = new pb::MessageParser<DiagnoseClusterRequest>(() => new DiagnoseClusterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiagnoseClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnoseClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnoseClusterRequest(DiagnoseClusterRequest other) : this() {
      projectId_ = other.projectId_;
      region_ = other.region_;
      clusterName_ = other.clusterName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnoseClusterRequest Clone() {
      return new DiagnoseClusterRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    ///  [Required] The ID of the Google Cloud Platform project that the cluster
    ///  belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    /// <summary>
    ///  [Required] The Cloud Dataproc region in which to handle the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 2;
    private string clusterName_ = "";
    /// <summary>
    ///  [Required] The cluster name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiagnoseClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiagnoseClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Region != other.Region) return false;
      if (ClusterName != other.ClusterName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterName);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiagnoseClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            ClusterName = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The location of diagnostic output.
  /// </summary>
  public sealed partial class DiagnoseClusterResults : pb::IMessage<DiagnoseClusterResults> {
    private static readonly pb::MessageParser<DiagnoseClusterResults> _parser = new pb::MessageParser<DiagnoseClusterResults>(() => new DiagnoseClusterResults());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiagnoseClusterResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Dataproc.V1.ClustersReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnoseClusterResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnoseClusterResults(DiagnoseClusterResults other) : this() {
      outputUri_ = other.outputUri_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnoseClusterResults Clone() {
      return new DiagnoseClusterResults(this);
    }

    /// <summary>Field number for the "output_uri" field.</summary>
    public const int OutputUriFieldNumber = 1;
    private string outputUri_ = "";
    /// <summary>
    ///  [Output-only] The Google Cloud Storage URI of the diagnostic output.
    ///  The output report is a plain text file with a summary of collected
    ///  diagnostics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputUri {
      get { return outputUri_; }
      set {
        outputUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiagnoseClusterResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiagnoseClusterResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputUri != other.OutputUri) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputUri.Length != 0) hash ^= OutputUri.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OutputUri);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputUri);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiagnoseClusterResults other) {
      if (other == null) {
        return;
      }
      if (other.OutputUri.Length != 0) {
        OutputUri = other.OutputUri;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OutputUri = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
