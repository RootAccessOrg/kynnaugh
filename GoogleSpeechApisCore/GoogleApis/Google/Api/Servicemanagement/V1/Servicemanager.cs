// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicemanagement/v1/servicemanager.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api.Servicemanagement.V1 {

  /// <summary>Holder for reflection information generated from google/api/servicemanagement/v1/servicemanager.proto</summary>
  public static partial class ServicemanagerReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/servicemanagement/v1/servicemanager.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServicemanagerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRnb29nbGUvYXBpL3NlcnZpY2VtYW5hZ2VtZW50L3YxL3NlcnZpY2VtYW5h",
            "Z2VyLnByb3RvEh9nb29nbGUuYXBpLnNlcnZpY2VtYW5hZ2VtZW50LnYxGhxn",
            "b29nbGUvYXBpL2Fubm90YXRpb25zLnByb3RvGhhnb29nbGUvYXBpL3NlcnZp",
            "Y2UucHJvdG8aL2dvb2dsZS9hcGkvc2VydmljZW1hbmFnZW1lbnQvdjEvcmVz",
            "b3VyY2VzLnByb3RvGiNnb29nbGUvbG9uZ3J1bm5pbmcvb3BlcmF0aW9ucy5w",
            "cm90bxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxobZ29vZ2xlL3Byb3Rv",
            "YnVmL2VtcHR5LnByb3RvGiBnb29nbGUvcHJvdG9idWYvZmllbGRfbWFzay5w",
            "cm90bxocZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90bxoXZ29vZ2xlL3Jw",
            "Yy9zdGF0dXMucHJvdG8iWQoTTGlzdFNlcnZpY2VzUmVxdWVzdBIbChNwcm9k",
            "dWNlcl9wcm9qZWN0X2lkGAEgASgJEhEKCXBhZ2Vfc2l6ZRgFIAEoBRISCgpw",
            "YWdlX3Rva2VuGAYgASgJInIKFExpc3RTZXJ2aWNlc1Jlc3BvbnNlEkEKCHNl",
            "cnZpY2VzGAEgAygLMi8uZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52",
            "MS5NYW5hZ2VkU2VydmljZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiKQoR",
            "R2V0U2VydmljZVJlcXVlc3QSFAoMc2VydmljZV9uYW1lGAEgASgJIlgKFENy",
            "ZWF0ZVNlcnZpY2VSZXF1ZXN0EkAKB3NlcnZpY2UYASABKAsyLy5nb29nbGUu",
            "YXBpLnNlcnZpY2VtYW5hZ2VtZW50LnYxLk1hbmFnZWRTZXJ2aWNlIiwKFERl",
            "bGV0ZVNlcnZpY2VSZXF1ZXN0EhQKDHNlcnZpY2VfbmFtZRgBIAEoCSIuChZV",
            "bmRlbGV0ZVNlcnZpY2VSZXF1ZXN0EhQKDHNlcnZpY2VfbmFtZRgBIAEoCSJb",
            "ChdVbmRlbGV0ZVNlcnZpY2VSZXNwb25zZRJACgdzZXJ2aWNlGAEgASgLMi8u",
            "Z29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52MS5NYW5hZ2VkU2Vydmlj",
            "ZSJCChdHZXRTZXJ2aWNlQ29uZmlnUmVxdWVzdBIUCgxzZXJ2aWNlX25hbWUY",
            "ASABKAkSEQoJY29uZmlnX2lkGAIgASgJIlgKGUxpc3RTZXJ2aWNlQ29uZmln",
            "c1JlcXVlc3QSFAoMc2VydmljZV9uYW1lGAEgASgJEhIKCnBhZ2VfdG9rZW4Y",
            "AiABKAkSEQoJcGFnZV9zaXplGAMgASgFImMKGkxpc3RTZXJ2aWNlQ29uZmln",
            "c1Jlc3BvbnNlEiwKD3NlcnZpY2VfY29uZmlncxgBIAMoCzITLmdvb2dsZS5h",
            "cGkuU2VydmljZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiXwoaQ3JlYXRl",
            "U2VydmljZUNvbmZpZ1JlcXVlc3QSFAoMc2VydmljZV9uYW1lGAEgASgJEisK",
            "DnNlcnZpY2VfY29uZmlnGAIgASgLMhMuZ29vZ2xlLmFwaS5TZXJ2aWNlIo4B",
            "ChlTdWJtaXRDb25maWdTb3VyY2VSZXF1ZXN0EhQKDHNlcnZpY2VfbmFtZRgB",
            "IAEoCRJECg1jb25maWdfc291cmNlGAIgASgLMi0uZ29vZ2xlLmFwaS5zZXJ2",
            "aWNlbWFuYWdlbWVudC52MS5Db25maWdTb3VyY2USFQoNdmFsaWRhdGVfb25s",
            "eRgDIAEoCCJJChpTdWJtaXRDb25maWdTb3VyY2VSZXNwb25zZRIrCg5zZXJ2",
            "aWNlX2NvbmZpZxgBIAEoCzITLmdvb2dsZS5hcGkuU2VydmljZSJuChtDcmVh",
            "dGVTZXJ2aWNlUm9sbG91dFJlcXVlc3QSFAoMc2VydmljZV9uYW1lGAEgASgJ",
            "EjkKB3JvbGxvdXQYAiABKAsyKC5nb29nbGUuYXBpLnNlcnZpY2VtYW5hZ2Vt",
            "ZW50LnYxLlJvbGxvdXQiWQoaTGlzdFNlcnZpY2VSb2xsb3V0c1JlcXVlc3QS",
            "FAoMc2VydmljZV9uYW1lGAEgASgJEhIKCnBhZ2VfdG9rZW4YAiABKAkSEQoJ",
            "cGFnZV9zaXplGAMgASgFInIKG0xpc3RTZXJ2aWNlUm9sbG91dHNSZXNwb25z",
            "ZRI6Cghyb2xsb3V0cxgBIAMoCzIoLmdvb2dsZS5hcGkuc2VydmljZW1hbmFn",
            "ZW1lbnQudjEuUm9sbG91dBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiRAoY",
            "R2V0U2VydmljZVJvbGxvdXRSZXF1ZXN0EhQKDHNlcnZpY2VfbmFtZRgBIAEo",
            "CRISCgpyb2xsb3V0X2lkGAIgASgJIkEKFEVuYWJsZVNlcnZpY2VSZXF1ZXN0",
            "EhQKDHNlcnZpY2VfbmFtZRgBIAEoCRITCgtjb25zdW1lcl9pZBgCIAEoCSJC",
            "ChVEaXNhYmxlU2VydmljZVJlcXVlc3QSFAoMc2VydmljZV9uYW1lGAEgASgJ",
            "EhMKC2NvbnN1bWVyX2lkGAIgASgJInEKG0dlbmVyYXRlQ29uZmlnUmVwb3J0",
            "UmVxdWVzdBIoCgpuZXdfY29uZmlnGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVm",
            "LkFueRIoCgpvbGRfY29uZmlnGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFu",
            "eSLJAQocR2VuZXJhdGVDb25maWdSZXBvcnRSZXNwb25zZRIUCgxzZXJ2aWNl",
            "X25hbWUYASABKAkSCgoCaWQYAiABKAkSRQoOY2hhbmdlX3JlcG9ydHMYAyAD",
            "KAsyLS5nb29nbGUuYXBpLnNlcnZpY2VtYW5hZ2VtZW50LnYxLkNoYW5nZVJl",
            "cG9ydBJACgtkaWFnbm9zdGljcxgEIAMoCzIrLmdvb2dsZS5hcGkuc2Vydmlj",
            "ZW1hbmFnZW1lbnQudjEuRGlhZ25vc3RpYzKuEwoOU2VydmljZU1hbmFnZXIS",
            "kQEKDExpc3RTZXJ2aWNlcxI0Lmdvb2dsZS5hcGkuc2VydmljZW1hbmFnZW1l",
            "bnQudjEuTGlzdFNlcnZpY2VzUmVxdWVzdBo1Lmdvb2dsZS5hcGkuc2Vydmlj",
            "ZW1hbmFnZW1lbnQudjEuTGlzdFNlcnZpY2VzUmVzcG9uc2UiFILT5JMCDhIM",
            "L3YxL3NlcnZpY2VzEpYBCgpHZXRTZXJ2aWNlEjIuZ29vZ2xlLmFwaS5zZXJ2",
            "aWNlbWFuYWdlbWVudC52MS5HZXRTZXJ2aWNlUmVxdWVzdBovLmdvb2dsZS5h",
            "cGkuc2VydmljZW1hbmFnZW1lbnQudjEuTWFuYWdlZFNlcnZpY2UiI4LT5JMC",
            "HRIbL3YxL3NlcnZpY2VzL3tzZXJ2aWNlX25hbWV9EoQBCg1DcmVhdGVTZXJ2",
            "aWNlEjUuZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52MS5DcmVhdGVT",
            "ZXJ2aWNlUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24i",
            "HYLT5JMCFyIML3YxL3NlcnZpY2VzOgdzZXJ2aWNlEooBCg1EZWxldGVTZXJ2",
            "aWNlEjUuZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52MS5EZWxldGVT",
            "ZXJ2aWNlUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24i",
            "I4LT5JMCHSobL3YxL3NlcnZpY2VzL3tzZXJ2aWNlX25hbWV9EpcBCg9VbmRl",
            "bGV0ZVNlcnZpY2USNy5nb29nbGUuYXBpLnNlcnZpY2VtYW5hZ2VtZW50LnYx",
            "LlVuZGVsZXRlU2VydmljZVJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcu",
            "T3BlcmF0aW9uIiyC0+STAiYiJC92MS9zZXJ2aWNlcy97c2VydmljZV9uYW1l",
            "fTp1bmRlbGV0ZRK6AQoSTGlzdFNlcnZpY2VDb25maWdzEjouZ29vZ2xlLmFw",
            "aS5zZXJ2aWNlbWFuYWdlbWVudC52MS5MaXN0U2VydmljZUNvbmZpZ3NSZXF1",
            "ZXN0GjsuZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52MS5MaXN0U2Vy",
            "dmljZUNvbmZpZ3NSZXNwb25zZSIrgtPkkwIlEiMvdjEvc2VydmljZXMve3Nl",
            "cnZpY2VfbmFtZX0vY29uZmlncxKaAQoQR2V0U2VydmljZUNvbmZpZxI4Lmdv",
            "b2dsZS5hcGkuc2VydmljZW1hbmFnZW1lbnQudjEuR2V0U2VydmljZUNvbmZp",
            "Z1JlcXVlc3QaEy5nb29nbGUuYXBpLlNlcnZpY2UiN4LT5JMCMRIvL3YxL3Nl",
            "cnZpY2VzL3tzZXJ2aWNlX25hbWV9L2NvbmZpZ3Mve2NvbmZpZ19pZH0SpAEK",
            "E0NyZWF0ZVNlcnZpY2VDb25maWcSOy5nb29nbGUuYXBpLnNlcnZpY2VtYW5h",
            "Z2VtZW50LnYxLkNyZWF0ZVNlcnZpY2VDb25maWdSZXF1ZXN0GhMuZ29vZ2xl",
            "LmFwaS5TZXJ2aWNlIjuC0+STAjUiIy92MS9zZXJ2aWNlcy97c2VydmljZV9u",
            "YW1lfS9jb25maWdzOg5zZXJ2aWNlX2NvbmZpZxKmAQoSU3VibWl0Q29uZmln",
            "U291cmNlEjouZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52MS5TdWJt",
            "aXRDb25maWdTb3VyY2VSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9w",
            "ZXJhdGlvbiI1gtPkkwIvIiovdjEvc2VydmljZXMve3NlcnZpY2VfbmFtZX0v",
            "Y29uZmlnczpzdWJtaXQ6ASoSvgEKE0xpc3RTZXJ2aWNlUm9sbG91dHMSOy5n",
            "b29nbGUuYXBpLnNlcnZpY2VtYW5hZ2VtZW50LnYxLkxpc3RTZXJ2aWNlUm9s",
            "bG91dHNSZXF1ZXN0GjwuZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52",
            "MS5MaXN0U2VydmljZVJvbGxvdXRzUmVzcG9uc2UiLILT5JMCJhIkL3YxL3Nl",
            "cnZpY2VzL3tzZXJ2aWNlX25hbWV9L3JvbGxvdXRzErMBChFHZXRTZXJ2aWNl",
            "Um9sbG91dBI5Lmdvb2dsZS5hcGkuc2VydmljZW1hbmFnZW1lbnQudjEuR2V0",
            "U2VydmljZVJvbGxvdXRSZXF1ZXN0GiguZ29vZ2xlLmFwaS5zZXJ2aWNlbWFu",
            "YWdlbWVudC52MS5Sb2xsb3V0IjmC0+STAjMSMS92MS9zZXJ2aWNlcy97c2Vy",
            "dmljZV9uYW1lfS9yb2xsb3V0cy97cm9sbG91dF9pZH0SqgEKFENyZWF0ZVNl",
            "cnZpY2VSb2xsb3V0EjwuZ29vZ2xlLmFwaS5zZXJ2aWNlbWFuYWdlbWVudC52",
            "MS5DcmVhdGVTZXJ2aWNlUm9sbG91dFJlcXVlc3QaHS5nb29nbGUubG9uZ3J1",
            "bm5pbmcuT3BlcmF0aW9uIjWC0+STAi8iJC92MS9zZXJ2aWNlcy97c2Vydmlj",
            "ZV9uYW1lfS9yb2xsb3V0czoHcm9sbG91dBLBAQoUR2VuZXJhdGVDb25maWdS",
            "ZXBvcnQSPC5nb29nbGUuYXBpLnNlcnZpY2VtYW5hZ2VtZW50LnYxLkdlbmVy",
            "YXRlQ29uZmlnUmVwb3J0UmVxdWVzdBo9Lmdvb2dsZS5hcGkuc2VydmljZW1h",
            "bmFnZW1lbnQudjEuR2VuZXJhdGVDb25maWdSZXBvcnRSZXNwb25zZSIsgtPk",
            "kwImIiEvdjEvc2VydmljZXM6Z2VuZXJhdGVDb25maWdSZXBvcnQ6ASoSlAEK",
            "DUVuYWJsZVNlcnZpY2USNS5nb29nbGUuYXBpLnNlcnZpY2VtYW5hZ2VtZW50",
            "LnYxLkVuYWJsZVNlcnZpY2VSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5n",
            "Lk9wZXJhdGlvbiItgtPkkwInIiIvdjEvc2VydmljZXMve3NlcnZpY2VfbmFt",
            "ZX06ZW5hYmxlOgEqEpcBCg5EaXNhYmxlU2VydmljZRI2Lmdvb2dsZS5hcGku",
            "c2VydmljZW1hbmFnZW1lbnQudjEuRGlzYWJsZVNlcnZpY2VSZXF1ZXN0Gh0u",
            "Z29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiIugtPkkwIoIiMvdjEvc2Vy",
            "dmljZXMve3NlcnZpY2VfbmFtZX06ZGlzYWJsZToBKkKVAQojY29tLmdvb2ds",
            "ZS5hcGkuc2VydmljZW1hbmFnZW1lbnQudjFCE1NlcnZpY2VNYW5hZ2VyUHJv",
            "dG9QAVpQZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9h",
            "cGkvc2VydmljZW1hbmFnZW1lbnQvdjE7c2VydmljZW1hbmFnZW1lbnSiAgRH",
            "QVNNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ServiceReflection.Descriptor, global::Google.Api.Servicemanagement.V1.ResourcesReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.ListServicesRequest), global::Google.Api.Servicemanagement.V1.ListServicesRequest.Parser, new[]{ "ProducerProjectId", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.ListServicesResponse), global::Google.Api.Servicemanagement.V1.ListServicesResponse.Parser, new[]{ "Services", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.GetServiceRequest), global::Google.Api.Servicemanagement.V1.GetServiceRequest.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.CreateServiceRequest), global::Google.Api.Servicemanagement.V1.CreateServiceRequest.Parser, new[]{ "Service" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.DeleteServiceRequest), global::Google.Api.Servicemanagement.V1.DeleteServiceRequest.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.UndeleteServiceRequest), global::Google.Api.Servicemanagement.V1.UndeleteServiceRequest.Parser, new[]{ "ServiceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.UndeleteServiceResponse), global::Google.Api.Servicemanagement.V1.UndeleteServiceResponse.Parser, new[]{ "Service" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.GetServiceConfigRequest), global::Google.Api.Servicemanagement.V1.GetServiceConfigRequest.Parser, new[]{ "ServiceName", "ConfigId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.ListServiceConfigsRequest), global::Google.Api.Servicemanagement.V1.ListServiceConfigsRequest.Parser, new[]{ "ServiceName", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.ListServiceConfigsResponse), global::Google.Api.Servicemanagement.V1.ListServiceConfigsResponse.Parser, new[]{ "ServiceConfigs", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.CreateServiceConfigRequest), global::Google.Api.Servicemanagement.V1.CreateServiceConfigRequest.Parser, new[]{ "ServiceName", "ServiceConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.SubmitConfigSourceRequest), global::Google.Api.Servicemanagement.V1.SubmitConfigSourceRequest.Parser, new[]{ "ServiceName", "ConfigSource", "ValidateOnly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.SubmitConfigSourceResponse), global::Google.Api.Servicemanagement.V1.SubmitConfigSourceResponse.Parser, new[]{ "ServiceConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.CreateServiceRolloutRequest), global::Google.Api.Servicemanagement.V1.CreateServiceRolloutRequest.Parser, new[]{ "ServiceName", "Rollout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.ListServiceRolloutsRequest), global::Google.Api.Servicemanagement.V1.ListServiceRolloutsRequest.Parser, new[]{ "ServiceName", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.ListServiceRolloutsResponse), global::Google.Api.Servicemanagement.V1.ListServiceRolloutsResponse.Parser, new[]{ "Rollouts", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.GetServiceRolloutRequest), global::Google.Api.Servicemanagement.V1.GetServiceRolloutRequest.Parser, new[]{ "ServiceName", "RolloutId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.EnableServiceRequest), global::Google.Api.Servicemanagement.V1.EnableServiceRequest.Parser, new[]{ "ServiceName", "ConsumerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.DisableServiceRequest), global::Google.Api.Servicemanagement.V1.DisableServiceRequest.Parser, new[]{ "ServiceName", "ConsumerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.GenerateConfigReportRequest), global::Google.Api.Servicemanagement.V1.GenerateConfigReportRequest.Parser, new[]{ "NewConfig", "OldConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Servicemanagement.V1.GenerateConfigReportResponse), global::Google.Api.Servicemanagement.V1.GenerateConfigReportResponse.Parser, new[]{ "ServiceName", "Id", "ChangeReports", "Diagnostics" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request message for `ListServices` method.
  /// </summary>
  public sealed partial class ListServicesRequest : pb::IMessage<ListServicesRequest> {
    private static readonly pb::MessageParser<ListServicesRequest> _parser = new pb::MessageParser<ListServicesRequest>(() => new ListServicesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServicesRequest(ListServicesRequest other) : this() {
      producerProjectId_ = other.producerProjectId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServicesRequest Clone() {
      return new ListServicesRequest(this);
    }

    /// <summary>Field number for the "producer_project_id" field.</summary>
    public const int ProducerProjectIdFieldNumber = 1;
    private string producerProjectId_ = "";
    /// <summary>
    ///  Include services produced by the specified project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProducerProjectId {
      get { return producerProjectId_; }
      set {
        producerProjectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    ///  Requested size of the next page of data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 6;
    private string pageToken_ = "";
    /// <summary>
    ///  Token identifying which result to start with; returned by a previous list
    ///  call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProducerProjectId != other.ProducerProjectId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProducerProjectId.Length != 0) hash ^= ProducerProjectId.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProducerProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProducerProjectId);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProducerProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerProjectId);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServicesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProducerProjectId.Length != 0) {
        ProducerProjectId = other.ProducerProjectId;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProducerProjectId = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for `ListServices` method.
  /// </summary>
  public sealed partial class ListServicesResponse : pb::IMessage<ListServicesResponse> {
    private static readonly pb::MessageParser<ListServicesResponse> _parser = new pb::MessageParser<ListServicesResponse>(() => new ListServicesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServicesResponse(ListServicesResponse other) : this() {
      services_ = other.services_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServicesResponse Clone() {
      return new ListServicesResponse(this);
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Api.Servicemanagement.V1.ManagedService> _repeated_services_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Api.Servicemanagement.V1.ManagedService.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.ManagedService> services_ = new pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.ManagedService>();
    /// <summary>
    ///  The results of the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.ManagedService> Services {
      get { return services_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  Token that can be passed to `ListServices` to resume a paginated query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!services_.Equals(other.services_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= services_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      services_.WriteTo(output, _repeated_services_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += services_.CalculateSize(_repeated_services_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServicesResponse other) {
      if (other == null) {
        return;
      }
      services_.Add(other.services_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for `GetService` method.
  /// </summary>
  public sealed partial class GetServiceRequest : pb::IMessage<GetServiceRequest> {
    private static readonly pb::MessageParser<GetServiceRequest> _parser = new pb::MessageParser<GetServiceRequest>(() => new GetServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceRequest(GetServiceRequest other) : this() {
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceRequest Clone() {
      return new GetServiceRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the `ServiceManager` overview for naming
    ///  requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for CreateService method.
  /// </summary>
  public sealed partial class CreateServiceRequest : pb::IMessage<CreateServiceRequest> {
    private static readonly pb::MessageParser<CreateServiceRequest> _parser = new pb::MessageParser<CreateServiceRequest>(() => new CreateServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceRequest(CreateServiceRequest other) : this() {
      Service = other.service_ != null ? other.Service.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceRequest Clone() {
      return new CreateServiceRequest(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private global::Google.Api.Servicemanagement.V1.ManagedService service_;
    /// <summary>
    ///  Initial values for the service resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Servicemanagement.V1.ManagedService Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Service, other.Service)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (service_ != null) hash ^= Service.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (service_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Google.Api.Servicemanagement.V1.ManagedService();
        }
        Service.MergeFrom(other.Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (service_ == null) {
              service_ = new global::Google.Api.Servicemanagement.V1.ManagedService();
            }
            input.ReadMessage(service_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for DeleteService method.
  /// </summary>
  public sealed partial class DeleteServiceRequest : pb::IMessage<DeleteServiceRequest> {
    private static readonly pb::MessageParser<DeleteServiceRequest> _parser = new pb::MessageParser<DeleteServiceRequest>(() => new DeleteServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceRequest(DeleteServiceRequest other) : this() {
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceRequest Clone() {
      return new DeleteServiceRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for UndeleteService method.
  /// </summary>
  public sealed partial class UndeleteServiceRequest : pb::IMessage<UndeleteServiceRequest> {
    private static readonly pb::MessageParser<UndeleteServiceRequest> _parser = new pb::MessageParser<UndeleteServiceRequest>(() => new UndeleteServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UndeleteServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndeleteServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndeleteServiceRequest(UndeleteServiceRequest other) : this() {
      serviceName_ = other.serviceName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndeleteServiceRequest Clone() {
      return new UndeleteServiceRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service. See the [overview](/service-management/overview)
    ///  for naming requirements. For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UndeleteServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UndeleteServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UndeleteServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for UndeleteService method.
  /// </summary>
  public sealed partial class UndeleteServiceResponse : pb::IMessage<UndeleteServiceResponse> {
    private static readonly pb::MessageParser<UndeleteServiceResponse> _parser = new pb::MessageParser<UndeleteServiceResponse>(() => new UndeleteServiceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UndeleteServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndeleteServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndeleteServiceResponse(UndeleteServiceResponse other) : this() {
      Service = other.service_ != null ? other.Service.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndeleteServiceResponse Clone() {
      return new UndeleteServiceResponse(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private global::Google.Api.Servicemanagement.V1.ManagedService service_;
    /// <summary>
    ///  Revived service resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Servicemanagement.V1.ManagedService Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UndeleteServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UndeleteServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Service, other.Service)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (service_ != null) hash ^= Service.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (service_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UndeleteServiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.service_ != null) {
        if (service_ == null) {
          service_ = new global::Google.Api.Servicemanagement.V1.ManagedService();
        }
        Service.MergeFrom(other.Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (service_ == null) {
              service_ = new global::Google.Api.Servicemanagement.V1.ManagedService();
            }
            input.ReadMessage(service_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for GetServiceConfig method.
  /// </summary>
  public sealed partial class GetServiceConfigRequest : pb::IMessage<GetServiceConfigRequest> {
    private static readonly pb::MessageParser<GetServiceConfigRequest> _parser = new pb::MessageParser<GetServiceConfigRequest>(() => new GetServiceConfigRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceConfigRequest(GetServiceConfigRequest other) : this() {
      serviceName_ = other.serviceName_;
      configId_ = other.configId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceConfigRequest Clone() {
      return new GetServiceConfigRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private string configId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (ConfigId != other.ConfigId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConfigId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.ConfigId.Length != 0) {
        ConfigId = other.ConfigId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            ConfigId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for ListServiceConfigs method.
  /// </summary>
  public sealed partial class ListServiceConfigsRequest : pb::IMessage<ListServiceConfigsRequest> {
    private static readonly pb::MessageParser<ListServiceConfigsRequest> _parser = new pb::MessageParser<ListServiceConfigsRequest>(() => new ListServiceConfigsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceConfigsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceConfigsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceConfigsRequest(ListServiceConfigsRequest other) : this() {
      serviceName_ = other.serviceName_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceConfigsRequest Clone() {
      return new ListServiceConfigsRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    ///  The token of the page to retrieve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///  The max number of items to include in the response list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceConfigsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceConfigsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceConfigsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for ListServiceConfigs method.
  /// </summary>
  public sealed partial class ListServiceConfigsResponse : pb::IMessage<ListServiceConfigsResponse> {
    private static readonly pb::MessageParser<ListServiceConfigsResponse> _parser = new pb::MessageParser<ListServiceConfigsResponse>(() => new ListServiceConfigsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceConfigsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceConfigsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceConfigsResponse(ListServiceConfigsResponse other) : this() {
      serviceConfigs_ = other.serviceConfigs_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceConfigsResponse Clone() {
      return new ListServiceConfigsResponse(this);
    }

    /// <summary>Field number for the "service_configs" field.</summary>
    public const int ServiceConfigsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Api.Service> _repeated_serviceConfigs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Api.Service.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Service> serviceConfigs_ = new pbc::RepeatedField<global::Google.Api.Service>();
    /// <summary>
    ///  The list of service configuration resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Service> ServiceConfigs {
      get { return serviceConfigs_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The token of the next page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceConfigsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceConfigsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serviceConfigs_.Equals(other.serviceConfigs_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serviceConfigs_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serviceConfigs_.WriteTo(output, _repeated_serviceConfigs_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serviceConfigs_.CalculateSize(_repeated_serviceConfigs_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceConfigsResponse other) {
      if (other == null) {
        return;
      }
      serviceConfigs_.Add(other.serviceConfigs_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serviceConfigs_.AddEntriesFrom(input, _repeated_serviceConfigs_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for CreateServiceConfig method.
  /// </summary>
  public sealed partial class CreateServiceConfigRequest : pb::IMessage<CreateServiceConfigRequest> {
    private static readonly pb::MessageParser<CreateServiceConfigRequest> _parser = new pb::MessageParser<CreateServiceConfigRequest>(() => new CreateServiceConfigRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateServiceConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceConfigRequest(CreateServiceConfigRequest other) : this() {
      serviceName_ = other.serviceName_;
      ServiceConfig = other.serviceConfig_ != null ? other.ServiceConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceConfigRequest Clone() {
      return new CreateServiceConfigRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_config" field.</summary>
    public const int ServiceConfigFieldNumber = 2;
    private global::Google.Api.Service serviceConfig_;
    /// <summary>
    ///  The service configuration resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Service ServiceConfig {
      get { return serviceConfig_; }
      set {
        serviceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateServiceConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateServiceConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (!object.Equals(ServiceConfig, other.ServiceConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (serviceConfig_ != null) hash ^= ServiceConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (serviceConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServiceConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (serviceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateServiceConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.serviceConfig_ != null) {
        if (serviceConfig_ == null) {
          serviceConfig_ = new global::Google.Api.Service();
        }
        ServiceConfig.MergeFrom(other.ServiceConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            if (serviceConfig_ == null) {
              serviceConfig_ = new global::Google.Api.Service();
            }
            input.ReadMessage(serviceConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for SubmitConfigSource method.
  /// </summary>
  public sealed partial class SubmitConfigSourceRequest : pb::IMessage<SubmitConfigSourceRequest> {
    private static readonly pb::MessageParser<SubmitConfigSourceRequest> _parser = new pb::MessageParser<SubmitConfigSourceRequest>(() => new SubmitConfigSourceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitConfigSourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitConfigSourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitConfigSourceRequest(SubmitConfigSourceRequest other) : this() {
      serviceName_ = other.serviceName_;
      ConfigSource = other.configSource_ != null ? other.ConfigSource.Clone() : null;
      validateOnly_ = other.validateOnly_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitConfigSourceRequest Clone() {
      return new SubmitConfigSourceRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config_source" field.</summary>
    public const int ConfigSourceFieldNumber = 2;
    private global::Google.Api.Servicemanagement.V1.ConfigSource configSource_;
    /// <summary>
    ///  The source configuration for the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Servicemanagement.V1.ConfigSource ConfigSource {
      get { return configSource_; }
      set {
        configSource_ = value;
      }
    }

    /// <summary>Field number for the "validate_only" field.</summary>
    public const int ValidateOnlyFieldNumber = 3;
    private bool validateOnly_;
    /// <summary>
    ///  Optional. If set, this will result in the generation of a
    ///  `google.api.Service` configuration based on the `ConfigSource` provided,
    ///  but the generated config and the sources will NOT be persisted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ValidateOnly {
      get { return validateOnly_; }
      set {
        validateOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitConfigSourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitConfigSourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (!object.Equals(ConfigSource, other.ConfigSource)) return false;
      if (ValidateOnly != other.ValidateOnly) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (configSource_ != null) hash ^= ConfigSource.GetHashCode();
      if (ValidateOnly != false) hash ^= ValidateOnly.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (configSource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConfigSource);
      }
      if (ValidateOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(ValidateOnly);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (configSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSource);
      }
      if (ValidateOnly != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitConfigSourceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.configSource_ != null) {
        if (configSource_ == null) {
          configSource_ = new global::Google.Api.Servicemanagement.V1.ConfigSource();
        }
        ConfigSource.MergeFrom(other.ConfigSource);
      }
      if (other.ValidateOnly != false) {
        ValidateOnly = other.ValidateOnly;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            if (configSource_ == null) {
              configSource_ = new global::Google.Api.Servicemanagement.V1.ConfigSource();
            }
            input.ReadMessage(configSource_);
            break;
          }
          case 24: {
            ValidateOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for SubmitConfigSource method.
  /// </summary>
  public sealed partial class SubmitConfigSourceResponse : pb::IMessage<SubmitConfigSourceResponse> {
    private static readonly pb::MessageParser<SubmitConfigSourceResponse> _parser = new pb::MessageParser<SubmitConfigSourceResponse>(() => new SubmitConfigSourceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitConfigSourceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitConfigSourceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitConfigSourceResponse(SubmitConfigSourceResponse other) : this() {
      ServiceConfig = other.serviceConfig_ != null ? other.ServiceConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitConfigSourceResponse Clone() {
      return new SubmitConfigSourceResponse(this);
    }

    /// <summary>Field number for the "service_config" field.</summary>
    public const int ServiceConfigFieldNumber = 1;
    private global::Google.Api.Service serviceConfig_;
    /// <summary>
    ///  The generated service configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Service ServiceConfig {
      get { return serviceConfig_; }
      set {
        serviceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitConfigSourceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitConfigSourceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServiceConfig, other.ServiceConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serviceConfig_ != null) hash ^= ServiceConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serviceConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServiceConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serviceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitConfigSourceResponse other) {
      if (other == null) {
        return;
      }
      if (other.serviceConfig_ != null) {
        if (serviceConfig_ == null) {
          serviceConfig_ = new global::Google.Api.Service();
        }
        ServiceConfig.MergeFrom(other.ServiceConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serviceConfig_ == null) {
              serviceConfig_ = new global::Google.Api.Service();
            }
            input.ReadMessage(serviceConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for 'CreateServiceRollout'
  /// </summary>
  public sealed partial class CreateServiceRolloutRequest : pb::IMessage<CreateServiceRolloutRequest> {
    private static readonly pb::MessageParser<CreateServiceRolloutRequest> _parser = new pb::MessageParser<CreateServiceRolloutRequest>(() => new CreateServiceRolloutRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateServiceRolloutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceRolloutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceRolloutRequest(CreateServiceRolloutRequest other) : this() {
      serviceName_ = other.serviceName_;
      Rollout = other.rollout_ != null ? other.Rollout.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceRolloutRequest Clone() {
      return new CreateServiceRolloutRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rollout" field.</summary>
    public const int RolloutFieldNumber = 2;
    private global::Google.Api.Servicemanagement.V1.Rollout rollout_;
    /// <summary>
    ///  The rollout resource. The `service_name` field is output only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Servicemanagement.V1.Rollout Rollout {
      get { return rollout_; }
      set {
        rollout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateServiceRolloutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateServiceRolloutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (!object.Equals(Rollout, other.Rollout)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (rollout_ != null) hash ^= Rollout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (rollout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rollout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (rollout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rollout);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateServiceRolloutRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.rollout_ != null) {
        if (rollout_ == null) {
          rollout_ = new global::Google.Api.Servicemanagement.V1.Rollout();
        }
        Rollout.MergeFrom(other.Rollout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            if (rollout_ == null) {
              rollout_ = new global::Google.Api.Servicemanagement.V1.Rollout();
            }
            input.ReadMessage(rollout_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for 'ListServiceRollouts'
  /// </summary>
  public sealed partial class ListServiceRolloutsRequest : pb::IMessage<ListServiceRolloutsRequest> {
    private static readonly pb::MessageParser<ListServiceRolloutsRequest> _parser = new pb::MessageParser<ListServiceRolloutsRequest>(() => new ListServiceRolloutsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceRolloutsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceRolloutsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceRolloutsRequest(ListServiceRolloutsRequest other) : this() {
      serviceName_ = other.serviceName_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceRolloutsRequest Clone() {
      return new ListServiceRolloutsRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    ///  The token of the page to retrieve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    ///  The max number of items to include in the response list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceRolloutsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceRolloutsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceRolloutsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for ListServiceRollouts method.
  /// </summary>
  public sealed partial class ListServiceRolloutsResponse : pb::IMessage<ListServiceRolloutsResponse> {
    private static readonly pb::MessageParser<ListServiceRolloutsResponse> _parser = new pb::MessageParser<ListServiceRolloutsResponse>(() => new ListServiceRolloutsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListServiceRolloutsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceRolloutsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceRolloutsResponse(ListServiceRolloutsResponse other) : this() {
      rollouts_ = other.rollouts_.Clone();
      nextPageToken_ = other.nextPageToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListServiceRolloutsResponse Clone() {
      return new ListServiceRolloutsResponse(this);
    }

    /// <summary>Field number for the "rollouts" field.</summary>
    public const int RolloutsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Api.Servicemanagement.V1.Rollout> _repeated_rollouts_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Api.Servicemanagement.V1.Rollout.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.Rollout> rollouts_ = new pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.Rollout>();
    /// <summary>
    ///  The list of rollout resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.Rollout> Rollouts {
      get { return rollouts_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    ///  The token of the next page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListServiceRolloutsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListServiceRolloutsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rollouts_.Equals(other.rollouts_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rollouts_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rollouts_.WriteTo(output, _repeated_rollouts_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rollouts_.CalculateSize(_repeated_rollouts_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListServiceRolloutsResponse other) {
      if (other == null) {
        return;
      }
      rollouts_.Add(other.rollouts_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rollouts_.AddEntriesFrom(input, _repeated_rollouts_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for GetServiceRollout method.
  /// </summary>
  public sealed partial class GetServiceRolloutRequest : pb::IMessage<GetServiceRolloutRequest> {
    private static readonly pb::MessageParser<GetServiceRolloutRequest> _parser = new pb::MessageParser<GetServiceRolloutRequest>(() => new GetServiceRolloutRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceRolloutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceRolloutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceRolloutRequest(GetServiceRolloutRequest other) : this() {
      serviceName_ = other.serviceName_;
      rolloutId_ = other.rolloutId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceRolloutRequest Clone() {
      return new GetServiceRolloutRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  The name of the service.  See the [overview](/service-management/overview)
    ///  for naming requirements.  For example: `example.googleapis.com`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rollout_id" field.</summary>
    public const int RolloutIdFieldNumber = 2;
    private string rolloutId_ = "";
    /// <summary>
    ///  The id of the rollout resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RolloutId {
      get { return rolloutId_; }
      set {
        rolloutId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceRolloutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceRolloutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (RolloutId != other.RolloutId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (RolloutId.Length != 0) hash ^= RolloutId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (RolloutId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RolloutId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (RolloutId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RolloutId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceRolloutRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.RolloutId.Length != 0) {
        RolloutId = other.RolloutId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            RolloutId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for EnableService method.
  /// </summary>
  public sealed partial class EnableServiceRequest : pb::IMessage<EnableServiceRequest> {
    private static readonly pb::MessageParser<EnableServiceRequest> _parser = new pb::MessageParser<EnableServiceRequest>(() => new EnableServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableServiceRequest(EnableServiceRequest other) : this() {
      serviceName_ = other.serviceName_;
      consumerId_ = other.consumerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableServiceRequest Clone() {
      return new EnableServiceRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the service to enable. Specifying an unknown service name will
    ///  cause the request to fail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 2;
    private string consumerId_ = "";
    /// <summary>
    ///  The identity of consumer resource which service enablement will be
    ///  applied to.
    ///
    ///  The Google Service Management implementation accepts the following
    ///  forms: "project:&lt;project_id>", "project_number:&lt;project_number>".
    ///
    ///  Note: this is made compatible with
    ///  google.api.servicecontrol.v1.Operation.consumer_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerId {
      get { return consumerId_; }
      set {
        consumerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (ConsumerId != other.ConsumerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (ConsumerId.Length != 0) hash ^= ConsumerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (ConsumerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConsumerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (ConsumerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.ConsumerId.Length != 0) {
        ConsumerId = other.ConsumerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            ConsumerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for DisableService method.
  /// </summary>
  public sealed partial class DisableServiceRequest : pb::IMessage<DisableServiceRequest> {
    private static readonly pb::MessageParser<DisableServiceRequest> _parser = new pb::MessageParser<DisableServiceRequest>(() => new DisableServiceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisableServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisableServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisableServiceRequest(DisableServiceRequest other) : this() {
      serviceName_ = other.serviceName_;
      consumerId_ = other.consumerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisableServiceRequest Clone() {
      return new DisableServiceRequest(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the service to disable. Specifying an unknown service name
    ///  will cause the request to fail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 2;
    private string consumerId_ = "";
    /// <summary>
    ///  The identity of consumer resource which service disablement will be
    ///  applied to.
    ///
    ///  The Google Service Management implementation accepts the following
    ///  forms: "project:&lt;project_id>", "project_number:&lt;project_number>".
    ///
    ///  Note: this is made compatible with
    ///  google.api.servicecontrol.v1.Operation.consumer_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerId {
      get { return consumerId_; }
      set {
        consumerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisableServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisableServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (ConsumerId != other.ConsumerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (ConsumerId.Length != 0) hash ^= ConsumerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (ConsumerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConsumerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (ConsumerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisableServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.ConsumerId.Length != 0) {
        ConsumerId = other.ConsumerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            ConsumerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Request message for GenerateConfigReport method.
  /// </summary>
  public sealed partial class GenerateConfigReportRequest : pb::IMessage<GenerateConfigReportRequest> {
    private static readonly pb::MessageParser<GenerateConfigReportRequest> _parser = new pb::MessageParser<GenerateConfigReportRequest>(() => new GenerateConfigReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateConfigReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateConfigReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateConfigReportRequest(GenerateConfigReportRequest other) : this() {
      NewConfig = other.newConfig_ != null ? other.NewConfig.Clone() : null;
      OldConfig = other.oldConfig_ != null ? other.OldConfig.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateConfigReportRequest Clone() {
      return new GenerateConfigReportRequest(this);
    }

    /// <summary>Field number for the "new_config" field.</summary>
    public const int NewConfigFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Any newConfig_;
    /// <summary>
    ///  Service configuration for which we want to generate the report.
    ///  For this version of API, the supported types are
    ///  [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
    ///  [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
    ///  and [google.api.Service][google.api.Service]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any NewConfig {
      get { return newConfig_; }
      set {
        newConfig_ = value;
      }
    }

    /// <summary>Field number for the "old_config" field.</summary>
    public const int OldConfigFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any oldConfig_;
    /// <summary>
    ///  Service configuration against which the comparison will be done.
    ///  For this version of API, the supported types are
    ///  [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
    ///  [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
    ///  and [google.api.Service][google.api.Service]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any OldConfig {
      get { return oldConfig_; }
      set {
        oldConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateConfigReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateConfigReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewConfig, other.NewConfig)) return false;
      if (!object.Equals(OldConfig, other.OldConfig)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newConfig_ != null) hash ^= NewConfig.GetHashCode();
      if (oldConfig_ != null) hash ^= OldConfig.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewConfig);
      }
      if (oldConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OldConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewConfig);
      }
      if (oldConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateConfigReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.newConfig_ != null) {
        if (newConfig_ == null) {
          newConfig_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        NewConfig.MergeFrom(other.NewConfig);
      }
      if (other.oldConfig_ != null) {
        if (oldConfig_ == null) {
          oldConfig_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        OldConfig.MergeFrom(other.OldConfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (newConfig_ == null) {
              newConfig_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(newConfig_);
            break;
          }
          case 18: {
            if (oldConfig_ == null) {
              oldConfig_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(oldConfig_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Response message for GenerateConfigReport method.
  /// </summary>
  public sealed partial class GenerateConfigReportResponse : pb::IMessage<GenerateConfigReportResponse> {
    private static readonly pb::MessageParser<GenerateConfigReportResponse> _parser = new pb::MessageParser<GenerateConfigReportResponse>(() => new GenerateConfigReportResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateConfigReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Servicemanagement.V1.ServicemanagerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateConfigReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateConfigReportResponse(GenerateConfigReportResponse other) : this() {
      serviceName_ = other.serviceName_;
      id_ = other.id_;
      changeReports_ = other.changeReports_.Clone();
      diagnostics_ = other.diagnostics_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateConfigReportResponse Clone() {
      return new GenerateConfigReportResponse(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    ///  Name of the service this report belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    ///  ID of the service configuration this report belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "change_reports" field.</summary>
    public const int ChangeReportsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Api.Servicemanagement.V1.ChangeReport> _repeated_changeReports_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Api.Servicemanagement.V1.ChangeReport.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.ChangeReport> changeReports_ = new pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.ChangeReport>();
    /// <summary>
    ///  list of ChangeReport, each corresponding to comparison between two
    ///  service configurations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.ChangeReport> ChangeReports {
      get { return changeReports_; }
    }

    /// <summary>Field number for the "diagnostics" field.</summary>
    public const int DiagnosticsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Api.Servicemanagement.V1.Diagnostic> _repeated_diagnostics_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Api.Servicemanagement.V1.Diagnostic.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.Diagnostic> diagnostics_ = new pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.Diagnostic>();
    /// <summary>
    ///  Errors / Linter warnings associated with the service definition this
    ///  report
    ///  belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Servicemanagement.V1.Diagnostic> Diagnostics {
      get { return diagnostics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateConfigReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateConfigReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (Id != other.Id) return false;
      if(!changeReports_.Equals(other.changeReports_)) return false;
      if(!diagnostics_.Equals(other.diagnostics_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= changeReports_.GetHashCode();
      hash ^= diagnostics_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      changeReports_.WriteTo(output, _repeated_changeReports_codec);
      diagnostics_.WriteTo(output, _repeated_diagnostics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += changeReports_.CalculateSize(_repeated_changeReports_codec);
      size += diagnostics_.CalculateSize(_repeated_diagnostics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateConfigReportResponse other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      changeReports_.Add(other.changeReports_);
      diagnostics_.Add(other.diagnostics_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            changeReports_.AddEntriesFrom(input, _repeated_changeReports_codec);
            break;
          }
          case 34: {
            diagnostics_.AddEntriesFrom(input, _repeated_diagnostics_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
