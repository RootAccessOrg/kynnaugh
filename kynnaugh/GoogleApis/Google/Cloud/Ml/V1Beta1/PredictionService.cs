// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/ml/v1beta1/prediction_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Ml.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/cloud/ml/v1beta1/prediction_service.proto</summary>
  public static partial class PredictionServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/ml/v1beta1/prediction_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PredictionServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvY2xvdWQvbWwvdjFiZXRhMS9wcmVkaWN0aW9uX3NlcnZpY2Uu",
            "cHJvdG8SF2dvb2dsZS5jbG91ZC5tbC52MWJldGExGhxnb29nbGUvYXBpL2Fu",
            "bm90YXRpb25zLnByb3RvGhlnb29nbGUvYXBpL2h0dHBib2R5LnByb3RvIkcK",
            "DlByZWRpY3RSZXF1ZXN0EgwKBG5hbWUYASABKAkSJwoJaHR0cF9ib2R5GAIg",
            "ASgLMhQuZ29vZ2xlLmFwaS5IdHRwQm9keTKTAQoXT25saW5lUHJlZGljdGlv",
            "blNlcnZpY2USeAoHUHJlZGljdBInLmdvb2dsZS5jbG91ZC5tbC52MWJldGEx",
            "LlByZWRpY3RSZXF1ZXN0GhQuZ29vZ2xlLmFwaS5IdHRwQm9keSIugtPkkwIo",
            "IiMvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qKn06cHJlZGljdDoBKkJ2Ch9j",
            "b20uZ29vZ2xlLmNsb3VkLm1sLmFwaS52MWJldGExQhZQcmVkaWN0aW9uU2Vy",
            "dmljZVByb3RvUAFaOWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2ds",
            "ZWFwaXMvY2xvdWQvbWwvdjFiZXRhMTttbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.HttpbodyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Ml.V1Beta1.PredictRequest), global::Google.Cloud.Ml.V1Beta1.PredictRequest.Parser, new[]{ "Name", "HttpBody" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Request for predictions to be issued against a trained model.
  ///
  ///  The body of the request is a single JSON object with a single top-level
  ///  field:
  ///
  ///  &lt;dl>
  ///    &lt;dt>instances&lt;/dt>
  ///    &lt;dd>A JSON array containing values representing the instances to use for
  ///        prediction.&lt;/dd>
  ///  &lt;/dl>
  ///
  ///  The structure of each element of the instances list is determined by your
  ///  model's input definition. Instances can include named inputs or can contain
  ///  only unlabeled values.
  ///
  ///  Most data does not include named inputs. Some instances will be simple
  ///  JSON values (boolean, number, or string). However, instances are often lists
  ///  of simple values, or complex nested lists. Here are some examples of request
  ///  bodies:
  ///
  ///  CSV data with each row encoded as a string value:
  ///  &lt;pre>
  ///  {"instances": ["1.0,true,\\"x\\"", "-2.0,false,\\"y\\""]}
  ///  &lt;/pre>
  ///  Plain text:
  ///  &lt;pre>
  ///  {"instances": ["the quick brown fox", "la bruja le dio"]}
  ///  &lt;/pre>
  ///  Sentences encoded as lists of words (vectors of strings):
  ///  &lt;pre>
  ///  {"instances": [["the","quick","brown"], ["la","bruja","le"]]}
  ///  &lt;/pre>
  ///  Floating point scalar values:
  ///  &lt;pre>
  ///  {"instances": [0.0, 1.1, 2.2]}
  ///  &lt;/pre>
  ///  Vectors of integers:
  ///  &lt;pre>
  ///  {"instances": [[0, 1, 2], [3, 4, 5],...]}
  ///  &lt;/pre>
  ///  Tensors (in this case, two-dimensional tensors):
  ///  &lt;pre>
  ///  {"instances": [[[0, 1, 2], [3, 4, 5]], ...]}
  ///  &lt;/pre>
  ///  Images represented as a three-dimensional list. In this encoding scheme the
  ///  first two dimensions represent the rows and columns of the image, and the
  ///  third contains the R, G, and B values for each pixel.
  ///  &lt;pre>
  ///  {"instances": [[[[138, 30, 66], [130, 20, 56], ...]]]]}
  ///  &lt;/pre>
  ///  Data must be encoded as UTF-8. If your data uses another character encoding,
  ///  you must base64 encode the data and mark it as binary. To mark a JSON string
  ///  as binary, replace it with an object with a single attribute named `b`:
  ///  &lt;pre>{"b": "..."} &lt;/pre>
  ///  For example:
  ///
  ///  Two Serialized tf.Examples (fake data, for illustrative purposes only):
  ///  &lt;pre>
  ///  {"instances": [{"b64": "X5ad6u"}, {"b64": "IA9j4nx"}]}
  ///  &lt;/pre>
  ///  Two JPEG image byte strings (fake data, for illustrative purposes only):
  ///  &lt;pre>
  ///  {"instances": [{"b64": "ASa8asdf"}, {"b64": "JLK7ljk3"}]}
  ///  &lt;/pre>
  ///  If your data includes named references, format each instance as a JSON object
  ///  with the named references as the keys:
  ///
  ///  JSON input data to be preprocessed:
  ///  &lt;pre>
  ///  {"instances": [{"a": 1.0,  "b": true,  "c": "x"},
  ///                 {"a": -2.0, "b": false, "c": "y"}]}
  ///  &lt;/pre>
  ///  Some models have an underlying TensorFlow graph that accepts multiple input
  ///  tensors. In this case, you should use the names of JSON name/value pairs to
  ///  identify the input tensors, as shown in the following exmaples:
  ///
  ///  For a graph with input tensor aliases "tag" (string) and "image"
  ///  (base64-encoded string):
  ///  &lt;pre>
  ///  {"instances": [{"tag": "beach", "image": {"b64": "ASa8asdf"}},
  ///                 {"tag": "car", "image": {"b64": "JLK7ljk3"}}]}
  ///  &lt;/pre>
  ///  For a graph with input tensor aliases "tag" (string) and "image"
  ///  (3-dimensional array of 8-bit ints):
  ///  &lt;pre>
  ///  {"instances": [{"tag": "beach", "image": [[[263, 1, 10], [262, 2, 11], ...]]},
  ///                 {"tag": "car", "image": [[[10, 11, 24], [23, 10, 15], ...]]}]}
  ///  &lt;/pre>
  ///  If the call is successful, the response body will contain one prediction
  ///  entry per instance in the request body. If prediction fails for any
  ///  instance, the response body will contain no predictions and will contian
  ///  a single error entry instead.
  /// </summary>
  public sealed partial class PredictRequest : pb::IMessage<PredictRequest> {
    private static readonly pb::MessageParser<PredictRequest> _parser = new pb::MessageParser<PredictRequest>(() => new PredictRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredictRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Ml.V1Beta1.PredictionServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictRequest(PredictRequest other) : this() {
      name_ = other.name_;
      HttpBody = other.httpBody_ != null ? other.HttpBody.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictRequest Clone() {
      return new PredictRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  Required. The resource name of a model or a version.
    ///
    ///  Authorization: requires `Viewer` role on the parent project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "http_body" field.</summary>
    public const int HttpBodyFieldNumber = 2;
    private global::Google.Api.HttpBody httpBody_;
    /// <summary>
    ///
    ///  Required. The prediction request body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.HttpBody HttpBody {
      get { return httpBody_; }
      set {
        httpBody_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredictRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredictRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(HttpBody, other.HttpBody)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (httpBody_ != null) hash ^= HttpBody.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (httpBody_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HttpBody);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (httpBody_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpBody);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredictRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.httpBody_ != null) {
        if (httpBody_ == null) {
          httpBody_ = new global::Google.Api.HttpBody();
        }
        HttpBody.MergeFrom(other.HttpBody);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (httpBody_ == null) {
              httpBody_ = new global::Google.Api.HttpBody();
            }
            input.ReadMessage(httpBody_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
