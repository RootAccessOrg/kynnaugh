// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/ml/v1beta1/model_service.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Cloud.Ml.V1Beta1 {
  /// <summary>
  ///  Provides methods that create and manage machine learning models and their
  ///  versions.
  ///
  ///  A model in this context is a container for versions. The model can't provide
  ///  predictions without first having a version created for it.
  ///
  ///  Each version is a trained machine learning model, and each is assumed to be
  ///  an iteration of the same machine learning problem as the other versions of
  ///  the same model.
  ///
  ///  Your project can define multiple models, each with multiple versions.
  ///
  ///  The basic life cycle of a model is:
  ///
  ///  *   Create and train the machine learning model and save it to a
  ///      Google Cloud Storage location.
  ///  *   Use
  ///      [projects.models.create](/ml/reference/rest/v1beta1/projects.models/create)
  ///      to make a new model in your project.
  ///  *   Use
  ///      [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create)
  ///      to deploy your saved model.
  ///  *   Use [projects.predict](/ml/reference/rest/v1beta1/projects/predict to
  ///      request predictions of a version of your model, or use
  ///      [projects.jobs.create](/ml/reference/rest/v1beta1/projects.jobs/create)
  ///      to start a batch prediction job.
  /// </summary>
  public static class ModelService
  {
    static readonly string __ServiceName = "google.cloud.ml.v1beta1.ModelService";

    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.CreateModelRequest> __Marshaller_CreateModelRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.CreateModelRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.Model> __Marshaller_Model = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.Model.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.ListModelsRequest> __Marshaller_ListModelsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.ListModelsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.ListModelsResponse> __Marshaller_ListModelsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.ListModelsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.GetModelRequest> __Marshaller_GetModelRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.GetModelRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest> __Marshaller_DeleteModelRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.LongRunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest> __Marshaller_CreateVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest> __Marshaller_ListVersionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse> __Marshaller_ListVersionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.GetVersionRequest> __Marshaller_GetVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.GetVersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.Version> __Marshaller_Version = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.Version.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest> __Marshaller_DeleteVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest> __Marshaller_SetDefaultVersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest.Parser.ParseFrom);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.CreateModelRequest, global::Google.Cloud.Ml.V1Beta1.Model> __Method_CreateModel = new Method<global::Google.Cloud.Ml.V1Beta1.CreateModelRequest, global::Google.Cloud.Ml.V1Beta1.Model>(
        MethodType.Unary,
        __ServiceName,
        "CreateModel",
        __Marshaller_CreateModelRequest,
        __Marshaller_Model);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.ListModelsRequest, global::Google.Cloud.Ml.V1Beta1.ListModelsResponse> __Method_ListModels = new Method<global::Google.Cloud.Ml.V1Beta1.ListModelsRequest, global::Google.Cloud.Ml.V1Beta1.ListModelsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListModels",
        __Marshaller_ListModelsRequest,
        __Marshaller_ListModelsResponse);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.GetModelRequest, global::Google.Cloud.Ml.V1Beta1.Model> __Method_GetModel = new Method<global::Google.Cloud.Ml.V1Beta1.GetModelRequest, global::Google.Cloud.Ml.V1Beta1.Model>(
        MethodType.Unary,
        __ServiceName,
        "GetModel",
        __Marshaller_GetModelRequest,
        __Marshaller_Model);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest, global::Google.LongRunning.Operation> __Method_DeleteModel = new Method<global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteModel",
        __Marshaller_DeleteModelRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest, global::Google.LongRunning.Operation> __Method_CreateVersion = new Method<global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "CreateVersion",
        __Marshaller_CreateVersionRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest, global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse> __Method_ListVersions = new Method<global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest, global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListVersions",
        __Marshaller_ListVersionsRequest,
        __Marshaller_ListVersionsResponse);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.GetVersionRequest, global::Google.Cloud.Ml.V1Beta1.Version> __Method_GetVersion = new Method<global::Google.Cloud.Ml.V1Beta1.GetVersionRequest, global::Google.Cloud.Ml.V1Beta1.Version>(
        MethodType.Unary,
        __ServiceName,
        "GetVersion",
        __Marshaller_GetVersionRequest,
        __Marshaller_Version);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest, global::Google.LongRunning.Operation> __Method_DeleteVersion = new Method<global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest, global::Google.LongRunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "DeleteVersion",
        __Marshaller_DeleteVersionRequest,
        __Marshaller_Operation);

    static readonly Method<global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest, global::Google.Cloud.Ml.V1Beta1.Version> __Method_SetDefaultVersion = new Method<global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest, global::Google.Cloud.Ml.V1Beta1.Version>(
        MethodType.Unary,
        __ServiceName,
        "SetDefaultVersion",
        __Marshaller_SetDefaultVersionRequest,
        __Marshaller_Version);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Ml.V1Beta1.ModelServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ModelService</summary>
    public abstract class ModelServiceBase
    {
      /// <summary>
      ///  Creates a model which will later contain one or more versions.
      ///
      ///  You must add at least one version before you can request predictions from
      ///  the model. Add versions by calling
      ///  [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Ml.V1Beta1.Model> CreateModel(global::Google.Cloud.Ml.V1Beta1.CreateModelRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Lists the models in a project.
      ///
      ///  Each project can contain multiple models, and each model can have multiple
      ///  versions.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Ml.V1Beta1.ListModelsResponse> ListModels(global::Google.Cloud.Ml.V1Beta1.ListModelsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets information about a model, including its name, the description (if
      ///  set), and the default version (if at least one version of the model has
      ///  been deployed).
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Ml.V1Beta1.Model> GetModel(global::Google.Cloud.Ml.V1Beta1.GetModelRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a model.
      ///
      ///  You can only delete a model if there are no versions in it. You can delete
      ///  versions by calling
      ///  [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteModel(global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Creates a new version of a model from a trained TensorFlow model.
      ///
      ///  If the version created in the cloud by this call is the first deployed
      ///  version of the specified model, it will be made the default version of the
      ///  model. When you add a version to a model that already has one or more
      ///  versions, the default version does not automatically change. If you want a
      ///  new version to be the default, you must call
      ///  [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateVersion(global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets basic information about all the versions of a model.
      ///
      ///  If you expect that a model has a lot of versions, or if you need to handle
      ///  only a limited number of results at a time, you can request that the list
      ///  be retrieved in batches (called pages):
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse> ListVersions(global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Gets information about a model version.
      ///
      ///  Models can have multiple versions. You can call
      ///  [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
      ///  to get the same information that this method returns for all of the
      ///  versions of a model.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Ml.V1Beta1.Version> GetVersion(global::Google.Cloud.Ml.V1Beta1.GetVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Deletes a model version.
      ///
      ///  Each model can have multiple versions deployed and in use at any given
      ///  time. Use this method to remove a single version.
      ///
      ///  Note: You cannot delete the version that is set as the default version
      ///  of the model unless it is the only remaining version.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteVersion(global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Designates a version to be the default for the model.
      ///
      ///  The default version is used for prediction requests made against the model
      ///  that don't specify a version.
      ///
      ///  The first version to be created for a model is automatically set as the
      ///  default. You must make any subsequent changes to the default version
      ///  setting manually using this method.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Ml.V1Beta1.Version> SetDefaultVersion(global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ModelService</summary>
    public class ModelServiceClient : ClientBase<ModelServiceClient>
    {
      /// <summary>Creates a new client for ModelService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ModelServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ModelService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ModelServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ModelServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ModelServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Creates a model which will later contain one or more versions.
      ///
      ///  You must add at least one version before you can request predictions from
      ///  the model. Add versions by calling
      ///  [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Model CreateModel(global::Google.Cloud.Ml.V1Beta1.CreateModelRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateModel(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a model which will later contain one or more versions.
      ///
      ///  You must add at least one version before you can request predictions from
      ///  the model. Add versions by calling
      ///  [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Model CreateModel(global::Google.Cloud.Ml.V1Beta1.CreateModelRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateModel, null, options, request);
      }
      /// <summary>
      ///  Creates a model which will later contain one or more versions.
      ///
      ///  You must add at least one version before you can request predictions from
      ///  the model. Add versions by calling
      ///  [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Model> CreateModelAsync(global::Google.Cloud.Ml.V1Beta1.CreateModelRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateModelAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a model which will later contain one or more versions.
      ///
      ///  You must add at least one version before you can request predictions from
      ///  the model. Add versions by calling
      ///  [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Model> CreateModelAsync(global::Google.Cloud.Ml.V1Beta1.CreateModelRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateModel, null, options, request);
      }
      /// <summary>
      ///  Lists the models in a project.
      ///
      ///  Each project can contain multiple models, and each model can have multiple
      ///  versions.
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.ListModelsResponse ListModels(global::Google.Cloud.Ml.V1Beta1.ListModelsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListModels(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the models in a project.
      ///
      ///  Each project can contain multiple models, and each model can have multiple
      ///  versions.
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.ListModelsResponse ListModels(global::Google.Cloud.Ml.V1Beta1.ListModelsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      ///  Lists the models in a project.
      ///
      ///  Each project can contain multiple models, and each model can have multiple
      ///  versions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.ListModelsResponse> ListModelsAsync(global::Google.Cloud.Ml.V1Beta1.ListModelsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListModelsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Lists the models in a project.
      ///
      ///  Each project can contain multiple models, and each model can have multiple
      ///  versions.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.ListModelsResponse> ListModelsAsync(global::Google.Cloud.Ml.V1Beta1.ListModelsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListModels, null, options, request);
      }
      /// <summary>
      ///  Gets information about a model, including its name, the description (if
      ///  set), and the default version (if at least one version of the model has
      ///  been deployed).
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Model GetModel(global::Google.Cloud.Ml.V1Beta1.GetModelRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetModel(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a model, including its name, the description (if
      ///  set), and the default version (if at least one version of the model has
      ///  been deployed).
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Model GetModel(global::Google.Cloud.Ml.V1Beta1.GetModelRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      ///  Gets information about a model, including its name, the description (if
      ///  set), and the default version (if at least one version of the model has
      ///  been deployed).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Model> GetModelAsync(global::Google.Cloud.Ml.V1Beta1.GetModelRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetModelAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a model, including its name, the description (if
      ///  set), and the default version (if at least one version of the model has
      ///  been deployed).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Model> GetModelAsync(global::Google.Cloud.Ml.V1Beta1.GetModelRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModel, null, options, request);
      }
      /// <summary>
      ///  Deletes a model.
      ///
      ///  You can only delete a model if there are no versions in it. You can delete
      ///  versions by calling
      ///  [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteModel(global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteModel(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a model.
      ///
      ///  You can only delete a model if there are no versions in it. You can delete
      ///  versions by calling
      ///  [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteModel(global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      ///  Deletes a model.
      ///
      ///  You can only delete a model if there are no versions in it. You can delete
      ///  versions by calling
      ///  [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteModelAsync(global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteModelAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a model.
      ///
      ///  You can only delete a model if there are no versions in it. You can delete
      ///  versions by calling
      ///  [projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteModelAsync(global::Google.Cloud.Ml.V1Beta1.DeleteModelRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteModel, null, options, request);
      }
      /// <summary>
      ///  Creates a new version of a model from a trained TensorFlow model.
      ///
      ///  If the version created in the cloud by this call is the first deployed
      ///  version of the specified model, it will be made the default version of the
      ///  model. When you add a version to a model that already has one or more
      ///  versions, the default version does not automatically change. If you want a
      ///  new version to be the default, you must call
      ///  [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateVersion(global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new version of a model from a trained TensorFlow model.
      ///
      ///  If the version created in the cloud by this call is the first deployed
      ///  version of the specified model, it will be made the default version of the
      ///  model. When you add a version to a model that already has one or more
      ///  versions, the default version does not automatically change. If you want a
      ///  new version to be the default, you must call
      ///  [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
      /// </summary>
      public virtual global::Google.LongRunning.Operation CreateVersion(global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVersion, null, options, request);
      }
      /// <summary>
      ///  Creates a new version of a model from a trained TensorFlow model.
      ///
      ///  If the version created in the cloud by this call is the first deployed
      ///  version of the specified model, it will be made the default version of the
      ///  model. When you add a version to a model that already has one or more
      ///  versions, the default version does not automatically change. If you want a
      ///  new version to be the default, you must call
      ///  [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateVersionAsync(global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Creates a new version of a model from a trained TensorFlow model.
      ///
      ///  If the version created in the cloud by this call is the first deployed
      ///  version of the specified model, it will be made the default version of the
      ///  model. When you add a version to a model that already has one or more
      ///  versions, the default version does not automatically change. If you want a
      ///  new version to be the default, you must call
      ///  [projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> CreateVersionAsync(global::Google.Cloud.Ml.V1Beta1.CreateVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVersion, null, options, request);
      }
      /// <summary>
      ///  Gets basic information about all the versions of a model.
      ///
      ///  If you expect that a model has a lot of versions, or if you need to handle
      ///  only a limited number of results at a time, you can request that the list
      ///  be retrieved in batches (called pages):
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse ListVersions(global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListVersions(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets basic information about all the versions of a model.
      ///
      ///  If you expect that a model has a lot of versions, or if you need to handle
      ///  only a limited number of results at a time, you can request that the list
      ///  be retrieved in batches (called pages):
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse ListVersions(global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVersions, null, options, request);
      }
      /// <summary>
      ///  Gets basic information about all the versions of a model.
      ///
      ///  If you expect that a model has a lot of versions, or if you need to handle
      ///  only a limited number of results at a time, you can request that the list
      ///  be retrieved in batches (called pages):
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse> ListVersionsAsync(global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListVersionsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets basic information about all the versions of a model.
      ///
      ///  If you expect that a model has a lot of versions, or if you need to handle
      ///  only a limited number of results at a time, you can request that the list
      ///  be retrieved in batches (called pages):
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.ListVersionsResponse> ListVersionsAsync(global::Google.Cloud.Ml.V1Beta1.ListVersionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVersions, null, options, request);
      }
      /// <summary>
      ///  Gets information about a model version.
      ///
      ///  Models can have multiple versions. You can call
      ///  [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
      ///  to get the same information that this method returns for all of the
      ///  versions of a model.
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Version GetVersion(global::Google.Cloud.Ml.V1Beta1.GetVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a model version.
      ///
      ///  Models can have multiple versions. You can call
      ///  [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
      ///  to get the same information that this method returns for all of the
      ///  versions of a model.
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Version GetVersion(global::Google.Cloud.Ml.V1Beta1.GetVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      ///  Gets information about a model version.
      ///
      ///  Models can have multiple versions. You can call
      ///  [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
      ///  to get the same information that this method returns for all of the
      ///  versions of a model.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Version> GetVersionAsync(global::Google.Cloud.Ml.V1Beta1.GetVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Gets information about a model version.
      ///
      ///  Models can have multiple versions. You can call
      ///  [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
      ///  to get the same information that this method returns for all of the
      ///  versions of a model.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Version> GetVersionAsync(global::Google.Cloud.Ml.V1Beta1.GetVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      ///  Deletes a model version.
      ///
      ///  Each model can have multiple versions deployed and in use at any given
      ///  time. Use this method to remove a single version.
      ///
      ///  Note: You cannot delete the version that is set as the default version
      ///  of the model unless it is the only remaining version.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteVersion(global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a model version.
      ///
      ///  Each model can have multiple versions deployed and in use at any given
      ///  time. Use this method to remove a single version.
      ///
      ///  Note: You cannot delete the version that is set as the default version
      ///  of the model unless it is the only remaining version.
      /// </summary>
      public virtual global::Google.LongRunning.Operation DeleteVersion(global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVersion, null, options, request);
      }
      /// <summary>
      ///  Deletes a model version.
      ///
      ///  Each model can have multiple versions deployed and in use at any given
      ///  time. Use this method to remove a single version.
      ///
      ///  Note: You cannot delete the version that is set as the default version
      ///  of the model unless it is the only remaining version.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteVersionAsync(global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Deletes a model version.
      ///
      ///  Each model can have multiple versions deployed and in use at any given
      ///  time. Use this method to remove a single version.
      ///
      ///  Note: You cannot delete the version that is set as the default version
      ///  of the model unless it is the only remaining version.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteVersionAsync(global::Google.Cloud.Ml.V1Beta1.DeleteVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVersion, null, options, request);
      }
      /// <summary>
      ///  Designates a version to be the default for the model.
      ///
      ///  The default version is used for prediction requests made against the model
      ///  that don't specify a version.
      ///
      ///  The first version to be created for a model is automatically set as the
      ///  default. You must make any subsequent changes to the default version
      ///  setting manually using this method.
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Version SetDefaultVersion(global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetDefaultVersion(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Designates a version to be the default for the model.
      ///
      ///  The default version is used for prediction requests made against the model
      ///  that don't specify a version.
      ///
      ///  The first version to be created for a model is automatically set as the
      ///  default. You must make any subsequent changes to the default version
      ///  setting manually using this method.
      /// </summary>
      public virtual global::Google.Cloud.Ml.V1Beta1.Version SetDefaultVersion(global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDefaultVersion, null, options, request);
      }
      /// <summary>
      ///  Designates a version to be the default for the model.
      ///
      ///  The default version is used for prediction requests made against the model
      ///  that don't specify a version.
      ///
      ///  The first version to be created for a model is automatically set as the
      ///  default. You must make any subsequent changes to the default version
      ///  setting manually using this method.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Version> SetDefaultVersionAsync(global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetDefaultVersionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Designates a version to be the default for the model.
      ///
      ///  The default version is used for prediction requests made against the model
      ///  that don't specify a version.
      ///
      ///  The first version to be created for a model is automatically set as the
      ///  default. You must make any subsequent changes to the default version
      ///  setting manually using this method.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Cloud.Ml.V1Beta1.Version> SetDefaultVersionAsync(global::Google.Cloud.Ml.V1Beta1.SetDefaultVersionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDefaultVersion, null, options, request);
      }
      protected override ModelServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ModelServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ModelServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateModel, serviceImpl.CreateModel)
          .AddMethod(__Method_ListModels, serviceImpl.ListModels)
          .AddMethod(__Method_GetModel, serviceImpl.GetModel)
          .AddMethod(__Method_DeleteModel, serviceImpl.DeleteModel)
          .AddMethod(__Method_CreateVersion, serviceImpl.CreateVersion)
          .AddMethod(__Method_ListVersions, serviceImpl.ListVersions)
          .AddMethod(__Method_GetVersion, serviceImpl.GetVersion)
          .AddMethod(__Method_DeleteVersion, serviceImpl.DeleteVersion)
          .AddMethod(__Method_SetDefaultVersion, serviceImpl.SetDefaultVersion).Build();
    }

  }
}
#endregion
