// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Api.Servicecontrol.V1 {
  /// <summary>
  ///  [Google Service Control API](/service-control/overview)
  ///
  ///  Lets clients check and report operations against
  ///  a [managed service][google.api.servicemanagement.v1.ManagedService].
  /// </summary>
  public static class ServiceController
  {
    static readonly string __ServiceName = "google.api.servicecontrol.v1.ServiceController";

    static readonly Marshaller<global::Google.Api.Servicecontrol.V1.CheckRequest> __Marshaller_CheckRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Servicecontrol.V1.CheckRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Api.Servicecontrol.V1.CheckResponse> __Marshaller_CheckResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Servicecontrol.V1.CheckResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Api.Servicecontrol.V1.ReportRequest> __Marshaller_ReportRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Servicecontrol.V1.ReportRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Api.Servicecontrol.V1.ReportResponse> __Marshaller_ReportResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Servicecontrol.V1.ReportResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Api.Servicecontrol.V1.CheckRequest, global::Google.Api.Servicecontrol.V1.CheckResponse> __Method_Check = new Method<global::Google.Api.Servicecontrol.V1.CheckRequest, global::Google.Api.Servicecontrol.V1.CheckResponse>(
        MethodType.Unary,
        __ServiceName,
        "Check",
        __Marshaller_CheckRequest,
        __Marshaller_CheckResponse);

    static readonly Method<global::Google.Api.Servicecontrol.V1.ReportRequest, global::Google.Api.Servicecontrol.V1.ReportResponse> __Method_Report = new Method<global::Google.Api.Servicecontrol.V1.ReportRequest, global::Google.Api.Servicecontrol.V1.ReportResponse>(
        MethodType.Unary,
        __ServiceName,
        "Report",
        __Marshaller_ReportRequest,
        __Marshaller_ReportResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Api.Servicecontrol.V1.ServiceControllerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServiceController</summary>
    public abstract class ServiceControllerBase
    {
      /// <summary>
      ///  Checks an operation with Google Service Control to decide whether
      ///  the given operation should proceed. It should be called before the
      ///  operation is executed.
      ///
      ///  If feasible, the client should cache the check results and reuse them for
      ///  up to 60s. In case of server errors, the client may rely on the cached
      ///  results for longer time.
      ///
      ///  This method requires the `servicemanagement.services.check` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Servicecontrol.V1.CheckResponse> Check(global::Google.Api.Servicecontrol.V1.CheckRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Reports operations to Google Service Control. It should be called
      ///  after the operation is completed.
      ///
      ///  If feasible, the client should aggregate reporting data for up to 5s to
      ///  reduce API traffic. Limiting aggregation to 5s is to reduce data loss
      ///  during client crashes. Clients should carefully choose the aggregation
      ///  window to avoid data loss risk more than 0.01% for business and
      ///  compliance reasons.
      ///
      ///  This method requires the `servicemanagement.services.report` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Servicecontrol.V1.ReportResponse> Report(global::Google.Api.Servicecontrol.V1.ReportRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceController</summary>
    public class ServiceControllerClient : ClientBase<ServiceControllerClient>
    {
      /// <summary>Creates a new client for ServiceController</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceControllerClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceController that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceControllerClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceControllerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceControllerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Checks an operation with Google Service Control to decide whether
      ///  the given operation should proceed. It should be called before the
      ///  operation is executed.
      ///
      ///  If feasible, the client should cache the check results and reuse them for
      ///  up to 60s. In case of server errors, the client may rely on the cached
      ///  results for longer time.
      ///
      ///  This method requires the `servicemanagement.services.check` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual global::Google.Api.Servicecontrol.V1.CheckResponse Check(global::Google.Api.Servicecontrol.V1.CheckRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Check(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Checks an operation with Google Service Control to decide whether
      ///  the given operation should proceed. It should be called before the
      ///  operation is executed.
      ///
      ///  If feasible, the client should cache the check results and reuse them for
      ///  up to 60s. In case of server errors, the client may rely on the cached
      ///  results for longer time.
      ///
      ///  This method requires the `servicemanagement.services.check` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual global::Google.Api.Servicecontrol.V1.CheckResponse Check(global::Google.Api.Servicecontrol.V1.CheckRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Check, null, options, request);
      }
      /// <summary>
      ///  Checks an operation with Google Service Control to decide whether
      ///  the given operation should proceed. It should be called before the
      ///  operation is executed.
      ///
      ///  If feasible, the client should cache the check results and reuse them for
      ///  up to 60s. In case of server errors, the client may rely on the cached
      ///  results for longer time.
      ///
      ///  This method requires the `servicemanagement.services.check` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Api.Servicecontrol.V1.CheckResponse> CheckAsync(global::Google.Api.Servicecontrol.V1.CheckRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Checks an operation with Google Service Control to decide whether
      ///  the given operation should proceed. It should be called before the
      ///  operation is executed.
      ///
      ///  If feasible, the client should cache the check results and reuse them for
      ///  up to 60s. In case of server errors, the client may rely on the cached
      ///  results for longer time.
      ///
      ///  This method requires the `servicemanagement.services.check` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Api.Servicecontrol.V1.CheckResponse> CheckAsync(global::Google.Api.Servicecontrol.V1.CheckRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Check, null, options, request);
      }
      /// <summary>
      ///  Reports operations to Google Service Control. It should be called
      ///  after the operation is completed.
      ///
      ///  If feasible, the client should aggregate reporting data for up to 5s to
      ///  reduce API traffic. Limiting aggregation to 5s is to reduce data loss
      ///  during client crashes. Clients should carefully choose the aggregation
      ///  window to avoid data loss risk more than 0.01% for business and
      ///  compliance reasons.
      ///
      ///  This method requires the `servicemanagement.services.report` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual global::Google.Api.Servicecontrol.V1.ReportResponse Report(global::Google.Api.Servicecontrol.V1.ReportRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Report(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Reports operations to Google Service Control. It should be called
      ///  after the operation is completed.
      ///
      ///  If feasible, the client should aggregate reporting data for up to 5s to
      ///  reduce API traffic. Limiting aggregation to 5s is to reduce data loss
      ///  during client crashes. Clients should carefully choose the aggregation
      ///  window to avoid data loss risk more than 0.01% for business and
      ///  compliance reasons.
      ///
      ///  This method requires the `servicemanagement.services.report` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual global::Google.Api.Servicecontrol.V1.ReportResponse Report(global::Google.Api.Servicecontrol.V1.ReportRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Report, null, options, request);
      }
      /// <summary>
      ///  Reports operations to Google Service Control. It should be called
      ///  after the operation is completed.
      ///
      ///  If feasible, the client should aggregate reporting data for up to 5s to
      ///  reduce API traffic. Limiting aggregation to 5s is to reduce data loss
      ///  during client crashes. Clients should carefully choose the aggregation
      ///  window to avoid data loss risk more than 0.01% for business and
      ///  compliance reasons.
      ///
      ///  This method requires the `servicemanagement.services.report` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Api.Servicecontrol.V1.ReportResponse> ReportAsync(global::Google.Api.Servicecontrol.V1.ReportRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Reports operations to Google Service Control. It should be called
      ///  after the operation is completed.
      ///
      ///  If feasible, the client should aggregate reporting data for up to 5s to
      ///  reduce API traffic. Limiting aggregation to 5s is to reduce data loss
      ///  during client crashes. Clients should carefully choose the aggregation
      ///  window to avoid data loss risk more than 0.01% for business and
      ///  compliance reasons.
      ///
      ///  This method requires the `servicemanagement.services.report` permission
      ///  on the specified service. For more information, see
      ///  [Google Cloud IAM](https://cloud.google.com/iam).
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Api.Servicecontrol.V1.ReportResponse> ReportAsync(global::Google.Api.Servicecontrol.V1.ReportRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Report, null, options, request);
      }
      protected override ServiceControllerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceControllerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ServiceControllerBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Check, serviceImpl.Check)
          .AddMethod(__Method_Report, serviceImpl.Report).Build();
    }

  }
}
#endregion
