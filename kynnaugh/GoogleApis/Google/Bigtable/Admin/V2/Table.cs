// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/v2/table.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Bigtable.Admin.V2 {

  /// <summary>Holder for reflection information generated from google/bigtable/admin/v2/table.proto</summary>
  public static partial class TableReflection {

    #region Descriptor
    /// <summary>File descriptor for google/bigtable/admin/v2/table.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvYmlndGFibGUvYWRtaW4vdjIvdGFibGUucHJvdG8SGGdvb2ds",
            "ZS5iaWd0YWJsZS5hZG1pbi52MhocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5w",
            "cm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvIqADCgVUYWJs",
            "ZRIMCgRuYW1lGAEgASgJEkwKD2NvbHVtbl9mYW1pbGllcxgDIAMoCzIzLmdv",
            "b2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5UYWJsZS5Db2x1bW5GYW1pbGllc0Vu",
            "dHJ5EkkKC2dyYW51bGFyaXR5GAQgASgOMjQuZ29vZ2xlLmJpZ3RhYmxlLmFk",
            "bWluLnYyLlRhYmxlLlRpbWVzdGFtcEdyYW51bGFyaXR5Gl0KE0NvbHVtbkZh",
            "bWlsaWVzRW50cnkSCwoDa2V5GAEgASgJEjUKBXZhbHVlGAIgASgLMiYuZ29v",
            "Z2xlLmJpZ3RhYmxlLmFkbWluLnYyLkNvbHVtbkZhbWlseToCOAEiSQoUVGlt",
            "ZXN0YW1wR3JhbnVsYXJpdHkSJQohVElNRVNUQU1QX0dSQU5VTEFSSVRZX1VO",
            "U1BFQ0lGSUVEEAASCgoGTUlMTElTEAEiRgoEVmlldxIUChBWSUVXX1VOU1BF",
            "Q0lGSUVEEAASDQoJTkFNRV9PTkxZEAESDwoLU0NIRU1BX1ZJRVcQAhIICgRG",
            "VUxMEAQiQQoMQ29sdW1uRmFtaWx5EjEKB2djX3J1bGUYASABKAsyIC5nb29n",
            "bGUuYmlndGFibGUuYWRtaW4udjIuR2NSdWxlItUCCgZHY1J1bGUSGgoQbWF4",
            "X251bV92ZXJzaW9ucxgBIAEoBUgAEiwKB21heF9hZ2UYAiABKAsyGS5nb29n",
            "bGUucHJvdG9idWYuRHVyYXRpb25IABJFCgxpbnRlcnNlY3Rpb24YAyABKAsy",
            "LS5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuR2NSdWxlLkludGVyc2VjdGlv",
            "bkgAEjcKBXVuaW9uGAQgASgLMiYuZ29vZ2xlLmJpZ3RhYmxlLmFkbWluLnYy",
            "LkdjUnVsZS5VbmlvbkgAGj8KDEludGVyc2VjdGlvbhIvCgVydWxlcxgBIAMo",
            "CzIgLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5HY1J1bGUaOAoFVW5pb24S",
            "LwoFcnVsZXMYASADKAsyIC5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuR2NS",
            "dWxlQgYKBHJ1bGVCawocY29tLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52MkIK",
            "VGFibGVQcm90b1ABWj1nb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29n",
            "bGVhcGlzL2JpZ3RhYmxlL2FkbWluL3YyO2FkbWluYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.Table), global::Google.Bigtable.Admin.V2.Table.Parser, new[]{ "Name", "ColumnFamilies", "Granularity" }, null, new[]{ typeof(global::Google.Bigtable.Admin.V2.Table.Types.TimestampGranularity), typeof(global::Google.Bigtable.Admin.V2.Table.Types.View) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.ColumnFamily), global::Google.Bigtable.Admin.V2.ColumnFamily.Parser, new[]{ "GcRule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.GcRule), global::Google.Bigtable.Admin.V2.GcRule.Parser, new[]{ "MaxNumVersions", "MaxAge", "Intersection", "Union" }, new[]{ "Rule" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.GcRule.Types.Intersection), global::Google.Bigtable.Admin.V2.GcRule.Types.Intersection.Parser, new[]{ "Rules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.V2.GcRule.Types.Union), global::Google.Bigtable.Admin.V2.GcRule.Types.Union.Parser, new[]{ "Rules" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  A collection of user data indexed by row, column, and timestamp.
  ///  Each table is served using the resources of its parent cluster.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      name_ = other.name_;
      columnFamilies_ = other.columnFamilies_.Clone();
      granularity_ = other.granularity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the table. Values are of the form
    ///  projects/&lt;project>/instances/&lt;instance>/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
    ///  Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
    ///  @OutputOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_families" field.</summary>
    public const int ColumnFamiliesFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Bigtable.Admin.V2.ColumnFamily>.Codec _map_columnFamilies_codec
        = new pbc::MapField<string, global::Google.Bigtable.Admin.V2.ColumnFamily>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Bigtable.Admin.V2.ColumnFamily.Parser), 26);
    private readonly pbc::MapField<string, global::Google.Bigtable.Admin.V2.ColumnFamily> columnFamilies_ = new pbc::MapField<string, global::Google.Bigtable.Admin.V2.ColumnFamily>();
    /// <summary>
    ///  The column families configured for this table, mapped by column family ID.
    ///  Views: SCHEMA_VIEW, FULL
    ///  @CreationOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Bigtable.Admin.V2.ColumnFamily> ColumnFamilies {
      get { return columnFamilies_; }
    }

    /// <summary>Field number for the "granularity" field.</summary>
    public const int GranularityFieldNumber = 4;
    private global::Google.Bigtable.Admin.V2.Table.Types.TimestampGranularity granularity_ = 0;
    /// <summary>
    ///  The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
    ///  this table. Timestamps not matching the granularity will be rejected.
    ///  If unspecified at creation time, the value will be set to MILLIS.
    ///  Views: SCHEMA_VIEW, FULL
    ///  @CreationOnly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.Table.Types.TimestampGranularity Granularity {
      get { return granularity_; }
      set {
        granularity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!ColumnFamilies.Equals(other.ColumnFamilies)) return false;
      if (Granularity != other.Granularity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ColumnFamilies.GetHashCode();
      if (Granularity != 0) hash ^= Granularity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      columnFamilies_.WriteTo(output, _map_columnFamilies_codec);
      if (Granularity != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Granularity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += columnFamilies_.CalculateSize(_map_columnFamilies_codec);
      if (Granularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Granularity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      columnFamilies_.Add(other.columnFamilies_);
      if (other.Granularity != 0) {
        Granularity = other.Granularity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            columnFamilies_.AddEntriesFrom(input, _map_columnFamilies_codec);
            break;
          }
          case 32: {
            granularity_ = (global::Google.Bigtable.Admin.V2.Table.Types.TimestampGranularity) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Table message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  Possible timestamp granularities to use when keeping multiple versions
      ///  of data in a table.
      /// </summary>
      public enum TimestampGranularity {
        /// <summary>
        ///  The user did not specify a granularity. Should not be returned.
        ///  When specified during table creation, MILLIS will be used.
        /// </summary>
        [pbr::OriginalName("TIMESTAMP_GRANULARITY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  The table keeps data versioned at a granularity of 1ms.
        /// </summary>
        [pbr::OriginalName("MILLIS")] Millis = 1,
      }

      /// <summary>
      ///  Defines a view over a table's fields.
      /// </summary>
      public enum View {
        /// <summary>
        ///  Uses the default view for each method as documented in its request.
        /// </summary>
        [pbr::OriginalName("VIEW_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  Only populates `name`.
        /// </summary>
        [pbr::OriginalName("NAME_ONLY")] NameOnly = 1,
        /// <summary>
        ///  Only populates `name` and fields related to the table's schema.
        /// </summary>
        [pbr::OriginalName("SCHEMA_VIEW")] SchemaView = 2,
        /// <summary>
        ///  Populates all fields.
        /// </summary>
        [pbr::OriginalName("FULL")] Full = 4,
      }

    }
    #endregion

  }

  /// <summary>
  ///  A set of columns within a table which share a common configuration.
  /// </summary>
  public sealed partial class ColumnFamily : pb::IMessage<ColumnFamily> {
    private static readonly pb::MessageParser<ColumnFamily> _parser = new pb::MessageParser<ColumnFamily>(() => new ColumnFamily());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnFamily> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnFamily() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnFamily(ColumnFamily other) : this() {
      GcRule = other.gcRule_ != null ? other.GcRule.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnFamily Clone() {
      return new ColumnFamily(this);
    }

    /// <summary>Field number for the "gc_rule" field.</summary>
    public const int GcRuleFieldNumber = 1;
    private global::Google.Bigtable.Admin.V2.GcRule gcRule_;
    /// <summary>
    ///  Garbage collection rule specified as a protobuf.
    ///  Must serialize to at most 500 bytes.
    ///
    ///  NOTE: Garbage collection executes opportunistically in the background, and
    ///  so it's possible for reads to return a cell even if it matches the active
    ///  GC expression for its family.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.GcRule GcRule {
      get { return gcRule_; }
      set {
        gcRule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnFamily);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnFamily other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GcRule, other.GcRule)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gcRule_ != null) hash ^= GcRule.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gcRule_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GcRule);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gcRule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GcRule);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnFamily other) {
      if (other == null) {
        return;
      }
      if (other.gcRule_ != null) {
        if (gcRule_ == null) {
          gcRule_ = new global::Google.Bigtable.Admin.V2.GcRule();
        }
        GcRule.MergeFrom(other.GcRule);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gcRule_ == null) {
              gcRule_ = new global::Google.Bigtable.Admin.V2.GcRule();
            }
            input.ReadMessage(gcRule_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Rule for determining which cells to delete during garbage collection.
  /// </summary>
  public sealed partial class GcRule : pb::IMessage<GcRule> {
    private static readonly pb::MessageParser<GcRule> _parser = new pb::MessageParser<GcRule>(() => new GcRule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GcRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcRule(GcRule other) : this() {
      switch (other.RuleCase) {
        case RuleOneofCase.MaxNumVersions:
          MaxNumVersions = other.MaxNumVersions;
          break;
        case RuleOneofCase.MaxAge:
          MaxAge = other.MaxAge.Clone();
          break;
        case RuleOneofCase.Intersection:
          Intersection = other.Intersection.Clone();
          break;
        case RuleOneofCase.Union:
          Union = other.Union.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcRule Clone() {
      return new GcRule(this);
    }

    /// <summary>Field number for the "max_num_versions" field.</summary>
    public const int MaxNumVersionsFieldNumber = 1;
    /// <summary>
    ///  Delete all cells in a column except the most recent N.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNumVersions {
      get { return ruleCase_ == RuleOneofCase.MaxNumVersions ? (int) rule_ : 0; }
      set {
        rule_ = value;
        ruleCase_ = RuleOneofCase.MaxNumVersions;
      }
    }

    /// <summary>Field number for the "max_age" field.</summary>
    public const int MaxAgeFieldNumber = 2;
    /// <summary>
    ///  Delete cells in a column older than the given age.
    ///  Values must be at least one millisecond, and will be truncated to
    ///  microsecond granularity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxAge {
      get { return ruleCase_ == RuleOneofCase.MaxAge ? (global::Google.Protobuf.WellKnownTypes.Duration) rule_ : null; }
      set {
        rule_ = value;
        ruleCase_ = value == null ? RuleOneofCase.None : RuleOneofCase.MaxAge;
      }
    }

    /// <summary>Field number for the "intersection" field.</summary>
    public const int IntersectionFieldNumber = 3;
    /// <summary>
    ///  Delete cells that would be deleted by every nested rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.GcRule.Types.Intersection Intersection {
      get { return ruleCase_ == RuleOneofCase.Intersection ? (global::Google.Bigtable.Admin.V2.GcRule.Types.Intersection) rule_ : null; }
      set {
        rule_ = value;
        ruleCase_ = value == null ? RuleOneofCase.None : RuleOneofCase.Intersection;
      }
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 4;
    /// <summary>
    ///  Delete cells that would be deleted by any nested rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.V2.GcRule.Types.Union Union {
      get { return ruleCase_ == RuleOneofCase.Union ? (global::Google.Bigtable.Admin.V2.GcRule.Types.Union) rule_ : null; }
      set {
        rule_ = value;
        ruleCase_ = value == null ? RuleOneofCase.None : RuleOneofCase.Union;
      }
    }

    private object rule_;
    /// <summary>Enum of possible cases for the "rule" oneof.</summary>
    public enum RuleOneofCase {
      None = 0,
      MaxNumVersions = 1,
      MaxAge = 2,
      Intersection = 3,
      Union = 4,
    }
    private RuleOneofCase ruleCase_ = RuleOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleOneofCase RuleCase {
      get { return ruleCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRule() {
      ruleCase_ = RuleOneofCase.None;
      rule_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GcRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GcRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNumVersions != other.MaxNumVersions) return false;
      if (!object.Equals(MaxAge, other.MaxAge)) return false;
      if (!object.Equals(Intersection, other.Intersection)) return false;
      if (!object.Equals(Union, other.Union)) return false;
      if (RuleCase != other.RuleCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ruleCase_ == RuleOneofCase.MaxNumVersions) hash ^= MaxNumVersions.GetHashCode();
      if (ruleCase_ == RuleOneofCase.MaxAge) hash ^= MaxAge.GetHashCode();
      if (ruleCase_ == RuleOneofCase.Intersection) hash ^= Intersection.GetHashCode();
      if (ruleCase_ == RuleOneofCase.Union) hash ^= Union.GetHashCode();
      hash ^= (int) ruleCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ruleCase_ == RuleOneofCase.MaxNumVersions) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxNumVersions);
      }
      if (ruleCase_ == RuleOneofCase.MaxAge) {
        output.WriteRawTag(18);
        output.WriteMessage(MaxAge);
      }
      if (ruleCase_ == RuleOneofCase.Intersection) {
        output.WriteRawTag(26);
        output.WriteMessage(Intersection);
      }
      if (ruleCase_ == RuleOneofCase.Union) {
        output.WriteRawTag(34);
        output.WriteMessage(Union);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ruleCase_ == RuleOneofCase.MaxNumVersions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNumVersions);
      }
      if (ruleCase_ == RuleOneofCase.MaxAge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxAge);
      }
      if (ruleCase_ == RuleOneofCase.Intersection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intersection);
      }
      if (ruleCase_ == RuleOneofCase.Union) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GcRule other) {
      if (other == null) {
        return;
      }
      switch (other.RuleCase) {
        case RuleOneofCase.MaxNumVersions:
          MaxNumVersions = other.MaxNumVersions;
          break;
        case RuleOneofCase.MaxAge:
          MaxAge = other.MaxAge;
          break;
        case RuleOneofCase.Intersection:
          Intersection = other.Intersection;
          break;
        case RuleOneofCase.Union:
          Union = other.Union;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxNumVersions = input.ReadInt32();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (ruleCase_ == RuleOneofCase.MaxAge) {
              subBuilder.MergeFrom(MaxAge);
            }
            input.ReadMessage(subBuilder);
            MaxAge = subBuilder;
            break;
          }
          case 26: {
            global::Google.Bigtable.Admin.V2.GcRule.Types.Intersection subBuilder = new global::Google.Bigtable.Admin.V2.GcRule.Types.Intersection();
            if (ruleCase_ == RuleOneofCase.Intersection) {
              subBuilder.MergeFrom(Intersection);
            }
            input.ReadMessage(subBuilder);
            Intersection = subBuilder;
            break;
          }
          case 34: {
            global::Google.Bigtable.Admin.V2.GcRule.Types.Union subBuilder = new global::Google.Bigtable.Admin.V2.GcRule.Types.Union();
            if (ruleCase_ == RuleOneofCase.Union) {
              subBuilder.MergeFrom(Union);
            }
            input.ReadMessage(subBuilder);
            Union = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GcRule message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  A GcRule which deletes cells matching all of the given rules.
      /// </summary>
      public sealed partial class Intersection : pb::IMessage<Intersection> {
        private static readonly pb::MessageParser<Intersection> _parser = new pb::MessageParser<Intersection>(() => new Intersection());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Intersection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.Admin.V2.GcRule.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection(Intersection other) : this() {
          rules_ = other.rules_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection Clone() {
          return new Intersection(this);
        }

        /// <summary>Field number for the "rules" field.</summary>
        public const int RulesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Bigtable.Admin.V2.GcRule> _repeated_rules_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Bigtable.Admin.V2.GcRule.Parser);
        private readonly pbc::RepeatedField<global::Google.Bigtable.Admin.V2.GcRule> rules_ = new pbc::RepeatedField<global::Google.Bigtable.Admin.V2.GcRule>();
        /// <summary>
        ///  Only delete cells which would be deleted by every element of `rules`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Bigtable.Admin.V2.GcRule> Rules {
          get { return rules_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Intersection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Intersection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rules_.Equals(other.rules_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rules_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rules_.WriteTo(output, _repeated_rules_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rules_.CalculateSize(_repeated_rules_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Intersection other) {
          if (other == null) {
            return;
          }
          rules_.Add(other.rules_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                rules_.AddEntriesFrom(input, _repeated_rules_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  A GcRule which deletes cells matching any of the given rules.
      /// </summary>
      public sealed partial class Union : pb::IMessage<Union> {
        private static readonly pb::MessageParser<Union> _parser = new pb::MessageParser<Union>(() => new Union());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Union> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.Admin.V2.GcRule.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Union() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Union(Union other) : this() {
          rules_ = other.rules_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Union Clone() {
          return new Union(this);
        }

        /// <summary>Field number for the "rules" field.</summary>
        public const int RulesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Bigtable.Admin.V2.GcRule> _repeated_rules_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Bigtable.Admin.V2.GcRule.Parser);
        private readonly pbc::RepeatedField<global::Google.Bigtable.Admin.V2.GcRule> rules_ = new pbc::RepeatedField<global::Google.Bigtable.Admin.V2.GcRule>();
        /// <summary>
        ///  Delete cells which would be deleted by any element of `rules`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Bigtable.Admin.V2.GcRule> Rules {
          get { return rules_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Union);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Union other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rules_.Equals(other.rules_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rules_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rules_.WriteTo(output, _repeated_rules_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rules_.CalculateSize(_repeated_rules_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Union other) {
          if (other == null) {
            return;
          }
          rules_.Add(other.rules_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                rules_.AddEntriesFrom(input, _repeated_rules_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
