// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/language/v1beta1/language_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Language.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/cloud/language/v1beta1/language_service.proto</summary>
  public static partial class LanguageServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/language/v1beta1/language_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LanguageServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRnb29nbGUvY2xvdWQvbGFuZ3VhZ2UvdjFiZXRhMS9sYW5ndWFnZV9zZXJ2",
            "aWNlLnByb3RvEh1nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMRocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90byLIAQoIRG9jdW1lbnQSOgoEdHlw",
            "ZRgBIAEoDjIsLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkRvY3Vt",
            "ZW50LlR5cGUSEQoHY29udGVudBgCIAEoCUgAEhkKD2djc19jb250ZW50X3Vy",
            "aRgDIAEoCUgAEhAKCGxhbmd1YWdlGAQgASgJIjYKBFR5cGUSFAoQVFlQRV9V",
            "TlNQRUNJRklFRBAAEg4KClBMQUlOX1RFWFQQARIICgRIVE1MEAJCCAoGc291",
            "cmNlIn4KCFNlbnRlbmNlEjUKBHRleHQYASABKAsyJy5nb29nbGUuY2xvdWQu",
            "bGFuZ3VhZ2UudjFiZXRhMS5UZXh0U3BhbhI7CglzZW50aW1lbnQYAiABKAsy",
            "KC5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5TZW50aW1lbnQilQMK",
            "BkVudGl0eRIMCgRuYW1lGAEgASgJEjgKBHR5cGUYAiABKA4yKi5nb29nbGUu",
            "Y2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5FbnRpdHkuVHlwZRJFCghtZXRhZGF0",
            "YRgDIAMoCzIzLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkVudGl0",
            "eS5NZXRhZGF0YUVudHJ5EhAKCHNhbGllbmNlGAQgASgCEj4KCG1lbnRpb25z",
            "GAUgAygLMiwuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuRW50aXR5",
            "TWVudGlvbhovCg1NZXRhZGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEieQoEVHlwZRILCgdVTktOT1dOEAASCgoGUEVSU09OEAES",
            "DAoITE9DQVRJT04QAhIQCgxPUkdBTklaQVRJT04QAxIJCgVFVkVOVBAEEg8K",
            "C1dPUktfT0ZfQVJUEAUSEQoNQ09OU1VNRVJfR09PRBAGEgkKBU9USEVSEAci",
            "2gEKBVRva2VuEjUKBHRleHQYASABKAsyJy5nb29nbGUuY2xvdWQubGFuZ3Vh",
            "Z2UudjFiZXRhMS5UZXh0U3BhbhJDCg5wYXJ0X29mX3NwZWVjaBgCIAEoCzIr",
            "Lmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlBhcnRPZlNwZWVjaBJG",
            "Cg9kZXBlbmRlbmN5X2VkZ2UYAyABKAsyLS5nb29nbGUuY2xvdWQubGFuZ3Vh",
            "Z2UudjFiZXRhMS5EZXBlbmRlbmN5RWRnZRINCgVsZW1tYRgEIAEoCSI/CglT",
            "ZW50aW1lbnQSEAoIcG9sYXJpdHkYASABKAISEQoJbWFnbml0dWRlGAIgASgC",
            "Eg0KBXNjb3JlGAMgASgCIt8QCgxQYXJ0T2ZTcGVlY2gSPAoDdGFnGAEgASgO",
            "Mi8uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuUGFydE9mU3BlZWNo",
            "LlRhZxJCCgZhc3BlY3QYAiABKA4yMi5nb29nbGUuY2xvdWQubGFuZ3VhZ2Uu",
            "djFiZXRhMS5QYXJ0T2ZTcGVlY2guQXNwZWN0Ej4KBGNhc2UYAyABKA4yMC5n",
            "b29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5QYXJ0T2ZTcGVlY2guQ2Fz",
            "ZRI+CgRmb3JtGAQgASgOMjAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0",
            "YTEuUGFydE9mU3BlZWNoLkZvcm0SQgoGZ2VuZGVyGAUgASgOMjIuZ29vZ2xl",
            "LmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuUGFydE9mU3BlZWNoLkdlbmRlchI+",
            "CgRtb29kGAYgASgOMjAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEu",
            "UGFydE9mU3BlZWNoLk1vb2QSQgoGbnVtYmVyGAcgASgOMjIuZ29vZ2xlLmNs",
            "b3VkLmxhbmd1YWdlLnYxYmV0YTEuUGFydE9mU3BlZWNoLk51bWJlchJCCgZw",
            "ZXJzb24YCCABKA4yMi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5Q",
            "YXJ0T2ZTcGVlY2guUGVyc29uEkIKBnByb3BlchgJIAEoDjIyLmdvb2dsZS5j",
            "bG91ZC5sYW5ndWFnZS52MWJldGExLlBhcnRPZlNwZWVjaC5Qcm9wZXISTAoL",
            "cmVjaXByb2NpdHkYCiABKA4yNy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFi",
            "ZXRhMS5QYXJ0T2ZTcGVlY2guUmVjaXByb2NpdHkSQAoFdGVuc2UYCyABKA4y",
            "MS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5QYXJ0T2ZTcGVlY2gu",
            "VGVuc2USQAoFdm9pY2UYDCABKA4yMS5nb29nbGUuY2xvdWQubGFuZ3VhZ2Uu",
            "djFiZXRhMS5QYXJ0T2ZTcGVlY2guVm9pY2UijQEKA1RhZxILCgdVTktOT1dO",
            "EAASBwoDQURKEAESBwoDQURQEAISBwoDQURWEAMSCAoEQ09OShAEEgcKA0RF",
            "VBAFEggKBE5PVU4QBhIHCgNOVU0QBxIICgRQUk9OEAgSBwoDUFJUEAkSCQoF",
            "UFVOQ1QQChIICgRWRVJCEAsSBQoBWBAMEgkKBUFGRklYEA0iTwoGQXNwZWN0",
            "EhIKDkFTUEVDVF9VTktOT1dOEAASDgoKUEVSRkVDVElWRRABEhAKDElNUEVS",
            "RkVDVElWRRACEg8KC1BST0dSRVNTSVZFEAMi+AEKBENhc2USEAoMQ0FTRV9V",
            "TktOT1dOEAASDgoKQUNDVVNBVElWRRABEg0KCUFEVkVSQklBTBACEhEKDUNP",
            "TVBMRU1FTlRJVkUQAxIKCgZEQVRJVkUQBBIMCghHRU5JVElWRRAFEhAKDElO",
            "U1RSVU1FTlRBTBAGEgwKCExPQ0FUSVZFEAcSDgoKTk9NSU5BVElWRRAIEgsK",
            "B09CTElRVUUQCRINCglQQVJUSVRJVkUQChIRCg1QUkVQT1NJVElPTkFMEAsS",
            "EgoOUkVGTEVYSVZFX0NBU0UQDBIRCg1SRUxBVElWRV9DQVNFEA0SDAoIVk9D",
            "QVRJVkUQDiKvAQoERm9ybRIQCgxGT1JNX1VOS05PV04QABIMCghBRE5PTUlB",
            "TBABEg0KCUFVWElMSUFSWRACEhIKDkNPTVBMRU1FTlRJWkVSEAMSEAoMRklO",
            "QUxfRU5ESU5HEAQSCgoGR0VSVU5EEAUSCgoGUkVBTElTEAYSDAoISVJSRUFM",
            "SVMQBxIJCgVTSE9SVBAIEggKBExPTkcQCRIJCgVPUkRFUhAKEgwKCFNQRUNJ",
            "RklDEAsiRQoGR2VuZGVyEhIKDkdFTkRFUl9VTktOT1dOEAASDAoIRkVNSU5J",
            "TkUQARINCglNQVNDVUxJTkUQAhIKCgZORVVURVIQAyJ/CgRNb29kEhAKDE1P",
            "T0RfVU5LTk9XThAAEhQKEENPTkRJVElPTkFMX01PT0QQARIOCgpJTVBFUkFU",
            "SVZFEAISDgoKSU5ESUNBVElWRRADEhEKDUlOVEVSUk9HQVRJVkUQBBILCgdK",
            "VVNTSVZFEAUSDwoLU1VCSlVOQ1RJVkUQBiJACgZOdW1iZXISEgoOTlVNQkVS",
            "X1VOS05PV04QABIMCghTSU5HVUxBUhABEgoKBlBMVVJBTBACEggKBERVQUwQ",
            "AyJUCgZQZXJzb24SEgoOUEVSU09OX1VOS05PV04QABIJCgVGSVJTVBABEgoK",
            "BlNFQ09ORBACEgkKBVRISVJEEAMSFAoQUkVGTEVYSVZFX1BFUlNPThAEIjgK",
            "BlByb3BlchISCg5QUk9QRVJfVU5LTk9XThAAEgoKBlBST1BFUhABEg4KCk5P",
            "VF9QUk9QRVIQAiJKCgtSZWNpcHJvY2l0eRIXChNSRUNJUFJPQ0lUWV9VTktO",
            "T1dOEAASDgoKUkVDSVBST0NBTBABEhIKDk5PTl9SRUNJUFJPQ0FMEAIicwoF",
            "VGVuc2USEQoNVEVOU0VfVU5LTk9XThAAEhUKEUNPTkRJVElPTkFMX1RFTlNF",
            "EAESCgoGRlVUVVJFEAISCAoEUEFTVBADEgsKB1BSRVNFTlQQBBINCglJTVBF",
            "UkZFQ1QQBRIOCgpQTFVQRVJGRUNUEAYiQgoFVm9pY2USEQoNVk9JQ0VfVU5L",
            "Tk9XThAAEgoKBkFDVElWRRABEg0KCUNBVVNBVElWRRACEgsKB1BBU1NJVkUQ",
            "AyLdBwoORGVwZW5kZW5jeUVkZ2USGAoQaGVhZF90b2tlbl9pbmRleBgBIAEo",
            "BRJCCgVsYWJlbBgCIAEoDjIzLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJl",
            "dGExLkRlcGVuZGVuY3lFZGdlLkxhYmVsIuwGCgVMYWJlbBILCgdVTktOT1dO",
            "EAASCgoGQUJCUkVWEAESCQoFQUNPTVAQAhIJCgVBRFZDTBADEgoKBkFEVk1P",
            "RBAEEggKBEFNT0QQBRIJCgVBUFBPUxAGEggKBEFUVFIQBxIHCgNBVVgQCBIL",
            "CgdBVVhQQVNTEAkSBgoCQ0MQChIJCgVDQ09NUBALEggKBENPTkoQDBIJCgVD",
            "U1VCShANEg0KCUNTVUJKUEFTUxAOEgcKA0RFUBAPEgcKA0RFVBAQEg0KCURJ",
            "U0NPVVJTRRAREggKBERPQkoQEhIICgRFWFBMEBMSDAoIR09FU1dJVEgQFBII",
            "CgRJT0JKEBUSCAoETUFSSxAWEgcKA01XRRAXEgcKA01XVhAYEgcKA05FRxAZ",
            "EgYKAk5OEBoSDAoITlBBRFZNT0QQGxIJCgVOU1VCShAcEg0KCU5TVUJKUEFT",
            "UxAdEgcKA05VTRAeEgoKBk5VTUJFUhAfEgUKAVAQIBINCglQQVJBVEFYSVMQ",
            "IRILCgdQQVJUTU9EECISCQoFUENPTVAQIxIICgRQT0JKECQSCAoEUE9TUxAl",
            "EgsKB1BPU1RORUcQJhILCgdQUkVDT01QECcSCwoHUFJFQ09OShAoEgoKBlBS",
            "RURFVBApEggKBFBSRUYQKhIICgRQUkVQECsSCQoFUFJPTkwQLBIHCgNQUlQQ",
            "LRIGCgJQUxAuEgwKCFFVQU5UTU9EEC8SCQoFUkNNT0QQMBIMCghSQ01PRFJF",
            "TBAxEgkKBVJEUk9QEDISBwoDUkVGEDMSCwoHUkVNTkFOVBA0Eg4KClJFUEFS",
            "QU5EVU0QNRIICgRST09UEDYSCAoEU05VTRA3EggKBFNVRkYQOBIICgRUTU9E",
            "EDkSCQoFVE9QSUMQOhIICgRWTU9EEDsSDAoIVk9DQVRJVkUQPBIJCgVYQ09N",
            "UBA9EgoKBlNVRkZJWBA+EgkKBVRJVExFED8SDAoIQURWUEhNT0QQQBILCgdB",
            "VVhDQVVTEEESCQoFQVVYVlYQQhIJCgVEVE1PRBBDEgsKB0ZPUkVJR04QRBIG",
            "CgJLVxBFEggKBExJU1QQRhIICgROT01DEEcSDAoITk9NQ1NVQkoQSBIQCgxO",
            "T01DU1VCSlBBU1MQSRIICgROVU1DEEoSBwoDQ09QEEsSDgoKRElTTE9DQVRF",
            "RBBMIrkBCg1FbnRpdHlNZW50aW9uEjUKBHRleHQYASABKAsyJy5nb29nbGUu",
            "Y2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5UZXh0U3BhbhI/CgR0eXBlGAIgASgO",
            "MjEuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuRW50aXR5TWVudGlv",
            "bi5UeXBlIjAKBFR5cGUSEAoMVFlQRV9VTktOT1dOEAASCgoGUFJPUEVSEAES",
            "CgoGQ09NTU9OEAIiMQoIVGV4dFNwYW4SDwoHY29udGVudBgBIAEoCRIUCgxi",
            "ZWdpbl9vZmZzZXQYAiABKAUimAEKF0FuYWx5emVTZW50aW1lbnRSZXF1ZXN0",
            "EjkKCGRvY3VtZW50GAEgASgLMicuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYx",
            "YmV0YTEuRG9jdW1lbnQSQgoNZW5jb2RpbmdfdHlwZRgCIAEoDjIrLmdvb2ds",
            "ZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkVuY29kaW5nVHlwZSKuAQoYQW5h",
            "bHl6ZVNlbnRpbWVudFJlc3BvbnNlEkQKEmRvY3VtZW50X3NlbnRpbWVudBgB",
            "IAEoCzIoLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlNlbnRpbWVu",
            "dBIQCghsYW5ndWFnZRgCIAEoCRI6CglzZW50ZW5jZXMYAyADKAsyJy5nb29n",
            "bGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5TZW50ZW5jZSKXAQoWQW5hbHl6",
            "ZUVudGl0aWVzUmVxdWVzdBI5Cghkb2N1bWVudBgBIAEoCzInLmdvb2dsZS5j",
            "bG91ZC5sYW5ndWFnZS52MWJldGExLkRvY3VtZW50EkIKDWVuY29kaW5nX3R5",
            "cGUYAiABKA4yKy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5FbmNv",
            "ZGluZ1R5cGUiZAoXQW5hbHl6ZUVudGl0aWVzUmVzcG9uc2USNwoIZW50aXRp",
            "ZXMYASADKAsyJS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5FbnRp",
            "dHkSEAoIbGFuZ3VhZ2UYAiABKAkilQEKFEFuYWx5emVTeW50YXhSZXF1ZXN0",
            "EjkKCGRvY3VtZW50GAEgASgLMicuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYx",
            "YmV0YTEuRG9jdW1lbnQSQgoNZW5jb2RpbmdfdHlwZRgCIAEoDjIrLmdvb2ds",
            "ZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkVuY29kaW5nVHlwZSKbAQoVQW5h",
            "bHl6ZVN5bnRheFJlc3BvbnNlEjoKCXNlbnRlbmNlcxgBIAMoCzInLmdvb2ds",
            "ZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlNlbnRlbmNlEjQKBnRva2VucxgC",
            "IAMoCzIkLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLlRva2VuEhAK",
            "CGxhbmd1YWdlGAMgASgJIsUCChNBbm5vdGF0ZVRleHRSZXF1ZXN0EjkKCGRv",
            "Y3VtZW50GAEgASgLMicuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEu",
            "RG9jdW1lbnQSTQoIZmVhdHVyZXMYAiABKAsyOy5nb29nbGUuY2xvdWQubGFu",
            "Z3VhZ2UudjFiZXRhMS5Bbm5vdGF0ZVRleHRSZXF1ZXN0LkZlYXR1cmVzEkIK",
            "DWVuY29kaW5nX3R5cGUYAyABKA4yKy5nb29nbGUuY2xvdWQubGFuZ3VhZ2Uu",
            "djFiZXRhMS5FbmNvZGluZ1R5cGUaYAoIRmVhdHVyZXMSFgoOZXh0cmFjdF9z",
            "eW50YXgYASABKAgSGAoQZXh0cmFjdF9lbnRpdGllcxgCIAEoCBIiChpleHRy",
            "YWN0X2RvY3VtZW50X3NlbnRpbWVudBgDIAEoCCKZAgoUQW5ub3RhdGVUZXh0",
            "UmVzcG9uc2USOgoJc2VudGVuY2VzGAEgAygLMicuZ29vZ2xlLmNsb3VkLmxh",
            "bmd1YWdlLnYxYmV0YTEuU2VudGVuY2USNAoGdG9rZW5zGAIgAygLMiQuZ29v",
            "Z2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuVG9rZW4SNwoIZW50aXRpZXMY",
            "AyADKAsyJS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5FbnRpdHkS",
            "RAoSZG9jdW1lbnRfc2VudGltZW50GAQgASgLMiguZ29vZ2xlLmNsb3VkLmxh",
            "bmd1YWdlLnYxYmV0YTEuU2VudGltZW50EhAKCGxhbmd1YWdlGAUgASgJKjgK",
            "DEVuY29kaW5nVHlwZRIICgROT05FEAASCAoEVVRGOBABEgkKBVVURjE2EAIS",
            "CQoFVVRGMzIQAzLJBQoPTGFuZ3VhZ2VTZXJ2aWNlErMBChBBbmFseXplU2Vu",
            "dGltZW50EjYuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuQW5hbHl6",
            "ZVNlbnRpbWVudFJlcXVlc3QaNy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFi",
            "ZXRhMS5BbmFseXplU2VudGltZW50UmVzcG9uc2UiLoLT5JMCKCIjL3YxYmV0",
            "YTEvZG9jdW1lbnRzOmFuYWx5emVTZW50aW1lbnQ6ASoSrwEKD0FuYWx5emVF",
            "bnRpdGllcxI1Lmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkFuYWx5",
            "emVFbnRpdGllc1JlcXVlc3QaNi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFi",
            "ZXRhMS5BbmFseXplRW50aXRpZXNSZXNwb25zZSItgtPkkwInIiIvdjFiZXRh",
            "MS9kb2N1bWVudHM6YW5hbHl6ZUVudGl0aWVzOgEqEqcBCg1BbmFseXplU3lu",
            "dGF4EjMuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTEuQW5hbHl6ZVN5",
            "bnRheFJlcXVlc3QaNC5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5B",
            "bmFseXplU3ludGF4UmVzcG9uc2UiK4LT5JMCJSIgL3YxYmV0YTEvZG9jdW1l",
            "bnRzOmFuYWx5emVTeW50YXg6ASoSowEKDEFubm90YXRlVGV4dBIyLmdvb2ds",
            "ZS5jbG91ZC5sYW5ndWFnZS52MWJldGExLkFubm90YXRlVGV4dFJlcXVlc3Qa",
            "My5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjFiZXRhMS5Bbm5vdGF0ZVRleHRS",
            "ZXNwb25zZSIqgtPkkwIkIh8vdjFiZXRhMS9kb2N1bWVudHM6YW5ub3RhdGVU",
            "ZXh0OgEqQoIBCiFjb20uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxYmV0YTFC",
            "FExhbmd1YWdlU2VydmljZVByb3RvUAFaRWdvb2dsZS5nb2xhbmcub3JnL2dl",
            "bnByb3RvL2dvb2dsZWFwaXMvY2xvdWQvbGFuZ3VhZ2UvdjFiZXRhMTtsYW5n",
            "dWFnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Language.V1Beta1.EncodingType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Document), global::Google.Cloud.Language.V1Beta1.Document.Parser, new[]{ "Type", "Content", "GcsContentUri", "Language" }, new[]{ "Source" }, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.Document.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Sentence), global::Google.Cloud.Language.V1Beta1.Sentence.Parser, new[]{ "Text", "Sentiment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Entity), global::Google.Cloud.Language.V1Beta1.Entity.Parser, new[]{ "Name", "Type", "Metadata", "Salience", "Mentions" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.Entity.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Token), global::Google.Cloud.Language.V1Beta1.Token.Parser, new[]{ "Text", "PartOfSpeech", "DependencyEdge", "Lemma" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.Sentiment), global::Google.Cloud.Language.V1Beta1.Sentiment.Parser, new[]{ "Polarity", "Magnitude", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech), global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Parser, new[]{ "Tag", "Aspect", "Case", "Form", "Gender", "Mood", "Number", "Person", "Proper", "Reciprocity", "Tense", "Voice" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Aspect), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Case), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Form), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Gender), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Mood), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Number), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Person), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Proper), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Reciprocity), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tense), typeof(global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Voice) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.DependencyEdge), global::Google.Cloud.Language.V1Beta1.DependencyEdge.Parser, new[]{ "HeadTokenIndex", "Label" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.EntityMention), global::Google.Cloud.Language.V1Beta1.EntityMention.Parser, new[]{ "Text", "Type" }, null, new[]{ typeof(global::Google.Cloud.Language.V1Beta1.EntityMention.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.TextSpan), global::Google.Cloud.Language.V1Beta1.TextSpan.Parser, new[]{ "Content", "BeginOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentRequest), global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentRequest.Parser, new[]{ "Document", "EncodingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentResponse), global::Google.Cloud.Language.V1Beta1.AnalyzeSentimentResponse.Parser, new[]{ "DocumentSentiment", "Language", "Sentences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesRequest), global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesRequest.Parser, new[]{ "Document", "EncodingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesResponse), global::Google.Cloud.Language.V1Beta1.AnalyzeEntitiesResponse.Parser, new[]{ "Entities", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeSyntaxRequest), global::Google.Cloud.Language.V1Beta1.AnalyzeSyntaxRequest.Parser, new[]{ "Document", "EncodingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnalyzeSyntaxResponse), global::Google.Cloud.Language.V1Beta1.AnalyzeSyntaxResponse.Parser, new[]{ "Sentences", "Tokens", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest), global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Parser, new[]{ "Document", "Features", "EncodingType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features), global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features.Parser, new[]{ "ExtractSyntax", "ExtractEntities", "ExtractDocumentSentiment" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Language.V1Beta1.AnnotateTextResponse), global::Google.Cloud.Language.V1Beta1.AnnotateTextResponse.Parser, new[]{ "Sentences", "Tokens", "Entities", "DocumentSentiment", "Language" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Represents the text encoding that the caller uses to process the output.
  ///  Providing an `EncodingType` is recommended because the API provides the
  ///  beginning offsets for various outputs, such as tokens and mentions, and
  ///  languages that natively use different text encodings may access offsets
  ///  differently.
  /// </summary>
  public enum EncodingType {
    /// <summary>
    ///  If `EncodingType` is not specified, encoding-dependent information (such as
    ///  `begin_offset`) will be set at `-1`.
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    ///  Encoding-dependent information (such as `begin_offset`) is calculated based
    ///  on the UTF-8 encoding of the input. C++ and Go are examples of languages
    ///  that use this encoding natively.
    /// </summary>
    [pbr::OriginalName("UTF8")] Utf8 = 1,
    /// <summary>
    ///  Encoding-dependent information (such as `begin_offset`) is calculated based
    ///  on the UTF-16 encoding of the input. Java and Javascript are examples of
    ///  languages that use this encoding natively.
    /// </summary>
    [pbr::OriginalName("UTF16")] Utf16 = 2,
    /// <summary>
    ///  Encoding-dependent information (such as `begin_offset`) is calculated based
    ///  on the UTF-32 encoding of the input. Python is an example of a language
    ///  that uses this encoding natively.
    /// </summary>
    [pbr::OriginalName("UTF32")] Utf32 = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  ################################################################ #
  ///
  ///  Represents the input to API methods.
  /// </summary>
  public sealed partial class Document : pb::IMessage<Document> {
    private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Document> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document(Document other) : this() {
      type_ = other.type_;
      language_ = other.language_;
      switch (other.SourceCase) {
        case SourceOneofCase.Content:
          Content = other.Content;
          break;
        case SourceOneofCase.GcsContentUri:
          GcsContentUri = other.GcsContentUri;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Document Clone() {
      return new Document(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document.Types.Type type_ = 0;
    /// <summary>
    ///  Required. If the type is not set or is `TYPE_UNSPECIFIED`,
    ///  returns an `INVALID_ARGUMENT` error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    /// <summary>
    ///  The content of the input in string format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return sourceCase_ == SourceOneofCase.Content ? (string) source_ : ""; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCase_ = SourceOneofCase.Content;
      }
    }

    /// <summary>Field number for the "gcs_content_uri" field.</summary>
    public const int GcsContentUriFieldNumber = 3;
    /// <summary>
    ///  The Google Cloud Storage URI where the file content is located.
    ///  This URI must be of the form: gs://bucket_name/object_name. For more
    ///  details, see https://cloud.google.com/storage/docs/reference-uris.
    ///  NOTE: Cloud Storage object versioning is not supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GcsContentUri {
      get { return sourceCase_ == SourceOneofCase.GcsContentUri ? (string) source_ : ""; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCase_ = SourceOneofCase.GcsContentUri;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    /// <summary>
    ///  The language of the document (if not specified, the language is
    ///  automatically detected). Both ISO and BCP-47 language codes are
    ///  accepted.&lt;br>
    ///  **Current Language Restrictions:**
    ///
    ///   * Only English, Spanish, and Japanese textual content
    ///     are supported, with the following additional restriction:
    ///     * `analyzeSentiment` only supports English text.
    ///  If the language (either specified by the caller or automatically detected)
    ///  is not supported by the called API method, an `INVALID_ARGUMENT` error
    ///  is returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object source_;
    /// <summary>Enum of possible cases for the "source" oneof.</summary>
    public enum SourceOneofCase {
      None = 0,
      Content = 2,
      GcsContentUri = 3,
    }
    private SourceOneofCase sourceCase_ = SourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOneofCase SourceCase {
      get { return sourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      sourceCase_ = SourceOneofCase.None;
      source_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Document);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Document other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Content != other.Content) return false;
      if (GcsContentUri != other.GcsContentUri) return false;
      if (Language != other.Language) return false;
      if (SourceCase != other.SourceCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (sourceCase_ == SourceOneofCase.Content) hash ^= Content.GetHashCode();
      if (sourceCase_ == SourceOneofCase.GcsContentUri) hash ^= GcsContentUri.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      hash ^= (int) sourceCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (sourceCase_ == SourceOneofCase.Content) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (sourceCase_ == SourceOneofCase.GcsContentUri) {
        output.WriteRawTag(26);
        output.WriteString(GcsContentUri);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (sourceCase_ == SourceOneofCase.Content) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (sourceCase_ == SourceOneofCase.GcsContentUri) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GcsContentUri);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Document other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      switch (other.SourceCase) {
        case SourceOneofCase.Content:
          Content = other.Content;
          break;
        case SourceOneofCase.GcsContentUri:
          GcsContentUri = other.GcsContentUri;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Google.Cloud.Language.V1Beta1.Document.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            GcsContentUri = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Document message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The document types enum.
      /// </summary>
      public enum Type {
        /// <summary>
        ///  The content type is not specified.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  Plain text
        /// </summary>
        [pbr::OriginalName("PLAIN_TEXT")] PlainText = 1,
        /// <summary>
        ///  HTML
        /// </summary>
        [pbr::OriginalName("HTML")] Html = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents a sentence in the input document.
  /// </summary>
  public sealed partial class Sentence : pb::IMessage<Sentence> {
    private static readonly pb::MessageParser<Sentence> _parser = new pb::MessageParser<Sentence>(() => new Sentence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sentence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentence(Sentence other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
      Sentiment = other.sentiment_ != null ? other.Sentiment.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentence Clone() {
      return new Sentence(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.TextSpan text_;
    /// <summary>
    ///  The sentence text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.TextSpan Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "sentiment" field.</summary>
    public const int SentimentFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.Sentiment sentiment_;
    /// <summary>
    ///  For calls to [AnalyzeSentiment][] or if
    ///  [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_document_sentiment] is set to
    ///  true, this field will contain the sentiment for the sentence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Sentiment Sentiment {
      get { return sentiment_; }
      set {
        sentiment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sentence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sentence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Sentiment, other.Sentiment)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (sentiment_ != null) hash ^= Sentiment.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (sentiment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sentiment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (sentiment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sentiment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sentence other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.sentiment_ != null) {
        if (sentiment_ == null) {
          sentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
        }
        Sentiment.MergeFrom(other.Sentiment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
            }
            input.ReadMessage(text_);
            break;
          }
          case 18: {
            if (sentiment_ == null) {
              sentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
            }
            input.ReadMessage(sentiment_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents a phrase in the text that is a known entity, such as
  ///  a person, an organization, or location. The API associates information, such
  ///  as salience and mentions, with entities.
  /// </summary>
  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      metadata_ = other.metadata_.Clone();
      salience_ = other.salience_;
      mentions_ = other.mentions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The representative name for the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.Entity.Types.Type type_ = 0;
    /// <summary>
    ///  The entity type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Entity.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  Metadata associated with the entity.
    ///
    ///  Currently, Wikipedia URLs and Knowledge Graph MIDs are provided, if
    ///  available. The associated keys are "wikipedia_url" and "mid", respectively.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "salience" field.</summary>
    public const int SalienceFieldNumber = 4;
    private float salience_;
    /// <summary>
    ///  The salience score associated with the entity in the [0, 1.0] range.
    ///
    ///  The salience score for an entity provides information about the
    ///  importance or centrality of that entity to the entire document text.
    ///  Scores closer to 0 are less salient, while scores closer to 1.0 are highly
    ///  salient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Salience {
      get { return salience_; }
      set {
        salience_ = value;
      }
    }

    /// <summary>Field number for the "mentions" field.</summary>
    public const int MentionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.EntityMention> _repeated_mentions_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Language.V1Beta1.EntityMention.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.EntityMention> mentions_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.EntityMention>();
    /// <summary>
    ///  The mentions of this entity in the input document. The API currently
    ///  supports proper noun mentions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.EntityMention> Mentions {
      get { return mentions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (Salience != other.Salience) return false;
      if(!mentions_.Equals(other.mentions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (Salience != 0F) hash ^= Salience.GetHashCode();
      hash ^= mentions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (Salience != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Salience);
      }
      mentions_.WriteTo(output, _repeated_mentions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (Salience != 0F) {
        size += 1 + 4;
      }
      size += mentions_.CalculateSize(_repeated_mentions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      metadata_.Add(other.metadata_);
      if (other.Salience != 0F) {
        Salience = other.Salience;
      }
      mentions_.Add(other.mentions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Google.Cloud.Language.V1Beta1.Entity.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 37: {
            Salience = input.ReadFloat();
            break;
          }
          case 42: {
            mentions_.AddEntriesFrom(input, _repeated_mentions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Entity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The type of the entity.
      /// </summary>
      public enum Type {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Person
        /// </summary>
        [pbr::OriginalName("PERSON")] Person = 1,
        /// <summary>
        ///  Location
        /// </summary>
        [pbr::OriginalName("LOCATION")] Location = 2,
        /// <summary>
        ///  Organization
        /// </summary>
        [pbr::OriginalName("ORGANIZATION")] Organization = 3,
        /// <summary>
        ///  Event
        /// </summary>
        [pbr::OriginalName("EVENT")] Event = 4,
        /// <summary>
        ///  Work of art
        /// </summary>
        [pbr::OriginalName("WORK_OF_ART")] WorkOfArt = 5,
        /// <summary>
        ///  Consumer goods
        /// </summary>
        [pbr::OriginalName("CONSUMER_GOOD")] ConsumerGood = 6,
        /// <summary>
        ///  Other types
        /// </summary>
        [pbr::OriginalName("OTHER")] Other = 7,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents the smallest syntactic building block of the text.
  /// </summary>
  public sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
      PartOfSpeech = other.partOfSpeech_ != null ? other.PartOfSpeech.Clone() : null;
      DependencyEdge = other.dependencyEdge_ != null ? other.DependencyEdge.Clone() : null;
      lemma_ = other.lemma_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.TextSpan text_;
    /// <summary>
    ///  The token text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.TextSpan Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "part_of_speech" field.</summary>
    public const int PartOfSpeechFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech partOfSpeech_;
    /// <summary>
    ///  Parts of speech tag for this token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech PartOfSpeech {
      get { return partOfSpeech_; }
      set {
        partOfSpeech_ = value;
      }
    }

    /// <summary>Field number for the "dependency_edge" field.</summary>
    public const int DependencyEdgeFieldNumber = 3;
    private global::Google.Cloud.Language.V1Beta1.DependencyEdge dependencyEdge_;
    /// <summary>
    ///  Dependency tree parse for this token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.DependencyEdge DependencyEdge {
      get { return dependencyEdge_; }
      set {
        dependencyEdge_ = value;
      }
    }

    /// <summary>Field number for the "lemma" field.</summary>
    public const int LemmaFieldNumber = 4;
    private string lemma_ = "";
    /// <summary>
    ///  [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lemma {
      get { return lemma_; }
      set {
        lemma_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(PartOfSpeech, other.PartOfSpeech)) return false;
      if (!object.Equals(DependencyEdge, other.DependencyEdge)) return false;
      if (Lemma != other.Lemma) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (partOfSpeech_ != null) hash ^= PartOfSpeech.GetHashCode();
      if (dependencyEdge_ != null) hash ^= DependencyEdge.GetHashCode();
      if (Lemma.Length != 0) hash ^= Lemma.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (partOfSpeech_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PartOfSpeech);
      }
      if (dependencyEdge_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DependencyEdge);
      }
      if (Lemma.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Lemma);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (partOfSpeech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartOfSpeech);
      }
      if (dependencyEdge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DependencyEdge);
      }
      if (Lemma.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lemma);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.partOfSpeech_ != null) {
        if (partOfSpeech_ == null) {
          partOfSpeech_ = new global::Google.Cloud.Language.V1Beta1.PartOfSpeech();
        }
        PartOfSpeech.MergeFrom(other.PartOfSpeech);
      }
      if (other.dependencyEdge_ != null) {
        if (dependencyEdge_ == null) {
          dependencyEdge_ = new global::Google.Cloud.Language.V1Beta1.DependencyEdge();
        }
        DependencyEdge.MergeFrom(other.DependencyEdge);
      }
      if (other.Lemma.Length != 0) {
        Lemma = other.Lemma;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
            }
            input.ReadMessage(text_);
            break;
          }
          case 18: {
            if (partOfSpeech_ == null) {
              partOfSpeech_ = new global::Google.Cloud.Language.V1Beta1.PartOfSpeech();
            }
            input.ReadMessage(partOfSpeech_);
            break;
          }
          case 26: {
            if (dependencyEdge_ == null) {
              dependencyEdge_ = new global::Google.Cloud.Language.V1Beta1.DependencyEdge();
            }
            input.ReadMessage(dependencyEdge_);
            break;
          }
          case 34: {
            Lemma = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents the feeling associated with the entire text or entities in
  ///  the text.
  /// </summary>
  public sealed partial class Sentiment : pb::IMessage<Sentiment> {
    private static readonly pb::MessageParser<Sentiment> _parser = new pb::MessageParser<Sentiment>(() => new Sentiment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sentiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentiment(Sentiment other) : this() {
      polarity_ = other.polarity_;
      magnitude_ = other.magnitude_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sentiment Clone() {
      return new Sentiment(this);
    }

    /// <summary>Field number for the "polarity" field.</summary>
    public const int PolarityFieldNumber = 1;
    private float polarity_;
    /// <summary>
    ///  DEPRECATED FIELD - This field is being deprecated in
    ///  favor of score. Please refer to our documentation at
    ///  https://cloud.google.com/natural-language/docs for more information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Polarity {
      get { return polarity_; }
      set {
        polarity_ = value;
      }
    }

    /// <summary>Field number for the "magnitude" field.</summary>
    public const int MagnitudeFieldNumber = 2;
    private float magnitude_;
    /// <summary>
    ///  A non-negative number in the [0, +inf) range, which represents
    ///  the absolute magnitude of sentiment regardless of score (positive or
    ///  negative).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Magnitude {
      get { return magnitude_; }
      set {
        magnitude_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private float score_;
    /// <summary>
    ///  Sentiment score between -1.0 (negative sentiment) and 1.0
    ///  (positive sentiment.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sentiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sentiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Polarity != other.Polarity) return false;
      if (Magnitude != other.Magnitude) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Polarity != 0F) hash ^= Polarity.GetHashCode();
      if (Magnitude != 0F) hash ^= Magnitude.GetHashCode();
      if (Score != 0F) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Polarity != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Polarity);
      }
      if (Magnitude != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Magnitude);
      }
      if (Score != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Polarity != 0F) {
        size += 1 + 4;
      }
      if (Magnitude != 0F) {
        size += 1 + 4;
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sentiment other) {
      if (other == null) {
        return;
      }
      if (other.Polarity != 0F) {
        Polarity = other.Polarity;
      }
      if (other.Magnitude != 0F) {
        Magnitude = other.Magnitude;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Polarity = input.ReadFloat();
            break;
          }
          case 21: {
            Magnitude = input.ReadFloat();
            break;
          }
          case 29: {
            Score = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Represents part of speech information for a token.
  /// </summary>
  public sealed partial class PartOfSpeech : pb::IMessage<PartOfSpeech> {
    private static readonly pb::MessageParser<PartOfSpeech> _parser = new pb::MessageParser<PartOfSpeech>(() => new PartOfSpeech());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartOfSpeech> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOfSpeech() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOfSpeech(PartOfSpeech other) : this() {
      tag_ = other.tag_;
      aspect_ = other.aspect_;
      case_ = other.case_;
      form_ = other.form_;
      gender_ = other.gender_;
      mood_ = other.mood_;
      number_ = other.number_;
      person_ = other.person_;
      proper_ = other.proper_;
      reciprocity_ = other.reciprocity_;
      tense_ = other.tense_;
      voice_ = other.voice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartOfSpeech Clone() {
      return new PartOfSpeech(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag tag_ = 0;
    /// <summary>
    ///  The part of speech tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "aspect" field.</summary>
    public const int AspectFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Aspect aspect_ = 0;
    /// <summary>
    ///  The grammatical aspect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Aspect Aspect {
      get { return aspect_; }
      set {
        aspect_ = value;
      }
    }

    /// <summary>Field number for the "case" field.</summary>
    public const int CaseFieldNumber = 3;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Case case_ = 0;
    /// <summary>
    ///  The grammatical case.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Case Case {
      get { return case_; }
      set {
        case_ = value;
      }
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 4;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Form form_ = 0;
    /// <summary>
    ///  The grammatical form.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Form Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 5;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Gender gender_ = 0;
    /// <summary>
    ///  The grammatical gender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "mood" field.</summary>
    public const int MoodFieldNumber = 6;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Mood mood_ = 0;
    /// <summary>
    ///  The grammatical mood.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Mood Mood {
      get { return mood_; }
      set {
        mood_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 7;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Number number_ = 0;
    /// <summary>
    ///  The grammatical number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Number Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 8;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Person person_ = 0;
    /// <summary>
    ///  The grammatical person.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "proper" field.</summary>
    public const int ProperFieldNumber = 9;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Proper proper_ = 0;
    /// <summary>
    ///  The grammatical properness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Proper Proper {
      get { return proper_; }
      set {
        proper_ = value;
      }
    }

    /// <summary>Field number for the "reciprocity" field.</summary>
    public const int ReciprocityFieldNumber = 10;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Reciprocity reciprocity_ = 0;
    /// <summary>
    ///  The grammatical reciprocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Reciprocity Reciprocity {
      get { return reciprocity_; }
      set {
        reciprocity_ = value;
      }
    }

    /// <summary>Field number for the "tense" field.</summary>
    public const int TenseFieldNumber = 11;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tense tense_ = 0;
    /// <summary>
    ///  The grammatical tense.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tense Tense {
      get { return tense_; }
      set {
        tense_ = value;
      }
    }

    /// <summary>Field number for the "voice" field.</summary>
    public const int VoiceFieldNumber = 12;
    private global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Voice voice_ = 0;
    /// <summary>
    ///  The grammatical voice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Voice Voice {
      get { return voice_; }
      set {
        voice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartOfSpeech);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartOfSpeech other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Aspect != other.Aspect) return false;
      if (Case != other.Case) return false;
      if (Form != other.Form) return false;
      if (Gender != other.Gender) return false;
      if (Mood != other.Mood) return false;
      if (Number != other.Number) return false;
      if (Person != other.Person) return false;
      if (Proper != other.Proper) return false;
      if (Reciprocity != other.Reciprocity) return false;
      if (Tense != other.Tense) return false;
      if (Voice != other.Voice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (Aspect != 0) hash ^= Aspect.GetHashCode();
      if (Case != 0) hash ^= Case.GetHashCode();
      if (Form != 0) hash ^= Form.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Mood != 0) hash ^= Mood.GetHashCode();
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Person != 0) hash ^= Person.GetHashCode();
      if (Proper != 0) hash ^= Proper.GetHashCode();
      if (Reciprocity != 0) hash ^= Reciprocity.GetHashCode();
      if (Tense != 0) hash ^= Tense.GetHashCode();
      if (Voice != 0) hash ^= Voice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Tag);
      }
      if (Aspect != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Aspect);
      }
      if (Case != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Case);
      }
      if (Form != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Form);
      }
      if (Gender != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Gender);
      }
      if (Mood != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Mood);
      }
      if (Number != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Number);
      }
      if (Person != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Person);
      }
      if (Proper != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Proper);
      }
      if (Reciprocity != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Reciprocity);
      }
      if (Tense != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Tense);
      }
      if (Voice != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Voice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tag);
      }
      if (Aspect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Aspect);
      }
      if (Case != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Case);
      }
      if (Form != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Form);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Mood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mood);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Number);
      }
      if (Person != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Person);
      }
      if (Proper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Proper);
      }
      if (Reciprocity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reciprocity);
      }
      if (Tense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Tense);
      }
      if (Voice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Voice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartOfSpeech other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.Aspect != 0) {
        Aspect = other.Aspect;
      }
      if (other.Case != 0) {
        Case = other.Case;
      }
      if (other.Form != 0) {
        Form = other.Form;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Mood != 0) {
        Mood = other.Mood;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Person != 0) {
        Person = other.Person;
      }
      if (other.Proper != 0) {
        Proper = other.Proper;
      }
      if (other.Reciprocity != 0) {
        Reciprocity = other.Reciprocity;
      }
      if (other.Tense != 0) {
        Tense = other.Tense;
      }
      if (other.Voice != 0) {
        Voice = other.Voice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tag_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tag) input.ReadEnum();
            break;
          }
          case 16: {
            aspect_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Aspect) input.ReadEnum();
            break;
          }
          case 24: {
            case_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Case) input.ReadEnum();
            break;
          }
          case 32: {
            form_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Form) input.ReadEnum();
            break;
          }
          case 40: {
            gender_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Gender) input.ReadEnum();
            break;
          }
          case 48: {
            mood_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Mood) input.ReadEnum();
            break;
          }
          case 56: {
            number_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Number) input.ReadEnum();
            break;
          }
          case 64: {
            person_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Person) input.ReadEnum();
            break;
          }
          case 72: {
            proper_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Proper) input.ReadEnum();
            break;
          }
          case 80: {
            reciprocity_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Reciprocity) input.ReadEnum();
            break;
          }
          case 88: {
            tense_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Tense) input.ReadEnum();
            break;
          }
          case 96: {
            voice_ = (global::Google.Cloud.Language.V1Beta1.PartOfSpeech.Types.Voice) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PartOfSpeech message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The part of speech tags enum.
      /// </summary>
      public enum Tag {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Adjective
        /// </summary>
        [pbr::OriginalName("ADJ")] Adj = 1,
        /// <summary>
        ///  Adposition (preposition and postposition)
        /// </summary>
        [pbr::OriginalName("ADP")] Adp = 2,
        /// <summary>
        ///  Adverb
        /// </summary>
        [pbr::OriginalName("ADV")] Adv = 3,
        /// <summary>
        ///  Conjunction
        /// </summary>
        [pbr::OriginalName("CONJ")] Conj = 4,
        /// <summary>
        ///  Determiner
        /// </summary>
        [pbr::OriginalName("DET")] Det = 5,
        /// <summary>
        ///  Noun (common and proper)
        /// </summary>
        [pbr::OriginalName("NOUN")] Noun = 6,
        /// <summary>
        ///  Cardinal number
        /// </summary>
        [pbr::OriginalName("NUM")] Num = 7,
        /// <summary>
        ///  Pronoun
        /// </summary>
        [pbr::OriginalName("PRON")] Pron = 8,
        /// <summary>
        ///  Particle or other function word
        /// </summary>
        [pbr::OriginalName("PRT")] Prt = 9,
        /// <summary>
        ///  Punctuation
        /// </summary>
        [pbr::OriginalName("PUNCT")] Punct = 10,
        /// <summary>
        ///  Verb (all tenses and modes)
        /// </summary>
        [pbr::OriginalName("VERB")] Verb = 11,
        /// <summary>
        ///  Other: foreign words, typos, abbreviations
        /// </summary>
        [pbr::OriginalName("X")] X = 12,
        /// <summary>
        ///  Affix
        /// </summary>
        [pbr::OriginalName("AFFIX")] Affix = 13,
      }

      /// <summary>
      ///  The characteristic of a verb that expresses time flow during an event.
      /// </summary>
      public enum Aspect {
        /// <summary>
        ///  Aspect is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("ASPECT_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Perfective
        /// </summary>
        [pbr::OriginalName("PERFECTIVE")] Perfective = 1,
        /// <summary>
        ///  Imperfective
        /// </summary>
        [pbr::OriginalName("IMPERFECTIVE")] Imperfective = 2,
        /// <summary>
        ///  Progressive
        /// </summary>
        [pbr::OriginalName("PROGRESSIVE")] Progressive = 3,
      }

      /// <summary>
      ///  The grammatical function performed by a noun or pronoun in a phrase,
      ///  clause, or sentence. In some languages, other parts of speech, such as
      ///  adjective and determiner, take case inflection in agreement with the noun.
      /// </summary>
      public enum Case {
        /// <summary>
        ///  Case is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("CASE_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Accusative
        /// </summary>
        [pbr::OriginalName("ACCUSATIVE")] Accusative = 1,
        /// <summary>
        ///  Adverbial
        /// </summary>
        [pbr::OriginalName("ADVERBIAL")] Adverbial = 2,
        /// <summary>
        ///  Complementive
        /// </summary>
        [pbr::OriginalName("COMPLEMENTIVE")] Complementive = 3,
        /// <summary>
        ///  Dative
        /// </summary>
        [pbr::OriginalName("DATIVE")] Dative = 4,
        /// <summary>
        ///  Genitive
        /// </summary>
        [pbr::OriginalName("GENITIVE")] Genitive = 5,
        /// <summary>
        ///  Instrumental
        /// </summary>
        [pbr::OriginalName("INSTRUMENTAL")] Instrumental = 6,
        /// <summary>
        ///  Locative
        /// </summary>
        [pbr::OriginalName("LOCATIVE")] Locative = 7,
        /// <summary>
        ///  Nominative
        /// </summary>
        [pbr::OriginalName("NOMINATIVE")] Nominative = 8,
        /// <summary>
        ///  Oblique
        /// </summary>
        [pbr::OriginalName("OBLIQUE")] Oblique = 9,
        /// <summary>
        ///  Partitive
        /// </summary>
        [pbr::OriginalName("PARTITIVE")] Partitive = 10,
        /// <summary>
        ///  Prepositional
        /// </summary>
        [pbr::OriginalName("PREPOSITIONAL")] Prepositional = 11,
        /// <summary>
        ///  Reflexive
        /// </summary>
        [pbr::OriginalName("REFLEXIVE_CASE")] ReflexiveCase = 12,
        /// <summary>
        ///  Relative
        /// </summary>
        [pbr::OriginalName("RELATIVE_CASE")] RelativeCase = 13,
        /// <summary>
        ///  Vocative
        /// </summary>
        [pbr::OriginalName("VOCATIVE")] Vocative = 14,
      }

      /// <summary>
      ///  Depending on the language, Form can be categorizing different forms of
      ///  verbs, adjectives, adverbs, etc. For example, categorizing inflected
      ///  endings of verbs and adjectives or distinguishing between short and long
      ///  forms of adjectives and participles
      /// </summary>
      public enum Form {
        /// <summary>
        ///  Form is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("FORM_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Adnomial
        /// </summary>
        [pbr::OriginalName("ADNOMIAL")] Adnomial = 1,
        /// <summary>
        ///  Auxiliary
        /// </summary>
        [pbr::OriginalName("AUXILIARY")] Auxiliary = 2,
        /// <summary>
        ///  Complementizer
        /// </summary>
        [pbr::OriginalName("COMPLEMENTIZER")] Complementizer = 3,
        /// <summary>
        ///  Final ending
        /// </summary>
        [pbr::OriginalName("FINAL_ENDING")] FinalEnding = 4,
        /// <summary>
        ///  Gerund
        /// </summary>
        [pbr::OriginalName("GERUND")] Gerund = 5,
        /// <summary>
        ///  Realis
        /// </summary>
        [pbr::OriginalName("REALIS")] Realis = 6,
        /// <summary>
        ///  Irrealis
        /// </summary>
        [pbr::OriginalName("IRREALIS")] Irrealis = 7,
        /// <summary>
        ///  Short form
        /// </summary>
        [pbr::OriginalName("SHORT")] Short = 8,
        /// <summary>
        ///  Long form
        /// </summary>
        [pbr::OriginalName("LONG")] Long = 9,
        /// <summary>
        ///  Order form
        /// </summary>
        [pbr::OriginalName("ORDER")] Order = 10,
        /// <summary>
        ///  Specific form
        /// </summary>
        [pbr::OriginalName("SPECIFIC")] Specific = 11,
      }

      /// <summary>
      ///  Gender classes of nouns reflected in the behaviour of associated words.
      /// </summary>
      public enum Gender {
        /// <summary>
        ///  Gender is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("GENDER_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Feminine
        /// </summary>
        [pbr::OriginalName("FEMININE")] Feminine = 1,
        /// <summary>
        ///  Masculine
        /// </summary>
        [pbr::OriginalName("MASCULINE")] Masculine = 2,
        /// <summary>
        ///  Neuter
        /// </summary>
        [pbr::OriginalName("NEUTER")] Neuter = 3,
      }

      /// <summary>
      ///  The grammatical feature of verbs, used for showing modality and attitude.
      /// </summary>
      public enum Mood {
        /// <summary>
        ///  Mood is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("MOOD_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Conditional
        /// </summary>
        [pbr::OriginalName("CONDITIONAL_MOOD")] ConditionalMood = 1,
        /// <summary>
        ///  Imperative
        /// </summary>
        [pbr::OriginalName("IMPERATIVE")] Imperative = 2,
        /// <summary>
        ///  Indicative
        /// </summary>
        [pbr::OriginalName("INDICATIVE")] Indicative = 3,
        /// <summary>
        ///  Interrogative
        /// </summary>
        [pbr::OriginalName("INTERROGATIVE")] Interrogative = 4,
        /// <summary>
        ///  Jussive
        /// </summary>
        [pbr::OriginalName("JUSSIVE")] Jussive = 5,
        /// <summary>
        ///  Subjunctive
        /// </summary>
        [pbr::OriginalName("SUBJUNCTIVE")] Subjunctive = 6,
      }

      /// <summary>
      ///  Count distinctions.
      /// </summary>
      public enum Number {
        /// <summary>
        ///  Number is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("NUMBER_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Singular
        /// </summary>
        [pbr::OriginalName("SINGULAR")] Singular = 1,
        /// <summary>
        ///  Plural
        /// </summary>
        [pbr::OriginalName("PLURAL")] Plural = 2,
        /// <summary>
        ///  Dual
        /// </summary>
        [pbr::OriginalName("DUAL")] Dual = 3,
      }

      /// <summary>
      ///  The distinction between the speaker, second person, third person, etc.
      /// </summary>
      public enum Person {
        /// <summary>
        ///  Person is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("PERSON_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  First
        /// </summary>
        [pbr::OriginalName("FIRST")] First = 1,
        /// <summary>
        ///  Second
        /// </summary>
        [pbr::OriginalName("SECOND")] Second = 2,
        /// <summary>
        ///  Third
        /// </summary>
        [pbr::OriginalName("THIRD")] Third = 3,
        /// <summary>
        ///  Reflexive
        /// </summary>
        [pbr::OriginalName("REFLEXIVE_PERSON")] ReflexivePerson = 4,
      }

      /// <summary>
      ///  This category shows if the token is part of a proper name.
      /// </summary>
      public enum Proper {
        /// <summary>
        ///  Proper is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("PROPER_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Proper
        /// </summary>
        [pbr::OriginalName("PROPER")] Proper = 1,
        /// <summary>
        ///  Not proper
        /// </summary>
        [pbr::OriginalName("NOT_PROPER")] NotProper = 2,
      }

      /// <summary>
      ///  Reciprocal features of a pronoun.
      /// </summary>
      public enum Reciprocity {
        /// <summary>
        ///  Reciprocity is not applicable in the analyzed language or is not
        ///  predicted.
        /// </summary>
        [pbr::OriginalName("RECIPROCITY_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Reciprocal
        /// </summary>
        [pbr::OriginalName("RECIPROCAL")] Reciprocal = 1,
        /// <summary>
        ///  Non-reciprocal
        /// </summary>
        [pbr::OriginalName("NON_RECIPROCAL")] NonReciprocal = 2,
      }

      /// <summary>
      ///  Time reference.
      /// </summary>
      public enum Tense {
        /// <summary>
        ///  Tense is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("TENSE_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Conditional
        /// </summary>
        [pbr::OriginalName("CONDITIONAL_TENSE")] ConditionalTense = 1,
        /// <summary>
        ///  Future
        /// </summary>
        [pbr::OriginalName("FUTURE")] Future = 2,
        /// <summary>
        ///  Past
        /// </summary>
        [pbr::OriginalName("PAST")] Past = 3,
        /// <summary>
        ///  Present
        /// </summary>
        [pbr::OriginalName("PRESENT")] Present = 4,
        /// <summary>
        ///  Imperfect
        /// </summary>
        [pbr::OriginalName("IMPERFECT")] Imperfect = 5,
        /// <summary>
        ///  Pluperfect
        /// </summary>
        [pbr::OriginalName("PLUPERFECT")] Pluperfect = 6,
      }

      /// <summary>
      ///  The relationship between the action that a verb expresses and the
      ///  participants identified by its arguments.
      /// </summary>
      public enum Voice {
        /// <summary>
        ///  Voice is not applicable in the analyzed language or is not predicted.
        /// </summary>
        [pbr::OriginalName("VOICE_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Active
        /// </summary>
        [pbr::OriginalName("ACTIVE")] Active = 1,
        /// <summary>
        ///  Causative
        /// </summary>
        [pbr::OriginalName("CAUSATIVE")] Causative = 2,
        /// <summary>
        ///  Passive
        /// </summary>
        [pbr::OriginalName("PASSIVE")] Passive = 3,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents dependency parse tree information for a token.
  /// </summary>
  public sealed partial class DependencyEdge : pb::IMessage<DependencyEdge> {
    private static readonly pb::MessageParser<DependencyEdge> _parser = new pb::MessageParser<DependencyEdge>(() => new DependencyEdge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DependencyEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyEdge(DependencyEdge other) : this() {
      headTokenIndex_ = other.headTokenIndex_;
      label_ = other.label_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyEdge Clone() {
      return new DependencyEdge(this);
    }

    /// <summary>Field number for the "head_token_index" field.</summary>
    public const int HeadTokenIndexFieldNumber = 1;
    private int headTokenIndex_;
    /// <summary>
    ///  Represents the head of this token in the dependency tree.
    ///  This is the index of the token which has an arc going to this token.
    ///  The index is the position of the token in the array of tokens returned
    ///  by the API method. If this token is a root token, then the
    ///  `head_token_index` is its own index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadTokenIndex {
      get { return headTokenIndex_; }
      set {
        headTokenIndex_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label label_ = 0;
    /// <summary>
    ///  The parse label for the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DependencyEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DependencyEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeadTokenIndex != other.HeadTokenIndex) return false;
      if (Label != other.Label) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeadTokenIndex != 0) hash ^= HeadTokenIndex.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadTokenIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeadTokenIndex);
      }
      if (Label != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Label);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadTokenIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadTokenIndex);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Label);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DependencyEdge other) {
      if (other == null) {
        return;
      }
      if (other.HeadTokenIndex != 0) {
        HeadTokenIndex = other.HeadTokenIndex;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadTokenIndex = input.ReadInt32();
            break;
          }
          case 16: {
            label_ = (global::Google.Cloud.Language.V1Beta1.DependencyEdge.Types.Label) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DependencyEdge message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The parse label enum for the token.
      /// </summary>
      public enum Label {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Abbreviation modifier
        /// </summary>
        [pbr::OriginalName("ABBREV")] Abbrev = 1,
        /// <summary>
        ///  Adjectival complement
        /// </summary>
        [pbr::OriginalName("ACOMP")] Acomp = 2,
        /// <summary>
        ///  Adverbial clause modifier
        /// </summary>
        [pbr::OriginalName("ADVCL")] Advcl = 3,
        /// <summary>
        ///  Adverbial modifier
        /// </summary>
        [pbr::OriginalName("ADVMOD")] Advmod = 4,
        /// <summary>
        ///  Adjectival modifier of an NP
        /// </summary>
        [pbr::OriginalName("AMOD")] Amod = 5,
        /// <summary>
        ///  Appositional modifier of an NP
        /// </summary>
        [pbr::OriginalName("APPOS")] Appos = 6,
        /// <summary>
        ///  Attribute dependent of a copular verb
        /// </summary>
        [pbr::OriginalName("ATTR")] Attr = 7,
        /// <summary>
        ///  Auxiliary (non-main) verb
        /// </summary>
        [pbr::OriginalName("AUX")] Aux = 8,
        /// <summary>
        ///  Passive auxiliary
        /// </summary>
        [pbr::OriginalName("AUXPASS")] Auxpass = 9,
        /// <summary>
        ///  Coordinating conjunction
        /// </summary>
        [pbr::OriginalName("CC")] Cc = 10,
        /// <summary>
        ///  Clausal complement of a verb or adjective
        /// </summary>
        [pbr::OriginalName("CCOMP")] Ccomp = 11,
        /// <summary>
        ///  Conjunct
        /// </summary>
        [pbr::OriginalName("CONJ")] Conj = 12,
        /// <summary>
        ///  Clausal subject
        /// </summary>
        [pbr::OriginalName("CSUBJ")] Csubj = 13,
        /// <summary>
        ///  Clausal passive subject
        /// </summary>
        [pbr::OriginalName("CSUBJPASS")] Csubjpass = 14,
        /// <summary>
        ///  Dependency (unable to determine)
        /// </summary>
        [pbr::OriginalName("DEP")] Dep = 15,
        /// <summary>
        ///  Determiner
        /// </summary>
        [pbr::OriginalName("DET")] Det = 16,
        /// <summary>
        ///  Discourse
        /// </summary>
        [pbr::OriginalName("DISCOURSE")] Discourse = 17,
        /// <summary>
        ///  Direct object
        /// </summary>
        [pbr::OriginalName("DOBJ")] Dobj = 18,
        /// <summary>
        ///  Expletive
        /// </summary>
        [pbr::OriginalName("EXPL")] Expl = 19,
        /// <summary>
        ///  Goes with (part of a word in a text not well edited)
        /// </summary>
        [pbr::OriginalName("GOESWITH")] Goeswith = 20,
        /// <summary>
        ///  Indirect object
        /// </summary>
        [pbr::OriginalName("IOBJ")] Iobj = 21,
        /// <summary>
        ///  Marker (word introducing a subordinate clause)
        /// </summary>
        [pbr::OriginalName("MARK")] Mark = 22,
        /// <summary>
        ///  Multi-word expression
        /// </summary>
        [pbr::OriginalName("MWE")] Mwe = 23,
        /// <summary>
        ///  Multi-word verbal expression
        /// </summary>
        [pbr::OriginalName("MWV")] Mwv = 24,
        /// <summary>
        ///  Negation modifier
        /// </summary>
        [pbr::OriginalName("NEG")] Neg = 25,
        /// <summary>
        ///  Noun compound modifier
        /// </summary>
        [pbr::OriginalName("NN")] Nn = 26,
        /// <summary>
        ///  Noun phrase used as an adverbial modifier
        /// </summary>
        [pbr::OriginalName("NPADVMOD")] Npadvmod = 27,
        /// <summary>
        ///  Nominal subject
        /// </summary>
        [pbr::OriginalName("NSUBJ")] Nsubj = 28,
        /// <summary>
        ///  Passive nominal subject
        /// </summary>
        [pbr::OriginalName("NSUBJPASS")] Nsubjpass = 29,
        /// <summary>
        ///  Numeric modifier of a noun
        /// </summary>
        [pbr::OriginalName("NUM")] Num = 30,
        /// <summary>
        ///  Element of compound number
        /// </summary>
        [pbr::OriginalName("NUMBER")] Number = 31,
        /// <summary>
        ///  Punctuation mark
        /// </summary>
        [pbr::OriginalName("P")] P = 32,
        /// <summary>
        ///  Parataxis relation
        /// </summary>
        [pbr::OriginalName("PARATAXIS")] Parataxis = 33,
        /// <summary>
        ///  Participial modifier
        /// </summary>
        [pbr::OriginalName("PARTMOD")] Partmod = 34,
        /// <summary>
        ///  The complement of a preposition is a clause
        /// </summary>
        [pbr::OriginalName("PCOMP")] Pcomp = 35,
        /// <summary>
        ///  Object of a preposition
        /// </summary>
        [pbr::OriginalName("POBJ")] Pobj = 36,
        /// <summary>
        ///  Possession modifier
        /// </summary>
        [pbr::OriginalName("POSS")] Poss = 37,
        /// <summary>
        ///  Postverbal negative particle
        /// </summary>
        [pbr::OriginalName("POSTNEG")] Postneg = 38,
        /// <summary>
        ///  Predicate complement
        /// </summary>
        [pbr::OriginalName("PRECOMP")] Precomp = 39,
        /// <summary>
        ///  Preconjunt
        /// </summary>
        [pbr::OriginalName("PRECONJ")] Preconj = 40,
        /// <summary>
        ///  Predeterminer
        /// </summary>
        [pbr::OriginalName("PREDET")] Predet = 41,
        /// <summary>
        ///  Prefix
        /// </summary>
        [pbr::OriginalName("PREF")] Pref = 42,
        /// <summary>
        ///  Prepositional modifier
        /// </summary>
        [pbr::OriginalName("PREP")] Prep = 43,
        /// <summary>
        ///  The relationship between a verb and verbal morpheme
        /// </summary>
        [pbr::OriginalName("PRONL")] Pronl = 44,
        /// <summary>
        ///  Particle
        /// </summary>
        [pbr::OriginalName("PRT")] Prt = 45,
        /// <summary>
        ///  Associative or possessive marker
        /// </summary>
        [pbr::OriginalName("PS")] Ps = 46,
        /// <summary>
        ///  Quantifier phrase modifier
        /// </summary>
        [pbr::OriginalName("QUANTMOD")] Quantmod = 47,
        /// <summary>
        ///  Relative clause modifier
        /// </summary>
        [pbr::OriginalName("RCMOD")] Rcmod = 48,
        /// <summary>
        ///  Complementizer in relative clause
        /// </summary>
        [pbr::OriginalName("RCMODREL")] Rcmodrel = 49,
        /// <summary>
        ///  Ellipsis without a preceding predicate
        /// </summary>
        [pbr::OriginalName("RDROP")] Rdrop = 50,
        /// <summary>
        ///  Referent
        /// </summary>
        [pbr::OriginalName("REF")] Ref = 51,
        /// <summary>
        ///  Remnant
        /// </summary>
        [pbr::OriginalName("REMNANT")] Remnant = 52,
        /// <summary>
        ///  Reparandum
        /// </summary>
        [pbr::OriginalName("REPARANDUM")] Reparandum = 53,
        /// <summary>
        ///  Root
        /// </summary>
        [pbr::OriginalName("ROOT")] Root = 54,
        /// <summary>
        ///  Suffix specifying a unit of number
        /// </summary>
        [pbr::OriginalName("SNUM")] Snum = 55,
        /// <summary>
        ///  Suffix
        /// </summary>
        [pbr::OriginalName("SUFF")] Suff = 56,
        /// <summary>
        ///  Temporal modifier
        /// </summary>
        [pbr::OriginalName("TMOD")] Tmod = 57,
        /// <summary>
        ///  Topic marker
        /// </summary>
        [pbr::OriginalName("TOPIC")] Topic = 58,
        /// <summary>
        ///  Clause headed by an infinite form of the verb that modifies a noun
        /// </summary>
        [pbr::OriginalName("VMOD")] Vmod = 59,
        /// <summary>
        ///  Vocative
        /// </summary>
        [pbr::OriginalName("VOCATIVE")] Vocative = 60,
        /// <summary>
        ///  Open clausal complement
        /// </summary>
        [pbr::OriginalName("XCOMP")] Xcomp = 61,
        /// <summary>
        ///  Name suffix
        /// </summary>
        [pbr::OriginalName("SUFFIX")] Suffix = 62,
        /// <summary>
        ///  Name title
        /// </summary>
        [pbr::OriginalName("TITLE")] Title = 63,
        /// <summary>
        ///  Adverbial phrase modifier
        /// </summary>
        [pbr::OriginalName("ADVPHMOD")] Advphmod = 64,
        /// <summary>
        ///  Causative auxiliary
        /// </summary>
        [pbr::OriginalName("AUXCAUS")] Auxcaus = 65,
        /// <summary>
        ///  Helper auxiliary
        /// </summary>
        [pbr::OriginalName("AUXVV")] Auxvv = 66,
        /// <summary>
        ///  Rentaishi (Prenominal modifier)
        /// </summary>
        [pbr::OriginalName("DTMOD")] Dtmod = 67,
        /// <summary>
        ///  Foreign words
        /// </summary>
        [pbr::OriginalName("FOREIGN")] Foreign = 68,
        /// <summary>
        ///  Keyword
        /// </summary>
        [pbr::OriginalName("KW")] Kw = 69,
        /// <summary>
        ///  List for chains of comparable items
        /// </summary>
        [pbr::OriginalName("LIST")] List = 70,
        /// <summary>
        ///  Nominalized clause
        /// </summary>
        [pbr::OriginalName("NOMC")] Nomc = 71,
        /// <summary>
        ///  Nominalized clausal subject
        /// </summary>
        [pbr::OriginalName("NOMCSUBJ")] Nomcsubj = 72,
        /// <summary>
        ///  Nominalized clausal passive
        /// </summary>
        [pbr::OriginalName("NOMCSUBJPASS")] Nomcsubjpass = 73,
        /// <summary>
        ///  Compound of numeric modifier
        /// </summary>
        [pbr::OriginalName("NUMC")] Numc = 74,
        /// <summary>
        ///  Copula
        /// </summary>
        [pbr::OriginalName("COP")] Cop = 75,
        /// <summary>
        ///  Dislocated relation (for fronted/topicalized elements)
        /// </summary>
        [pbr::OriginalName("DISLOCATED")] Dislocated = 76,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents a mention for an entity in the text. Currently, proper noun
  ///  mentions are supported.
  /// </summary>
  public sealed partial class EntityMention : pb::IMessage<EntityMention> {
    private static readonly pb::MessageParser<EntityMention> _parser = new pb::MessageParser<EntityMention>(() => new EntityMention());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityMention> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityMention() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityMention(EntityMention other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityMention Clone() {
      return new EntityMention(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.TextSpan text_;
    /// <summary>
    ///  The mention text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.TextSpan Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.EntityMention.Types.Type type_ = 0;
    /// <summary>
    ///  The type of the entity mention.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EntityMention.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityMention);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityMention other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityMention other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Google.Cloud.Language.V1Beta1.TextSpan();
            }
            input.ReadMessage(text_);
            break;
          }
          case 16: {
            type_ = (global::Google.Cloud.Language.V1Beta1.EntityMention.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EntityMention message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  The supported types of mentions.
      /// </summary>
      public enum Type {
        /// <summary>
        ///  Unknown
        /// </summary>
        [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
        /// <summary>
        ///  Proper name
        /// </summary>
        [pbr::OriginalName("PROPER")] Proper = 1,
        /// <summary>
        ///  Common noun (or noun compound)
        /// </summary>
        [pbr::OriginalName("COMMON")] Common = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  Represents an output piece of text.
  /// </summary>
  public sealed partial class TextSpan : pb::IMessage<TextSpan> {
    private static readonly pb::MessageParser<TextSpan> _parser = new pb::MessageParser<TextSpan>(() => new TextSpan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextSpan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextSpan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextSpan(TextSpan other) : this() {
      content_ = other.content_;
      beginOffset_ = other.beginOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextSpan Clone() {
      return new TextSpan(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    /// <summary>
    ///  The content of the output text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_offset" field.</summary>
    public const int BeginOffsetFieldNumber = 2;
    private int beginOffset_;
    /// <summary>
    ///  The API calculates the beginning offset of the content in the original
    ///  document according to the [EncodingType][google.cloud.language.v1beta1.EncodingType] specified in the API request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginOffset {
      get { return beginOffset_; }
      set {
        beginOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextSpan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextSpan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (BeginOffset != other.BeginOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (BeginOffset != 0) hash ^= BeginOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (BeginOffset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BeginOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (BeginOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextSpan other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.BeginOffset != 0) {
        BeginOffset = other.BeginOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 16: {
            BeginOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The sentiment analysis request message.
  /// </summary>
  public sealed partial class AnalyzeSentimentRequest : pb::IMessage<AnalyzeSentimentRequest> {
    private static readonly pb::MessageParser<AnalyzeSentimentRequest> _parser = new pb::MessageParser<AnalyzeSentimentRequest>(() => new AnalyzeSentimentRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeSentimentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentRequest(AnalyzeSentimentRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      encodingType_ = other.encodingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentRequest Clone() {
      return new AnalyzeSentimentRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document. Currently, `analyzeSentiment` only supports English text
    ///  ([Document.language][google.cloud.language.v1beta1.Document.language]="EN").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.EncodingType encodingType_ = 0;
    /// <summary>
    ///  The encoding type used by the API to calculate sentence offsets for the
    ///  sentence sentiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EncodingType EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeSentimentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeSentimentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (EncodingType != other.EncodingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EncodingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncodingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeSentimentRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 16: {
            encodingType_ = (global::Google.Cloud.Language.V1Beta1.EncodingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The sentiment analysis response message.
  /// </summary>
  public sealed partial class AnalyzeSentimentResponse : pb::IMessage<AnalyzeSentimentResponse> {
    private static readonly pb::MessageParser<AnalyzeSentimentResponse> _parser = new pb::MessageParser<AnalyzeSentimentResponse>(() => new AnalyzeSentimentResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeSentimentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentResponse(AnalyzeSentimentResponse other) : this() {
      DocumentSentiment = other.documentSentiment_ != null ? other.DocumentSentiment.Clone() : null;
      language_ = other.language_;
      sentences_ = other.sentences_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSentimentResponse Clone() {
      return new AnalyzeSentimentResponse(this);
    }

    /// <summary>Field number for the "document_sentiment" field.</summary>
    public const int DocumentSentimentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Sentiment documentSentiment_;
    /// <summary>
    ///  The overall sentiment of the input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Sentiment DocumentSentiment {
      get { return documentSentiment_; }
      set {
        documentSentiment_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sentences" field.</summary>
    public const int SentencesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Sentence> _repeated_sentences_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Language.V1Beta1.Sentence.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> sentences_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence>();
    /// <summary>
    ///  The sentiment for all the sentences in the document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> Sentences {
      get { return sentences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeSentimentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeSentimentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DocumentSentiment, other.DocumentSentiment)) return false;
      if (Language != other.Language) return false;
      if(!sentences_.Equals(other.sentences_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (documentSentiment_ != null) hash ^= DocumentSentiment.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      hash ^= sentences_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (documentSentiment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DocumentSentiment);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      sentences_.WriteTo(output, _repeated_sentences_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (documentSentiment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentSentiment);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      size += sentences_.CalculateSize(_repeated_sentences_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeSentimentResponse other) {
      if (other == null) {
        return;
      }
      if (other.documentSentiment_ != null) {
        if (documentSentiment_ == null) {
          documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
        }
        DocumentSentiment.MergeFrom(other.DocumentSentiment);
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      sentences_.Add(other.sentences_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (documentSentiment_ == null) {
              documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
            }
            input.ReadMessage(documentSentiment_);
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            sentences_.AddEntriesFrom(input, _repeated_sentences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The entity analysis request message.
  /// </summary>
  public sealed partial class AnalyzeEntitiesRequest : pb::IMessage<AnalyzeEntitiesRequest> {
    private static readonly pb::MessageParser<AnalyzeEntitiesRequest> _parser = new pb::MessageParser<AnalyzeEntitiesRequest>(() => new AnalyzeEntitiesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeEntitiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesRequest(AnalyzeEntitiesRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      encodingType_ = other.encodingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesRequest Clone() {
      return new AnalyzeEntitiesRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.EncodingType encodingType_ = 0;
    /// <summary>
    ///  The encoding type used by the API to calculate offsets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EncodingType EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeEntitiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeEntitiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (EncodingType != other.EncodingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EncodingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncodingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeEntitiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 16: {
            encodingType_ = (global::Google.Cloud.Language.V1Beta1.EncodingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The entity analysis response message.
  /// </summary>
  public sealed partial class AnalyzeEntitiesResponse : pb::IMessage<AnalyzeEntitiesResponse> {
    private static readonly pb::MessageParser<AnalyzeEntitiesResponse> _parser = new pb::MessageParser<AnalyzeEntitiesResponse>(() => new AnalyzeEntitiesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeEntitiesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesResponse(AnalyzeEntitiesResponse other) : this() {
      entities_ = other.entities_.Clone();
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeEntitiesResponse Clone() {
      return new AnalyzeEntitiesResponse(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Language.V1Beta1.Entity.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> entities_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity>();
    /// <summary>
    ///  The recognized entities in the input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> Entities {
      get { return entities_; }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    ///  See [Document.language][google.cloud.language.v1beta1.Document.language] field for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeEntitiesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeEntitiesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entities_.WriteTo(output, _repeated_entities_codec);
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeEntitiesResponse other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The syntax analysis request message.
  /// </summary>
  public sealed partial class AnalyzeSyntaxRequest : pb::IMessage<AnalyzeSyntaxRequest> {
    private static readonly pb::MessageParser<AnalyzeSyntaxRequest> _parser = new pb::MessageParser<AnalyzeSyntaxRequest>(() => new AnalyzeSyntaxRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeSyntaxRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSyntaxRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSyntaxRequest(AnalyzeSyntaxRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      encodingType_ = other.encodingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSyntaxRequest Clone() {
      return new AnalyzeSyntaxRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.EncodingType encodingType_ = 0;
    /// <summary>
    ///  The encoding type used by the API to calculate offsets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EncodingType EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeSyntaxRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeSyntaxRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (EncodingType != other.EncodingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EncodingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncodingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeSyntaxRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 16: {
            encodingType_ = (global::Google.Cloud.Language.V1Beta1.EncodingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The syntax analysis response message.
  /// </summary>
  public sealed partial class AnalyzeSyntaxResponse : pb::IMessage<AnalyzeSyntaxResponse> {
    private static readonly pb::MessageParser<AnalyzeSyntaxResponse> _parser = new pb::MessageParser<AnalyzeSyntaxResponse>(() => new AnalyzeSyntaxResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyzeSyntaxResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSyntaxResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSyntaxResponse(AnalyzeSyntaxResponse other) : this() {
      sentences_ = other.sentences_.Clone();
      tokens_ = other.tokens_.Clone();
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyzeSyntaxResponse Clone() {
      return new AnalyzeSyntaxResponse(this);
    }

    /// <summary>Field number for the "sentences" field.</summary>
    public const int SentencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Sentence> _repeated_sentences_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Language.V1Beta1.Sentence.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> sentences_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence>();
    /// <summary>
    ///  Sentences in the input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> Sentences {
      get { return sentences_; }
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Token> _repeated_tokens_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Language.V1Beta1.Token.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token> tokens_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token>();
    /// <summary>
    ///  Tokens, along with their syntactic information, in the input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token> Tokens {
      get { return tokens_; }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    ///  See [Document.language][google.cloud.language.v1beta1.Document.language] field for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyzeSyntaxResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyzeSyntaxResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sentences_.Equals(other.sentences_)) return false;
      if(!tokens_.Equals(other.tokens_)) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sentences_.GetHashCode();
      hash ^= tokens_.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sentences_.WriteTo(output, _repeated_sentences_codec);
      tokens_.WriteTo(output, _repeated_tokens_codec);
      if (Language.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sentences_.CalculateSize(_repeated_sentences_codec);
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyzeSyntaxResponse other) {
      if (other == null) {
        return;
      }
      sentences_.Add(other.sentences_);
      tokens_.Add(other.tokens_);
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sentences_.AddEntriesFrom(input, _repeated_sentences_codec);
            break;
          }
          case 18: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
          case 26: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request message for the text annotation API, which can perform multiple
  ///  analysis types (sentiment, entities, and syntax) in one call.
  /// </summary>
  public sealed partial class AnnotateTextRequest : pb::IMessage<AnnotateTextRequest> {
    private static readonly pb::MessageParser<AnnotateTextRequest> _parser = new pb::MessageParser<AnnotateTextRequest>(() => new AnnotateTextRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotateTextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextRequest(AnnotateTextRequest other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      Features = other.features_ != null ? other.Features.Clone() : null;
      encodingType_ = other.encodingType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextRequest Clone() {
      return new AnnotateTextRequest(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Language.V1Beta1.Document document_;
    /// <summary>
    ///  Input document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 2;
    private global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features features_;
    /// <summary>
    ///  The enabled features.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features Features {
      get { return features_; }
      set {
        features_ = value;
      }
    }

    /// <summary>Field number for the "encoding_type" field.</summary>
    public const int EncodingTypeFieldNumber = 3;
    private global::Google.Cloud.Language.V1Beta1.EncodingType encodingType_ = 0;
    /// <summary>
    ///  The encoding type used by the API to calculate offsets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.EncodingType EncodingType {
      get { return encodingType_; }
      set {
        encodingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotateTextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotateTextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if (!object.Equals(Features, other.Features)) return false;
      if (EncodingType != other.EncodingType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      if (features_ != null) hash ^= Features.GetHashCode();
      if (EncodingType != 0) hash ^= EncodingType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      if (features_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Features);
      }
      if (EncodingType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EncodingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      if (features_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Features);
      }
      if (EncodingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncodingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotateTextRequest other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Language.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      if (other.features_ != null) {
        if (features_ == null) {
          features_ = new global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features();
        }
        Features.MergeFrom(other.Features);
      }
      if (other.EncodingType != 0) {
        EncodingType = other.EncodingType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Language.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 18: {
            if (features_ == null) {
              features_ = new global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Types.Features();
            }
            input.ReadMessage(features_);
            break;
          }
          case 24: {
            encodingType_ = (global::Google.Cloud.Language.V1Beta1.EncodingType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnnotateTextRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  All available features for sentiment, syntax, and semantic analysis.
      ///  Setting each one to true will enable that specific analysis for the input.
      /// </summary>
      public sealed partial class Features : pb::IMessage<Features> {
        private static readonly pb::MessageParser<Features> _parser = new pb::MessageParser<Features>(() => new Features());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Features> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Language.V1Beta1.AnnotateTextRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features(Features other) : this() {
          extractSyntax_ = other.extractSyntax_;
          extractEntities_ = other.extractEntities_;
          extractDocumentSentiment_ = other.extractDocumentSentiment_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Features Clone() {
          return new Features(this);
        }

        /// <summary>Field number for the "extract_syntax" field.</summary>
        public const int ExtractSyntaxFieldNumber = 1;
        private bool extractSyntax_;
        /// <summary>
        ///  Extract syntax information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ExtractSyntax {
          get { return extractSyntax_; }
          set {
            extractSyntax_ = value;
          }
        }

        /// <summary>Field number for the "extract_entities" field.</summary>
        public const int ExtractEntitiesFieldNumber = 2;
        private bool extractEntities_;
        /// <summary>
        ///  Extract entities.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ExtractEntities {
          get { return extractEntities_; }
          set {
            extractEntities_ = value;
          }
        }

        /// <summary>Field number for the "extract_document_sentiment" field.</summary>
        public const int ExtractDocumentSentimentFieldNumber = 3;
        private bool extractDocumentSentiment_;
        /// <summary>
        ///  Extract document-level sentiment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ExtractDocumentSentiment {
          get { return extractDocumentSentiment_; }
          set {
            extractDocumentSentiment_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Features);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Features other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExtractSyntax != other.ExtractSyntax) return false;
          if (ExtractEntities != other.ExtractEntities) return false;
          if (ExtractDocumentSentiment != other.ExtractDocumentSentiment) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ExtractSyntax != false) hash ^= ExtractSyntax.GetHashCode();
          if (ExtractEntities != false) hash ^= ExtractEntities.GetHashCode();
          if (ExtractDocumentSentiment != false) hash ^= ExtractDocumentSentiment.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ExtractSyntax != false) {
            output.WriteRawTag(8);
            output.WriteBool(ExtractSyntax);
          }
          if (ExtractEntities != false) {
            output.WriteRawTag(16);
            output.WriteBool(ExtractEntities);
          }
          if (ExtractDocumentSentiment != false) {
            output.WriteRawTag(24);
            output.WriteBool(ExtractDocumentSentiment);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ExtractSyntax != false) {
            size += 1 + 1;
          }
          if (ExtractEntities != false) {
            size += 1 + 1;
          }
          if (ExtractDocumentSentiment != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Features other) {
          if (other == null) {
            return;
          }
          if (other.ExtractSyntax != false) {
            ExtractSyntax = other.ExtractSyntax;
          }
          if (other.ExtractEntities != false) {
            ExtractEntities = other.ExtractEntities;
          }
          if (other.ExtractDocumentSentiment != false) {
            ExtractDocumentSentiment = other.ExtractDocumentSentiment;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ExtractSyntax = input.ReadBool();
                break;
              }
              case 16: {
                ExtractEntities = input.ReadBool();
                break;
              }
              case 24: {
                ExtractDocumentSentiment = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  The text annotations response message.
  /// </summary>
  public sealed partial class AnnotateTextResponse : pb::IMessage<AnnotateTextResponse> {
    private static readonly pb::MessageParser<AnnotateTextResponse> _parser = new pb::MessageParser<AnnotateTextResponse>(() => new AnnotateTextResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotateTextResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Language.V1Beta1.LanguageServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextResponse(AnnotateTextResponse other) : this() {
      sentences_ = other.sentences_.Clone();
      tokens_ = other.tokens_.Clone();
      entities_ = other.entities_.Clone();
      DocumentSentiment = other.documentSentiment_ != null ? other.DocumentSentiment.Clone() : null;
      language_ = other.language_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotateTextResponse Clone() {
      return new AnnotateTextResponse(this);
    }

    /// <summary>Field number for the "sentences" field.</summary>
    public const int SentencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Sentence> _repeated_sentences_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Language.V1Beta1.Sentence.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> sentences_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence>();
    /// <summary>
    ///  Sentences in the input document. Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Sentence> Sentences {
      get { return sentences_; }
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Token> _repeated_tokens_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Language.V1Beta1.Token.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token> tokens_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token>();
    /// <summary>
    ///  Tokens, along with their syntactic information, in the input document.
    ///  Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Token> Tokens {
      get { return tokens_; }
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Language.V1Beta1.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.Language.V1Beta1.Entity.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> entities_ = new pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity>();
    /// <summary>
    ///  Entities, along with their semantic information, in the input document.
    ///  Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_entities][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_entities].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Language.V1Beta1.Entity> Entities {
      get { return entities_; }
    }

    /// <summary>Field number for the "document_sentiment" field.</summary>
    public const int DocumentSentimentFieldNumber = 4;
    private global::Google.Cloud.Language.V1Beta1.Sentiment documentSentiment_;
    /// <summary>
    ///  The overall sentiment for the document. Populated if the user enables
    ///  [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_document_sentiment].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Language.V1Beta1.Sentiment DocumentSentiment {
      get { return documentSentiment_; }
      set {
        documentSentiment_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 5;
    private string language_ = "";
    /// <summary>
    ///  The language of the text, which will be the same as the language specified
    ///  in the request or, if not specified, the automatically-detected language.
    ///  See [Document.language][google.cloud.language.v1beta1.Document.language] field for more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotateTextResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotateTextResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sentences_.Equals(other.sentences_)) return false;
      if(!tokens_.Equals(other.tokens_)) return false;
      if(!entities_.Equals(other.entities_)) return false;
      if (!object.Equals(DocumentSentiment, other.DocumentSentiment)) return false;
      if (Language != other.Language) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sentences_.GetHashCode();
      hash ^= tokens_.GetHashCode();
      hash ^= entities_.GetHashCode();
      if (documentSentiment_ != null) hash ^= DocumentSentiment.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sentences_.WriteTo(output, _repeated_sentences_codec);
      tokens_.WriteTo(output, _repeated_tokens_codec);
      entities_.WriteTo(output, _repeated_entities_codec);
      if (documentSentiment_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DocumentSentiment);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Language);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sentences_.CalculateSize(_repeated_sentences_codec);
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (documentSentiment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentSentiment);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotateTextResponse other) {
      if (other == null) {
        return;
      }
      sentences_.Add(other.sentences_);
      tokens_.Add(other.tokens_);
      entities_.Add(other.entities_);
      if (other.documentSentiment_ != null) {
        if (documentSentiment_ == null) {
          documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
        }
        DocumentSentiment.MergeFrom(other.DocumentSentiment);
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sentences_.AddEntriesFrom(input, _repeated_sentences_codec);
            break;
          }
          case 18: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
          case 26: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
          case 34: {
            if (documentSentiment_ == null) {
              documentSentiment_ = new global::Google.Cloud.Language.V1Beta1.Sentiment();
            }
            input.ReadMessage(documentSentiment_);
            break;
          }
          case 42: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
