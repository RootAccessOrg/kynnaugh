// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Bigtable.Admin.Table.V1 {

  /// <summary>Holder for reflection information generated from google/bigtable/admin/table/v1/bigtable_table_service_messages.proto</summary>
  public static partial class BigtableTableServiceMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/bigtable/admin/table/v1/bigtable_table_service_messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BigtableTableServiceMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkRnb29nbGUvYmlndGFibGUvYWRtaW4vdGFibGUvdjEvYmlndGFibGVfdGFi",
            "bGVfc2VydmljZV9tZXNzYWdlcy5wcm90bxIeZ29vZ2xlLmJpZ3RhYmxlLmFk",
            "bWluLnRhYmxlLnYxGjhnb29nbGUvYmlndGFibGUvYWRtaW4vdGFibGUvdjEv",
            "YmlndGFibGVfdGFibGVfZGF0YS5wcm90byKGAQoSQ3JlYXRlVGFibGVSZXF1",
            "ZXN0EgwKBG5hbWUYASABKAkSEAoIdGFibGVfaWQYAiABKAkSNAoFdGFibGUY",
            "AyABKAsyJS5nb29nbGUuYmlndGFibGUuYWRtaW4udGFibGUudjEuVGFibGUS",
            "GgoSaW5pdGlhbF9zcGxpdF9rZXlzGAQgAygJIiEKEUxpc3RUYWJsZXNSZXF1",
            "ZXN0EgwKBG5hbWUYASABKAkiSwoSTGlzdFRhYmxlc1Jlc3BvbnNlEjUKBnRh",
            "YmxlcxgBIAMoCzIlLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi50YWJsZS52MS5U",
            "YWJsZSIfCg9HZXRUYWJsZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSIiChJEZWxl",
            "dGVUYWJsZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSIyChJSZW5hbWVUYWJsZVJl",
            "cXVlc3QSDAoEbmFtZRgBIAEoCRIOCgZuZXdfaWQYAiABKAkiiAEKGUNyZWF0",
            "ZUNvbHVtbkZhbWlseVJlcXVlc3QSDAoEbmFtZRgBIAEoCRIYChBjb2x1bW5f",
            "ZmFtaWx5X2lkGAIgASgJEkMKDWNvbHVtbl9mYW1pbHkYAyABKAsyLC5nb29n",
            "bGUuYmlndGFibGUuYWRtaW4udGFibGUudjEuQ29sdW1uRmFtaWx5IikKGURl",
            "bGV0ZUNvbHVtbkZhbWlseVJlcXVlc3QSDAoEbmFtZRgBIAEoCSJ1ChVCdWxr",
            "RGVsZXRlUm93c1JlcXVlc3QSEgoKdGFibGVfbmFtZRgBIAEoCRIYCg5yb3df",
            "a2V5X3ByZWZpeBgCIAEoDEgAEiQKGmRlbGV0ZV9hbGxfZGF0YV9mcm9tX3Rh",
            "YmxlGAMgASgISABCCAoGdGFyZ2V0Qo4BCiJjb20uZ29vZ2xlLmJpZ3RhYmxl",
            "LmFkbWluLnRhYmxlLnYxQiFCaWd0YWJsZVRhYmxlU2VydmljZU1lc3NhZ2Vz",
            "UHJvdG9QAVpDZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBp",
            "cy9iaWd0YWJsZS9hZG1pbi90YWJsZS92MTt0YWJsZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Bigtable.Admin.Table.V1.BigtableTableDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.CreateTableRequest), global::Google.Bigtable.Admin.Table.V1.CreateTableRequest.Parser, new[]{ "Name", "TableId", "Table", "InitialSplitKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.ListTablesRequest), global::Google.Bigtable.Admin.Table.V1.ListTablesRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.ListTablesResponse), global::Google.Bigtable.Admin.Table.V1.ListTablesResponse.Parser, new[]{ "Tables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.GetTableRequest), global::Google.Bigtable.Admin.Table.V1.GetTableRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest), global::Google.Bigtable.Admin.Table.V1.DeleteTableRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.RenameTableRequest), global::Google.Bigtable.Admin.Table.V1.RenameTableRequest.Parser, new[]{ "Name", "NewId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest), global::Google.Bigtable.Admin.Table.V1.CreateColumnFamilyRequest.Parser, new[]{ "Name", "ColumnFamilyId", "ColumnFamily" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest), global::Google.Bigtable.Admin.Table.V1.DeleteColumnFamilyRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest), global::Google.Bigtable.Admin.Table.V1.BulkDeleteRowsRequest.Parser, new[]{ "TableName", "RowKeyPrefix", "DeleteAllDataFromTable" }, new[]{ "Target" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateTableRequest : pb::IMessage<CreateTableRequest> {
    private static readonly pb::MessageParser<CreateTableRequest> _parser = new pb::MessageParser<CreateTableRequest>(() => new CreateTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTableRequest(CreateTableRequest other) : this() {
      name_ = other.name_;
      tableId_ = other.tableId_;
      Table = other.table_ != null ? other.Table.Clone() : null;
      initialSplitKeys_ = other.initialSplitKeys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTableRequest Clone() {
      return new CreateTableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the cluster in which to create the new table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 2;
    private string tableId_ = "";
    /// <summary>
    ///  The name by which the new table should be referred to within the cluster,
    ///  e.g. "foobar" rather than "&lt;cluster_name>/tables/foobar".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 3;
    private global::Google.Bigtable.Admin.Table.V1.Table table_;
    /// <summary>
    ///  The Table to create. The `name` field of the Table and all of its
    ///  ColumnFamilies must be left blank, and will be populated in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.Table.V1.Table Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "initial_split_keys" field.</summary>
    public const int InitialSplitKeysFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_initialSplitKeys_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> initialSplitKeys_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  The optional list of row keys that will be used to initially split the
    ///  table into several tablets (Tablets are similar to HBase regions).
    ///  Given two split keys, "s1" and "s2", three tablets will be created,
    ///  spanning the key ranges: [, s1), [s1, s2), [s2, ).
    ///
    ///  Example:
    ///   * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
    ///                  "other", "zz"]
    ///   * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
    ///   * Key assignment:
    ///     - Tablet 1 [, apple)                => {"a"}.
    ///     - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
    ///     - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
    ///     - Tablet 4 [customer_2, other)      => {"customer_2"}.
    ///     - Tablet 5 [other, )                => {"other", "zz"}.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InitialSplitKeys {
      get { return initialSplitKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TableId != other.TableId) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if(!initialSplitKeys_.Equals(other.initialSplitKeys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      hash ^= initialSplitKeys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableId);
      }
      if (table_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Table);
      }
      initialSplitKeys_.WriteTo(output, _repeated_initialSplitKeys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      size += initialSplitKeys_.CalculateSize(_repeated_initialSplitKeys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::Google.Bigtable.Admin.Table.V1.Table();
        }
        Table.MergeFrom(other.Table);
      }
      initialSplitKeys_.Add(other.initialSplitKeys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            TableId = input.ReadString();
            break;
          }
          case 26: {
            if (table_ == null) {
              table_ = new global::Google.Bigtable.Admin.Table.V1.Table();
            }
            input.ReadMessage(table_);
            break;
          }
          case 34: {
            initialSplitKeys_.AddEntriesFrom(input, _repeated_initialSplitKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTablesRequest : pb::IMessage<ListTablesRequest> {
    private static readonly pb::MessageParser<ListTablesRequest> _parser = new pb::MessageParser<ListTablesRequest>(() => new ListTablesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTablesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesRequest(ListTablesRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesRequest Clone() {
      return new ListTablesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the cluster for which tables should be listed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTablesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTablesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTablesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListTablesResponse : pb::IMessage<ListTablesResponse> {
    private static readonly pb::MessageParser<ListTablesResponse> _parser = new pb::MessageParser<ListTablesResponse>(() => new ListTablesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTablesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesResponse(ListTablesResponse other) : this() {
      tables_ = other.tables_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTablesResponse Clone() {
      return new ListTablesResponse(this);
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Bigtable.Admin.Table.V1.Table> _repeated_tables_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Bigtable.Admin.Table.V1.Table.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.Admin.Table.V1.Table> tables_ = new pbc::RepeatedField<global::Google.Bigtable.Admin.Table.V1.Table>();
    /// <summary>
    ///  The tables present in the requested cluster.
    ///  At present, only the names of the tables are populated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Bigtable.Admin.Table.V1.Table> Tables {
      get { return tables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTablesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTablesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tables_.Equals(other.tables_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tables_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tables_.WriteTo(output, _repeated_tables_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tables_.CalculateSize(_repeated_tables_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTablesResponse other) {
      if (other == null) {
        return;
      }
      tables_.Add(other.tables_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tables_.AddEntriesFrom(input, _repeated_tables_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTableRequest : pb::IMessage<GetTableRequest> {
    private static readonly pb::MessageParser<GetTableRequest> _parser = new pb::MessageParser<GetTableRequest>(() => new GetTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTableRequest(GetTableRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTableRequest Clone() {
      return new GetTableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the requested table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteTableRequest : pb::IMessage<DeleteTableRequest> {
    private static readonly pb::MessageParser<DeleteTableRequest> _parser = new pb::MessageParser<DeleteTableRequest>(() => new DeleteTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTableRequest(DeleteTableRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTableRequest Clone() {
      return new DeleteTableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the table to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RenameTableRequest : pb::IMessage<RenameTableRequest> {
    private static readonly pb::MessageParser<RenameTableRequest> _parser = new pb::MessageParser<RenameTableRequest>(() => new RenameTableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameTableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameTableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameTableRequest(RenameTableRequest other) : this() {
      name_ = other.name_;
      newId_ = other.newId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameTableRequest Clone() {
      return new RenameTableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The current unique name of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_id" field.</summary>
    public const int NewIdFieldNumber = 2;
    private string newId_ = "";
    /// <summary>
    ///  The new name by which the table should be referred to within its containing
    ///  cluster, e.g. "foobar" rather than "&lt;cluster_name>/tables/foobar".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewId {
      get { return newId_; }
      set {
        newId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameTableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameTableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (NewId != other.NewId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NewId.Length != 0) hash ^= NewId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (NewId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NewId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameTableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NewId.Length != 0) {
        NewId = other.NewId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            NewId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateColumnFamilyRequest : pb::IMessage<CreateColumnFamilyRequest> {
    private static readonly pb::MessageParser<CreateColumnFamilyRequest> _parser = new pb::MessageParser<CreateColumnFamilyRequest>(() => new CreateColumnFamilyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateColumnFamilyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateColumnFamilyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateColumnFamilyRequest(CreateColumnFamilyRequest other) : this() {
      name_ = other.name_;
      columnFamilyId_ = other.columnFamilyId_;
      ColumnFamily = other.columnFamily_ != null ? other.ColumnFamily.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateColumnFamilyRequest Clone() {
      return new CreateColumnFamilyRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the table in which to create the new column family.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_family_id" field.</summary>
    public const int ColumnFamilyIdFieldNumber = 2;
    private string columnFamilyId_ = "";
    /// <summary>
    ///  The name by which the new column family should be referred to within the
    ///  table, e.g. "foobar" rather than "&lt;table_name>/columnFamilies/foobar".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnFamilyId {
      get { return columnFamilyId_; }
      set {
        columnFamilyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_family" field.</summary>
    public const int ColumnFamilyFieldNumber = 3;
    private global::Google.Bigtable.Admin.Table.V1.ColumnFamily columnFamily_;
    /// <summary>
    ///  The column family to create. The `name` field must be left blank.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Bigtable.Admin.Table.V1.ColumnFamily ColumnFamily {
      get { return columnFamily_; }
      set {
        columnFamily_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateColumnFamilyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateColumnFamilyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ColumnFamilyId != other.ColumnFamilyId) return false;
      if (!object.Equals(ColumnFamily, other.ColumnFamily)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ColumnFamilyId.Length != 0) hash ^= ColumnFamilyId.GetHashCode();
      if (columnFamily_ != null) hash ^= ColumnFamily.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ColumnFamilyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColumnFamilyId);
      }
      if (columnFamily_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ColumnFamily);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ColumnFamilyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnFamilyId);
      }
      if (columnFamily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColumnFamily);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateColumnFamilyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ColumnFamilyId.Length != 0) {
        ColumnFamilyId = other.ColumnFamilyId;
      }
      if (other.columnFamily_ != null) {
        if (columnFamily_ == null) {
          columnFamily_ = new global::Google.Bigtable.Admin.Table.V1.ColumnFamily();
        }
        ColumnFamily.MergeFrom(other.ColumnFamily);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ColumnFamilyId = input.ReadString();
            break;
          }
          case 26: {
            if (columnFamily_ == null) {
              columnFamily_ = new global::Google.Bigtable.Admin.Table.V1.ColumnFamily();
            }
            input.ReadMessage(columnFamily_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteColumnFamilyRequest : pb::IMessage<DeleteColumnFamilyRequest> {
    private static readonly pb::MessageParser<DeleteColumnFamilyRequest> _parser = new pb::MessageParser<DeleteColumnFamilyRequest>(() => new DeleteColumnFamilyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteColumnFamilyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteColumnFamilyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteColumnFamilyRequest(DeleteColumnFamilyRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteColumnFamilyRequest Clone() {
      return new DeleteColumnFamilyRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  The unique name of the column family to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteColumnFamilyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteColumnFamilyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteColumnFamilyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulkDeleteRowsRequest : pb::IMessage<BulkDeleteRowsRequest> {
    private static readonly pb::MessageParser<BulkDeleteRowsRequest> _parser = new pb::MessageParser<BulkDeleteRowsRequest>(() => new BulkDeleteRowsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulkDeleteRowsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.Admin.Table.V1.BigtableTableServiceMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkDeleteRowsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkDeleteRowsRequest(BulkDeleteRowsRequest other) : this() {
      tableName_ = other.tableName_;
      switch (other.TargetCase) {
        case TargetOneofCase.RowKeyPrefix:
          RowKeyPrefix = other.RowKeyPrefix;
          break;
        case TargetOneofCase.DeleteAllDataFromTable:
          DeleteAllDataFromTable = other.DeleteAllDataFromTable;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkDeleteRowsRequest Clone() {
      return new BulkDeleteRowsRequest(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    ///  The unique name of the table on which to perform the bulk delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_key_prefix" field.</summary>
    public const int RowKeyPrefixFieldNumber = 2;
    /// <summary>
    ///  Delete all rows that start with this row key prefix. Prefix cannot be
    ///  zero length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RowKeyPrefix {
      get { return targetCase_ == TargetOneofCase.RowKeyPrefix ? (pb::ByteString) target_ : pb::ByteString.Empty; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetCase_ = TargetOneofCase.RowKeyPrefix;
      }
    }

    /// <summary>Field number for the "delete_all_data_from_table" field.</summary>
    public const int DeleteAllDataFromTableFieldNumber = 3;
    /// <summary>
    ///  Delete all rows in the table. Setting this to false is a no-op.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteAllDataFromTable {
      get { return targetCase_ == TargetOneofCase.DeleteAllDataFromTable ? (bool) target_ : false; }
      set {
        target_ = value;
        targetCase_ = TargetOneofCase.DeleteAllDataFromTable;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      RowKeyPrefix = 2,
      DeleteAllDataFromTable = 3,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulkDeleteRowsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulkDeleteRowsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (RowKeyPrefix != other.RowKeyPrefix) return false;
      if (DeleteAllDataFromTable != other.DeleteAllDataFromTable) return false;
      if (TargetCase != other.TargetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (targetCase_ == TargetOneofCase.RowKeyPrefix) hash ^= RowKeyPrefix.GetHashCode();
      if (targetCase_ == TargetOneofCase.DeleteAllDataFromTable) hash ^= DeleteAllDataFromTable.GetHashCode();
      hash ^= (int) targetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (targetCase_ == TargetOneofCase.RowKeyPrefix) {
        output.WriteRawTag(18);
        output.WriteBytes(RowKeyPrefix);
      }
      if (targetCase_ == TargetOneofCase.DeleteAllDataFromTable) {
        output.WriteRawTag(24);
        output.WriteBool(DeleteAllDataFromTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (targetCase_ == TargetOneofCase.RowKeyPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKeyPrefix);
      }
      if (targetCase_ == TargetOneofCase.DeleteAllDataFromTable) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulkDeleteRowsRequest other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.RowKeyPrefix:
          RowKeyPrefix = other.RowKeyPrefix;
          break;
        case TargetOneofCase.DeleteAllDataFromTable:
          DeleteAllDataFromTable = other.DeleteAllDataFromTable;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            RowKeyPrefix = input.ReadBytes();
            break;
          }
          case 24: {
            DeleteAllDataFromTable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
