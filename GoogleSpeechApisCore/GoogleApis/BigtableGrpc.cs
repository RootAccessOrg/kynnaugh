// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Bigtable.V2 {
  /// <summary>
  ///  Service for reading from and writing to existing Bigtable tables.
  /// </summary>
  public static class Bigtable
  {
    static readonly string __ServiceName = "google.bigtable.v2.Bigtable";

    static readonly Marshaller<global::Google.Bigtable.V2.ReadRowsRequest> __Marshaller_ReadRowsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.ReadRowsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.ReadRowsResponse> __Marshaller_ReadRowsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.ReadRowsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.SampleRowKeysRequest> __Marshaller_SampleRowKeysRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.SampleRowKeysRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.SampleRowKeysResponse> __Marshaller_SampleRowKeysResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.SampleRowKeysResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.MutateRowRequest> __Marshaller_MutateRowRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.MutateRowRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.MutateRowResponse> __Marshaller_MutateRowResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.MutateRowResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.MutateRowsRequest> __Marshaller_MutateRowsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.MutateRowsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.MutateRowsResponse> __Marshaller_MutateRowsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.MutateRowsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.CheckAndMutateRowRequest> __Marshaller_CheckAndMutateRowRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.CheckAndMutateRowRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.CheckAndMutateRowResponse> __Marshaller_CheckAndMutateRowResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.CheckAndMutateRowResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.ReadModifyWriteRowRequest> __Marshaller_ReadModifyWriteRowRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.ReadModifyWriteRowRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.V2.ReadModifyWriteRowResponse> __Marshaller_ReadModifyWriteRowResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.V2.ReadModifyWriteRowResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Bigtable.V2.ReadRowsRequest, global::Google.Bigtable.V2.ReadRowsResponse> __Method_ReadRows = new Method<global::Google.Bigtable.V2.ReadRowsRequest, global::Google.Bigtable.V2.ReadRowsResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "ReadRows",
        __Marshaller_ReadRowsRequest,
        __Marshaller_ReadRowsResponse);

    static readonly Method<global::Google.Bigtable.V2.SampleRowKeysRequest, global::Google.Bigtable.V2.SampleRowKeysResponse> __Method_SampleRowKeys = new Method<global::Google.Bigtable.V2.SampleRowKeysRequest, global::Google.Bigtable.V2.SampleRowKeysResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "SampleRowKeys",
        __Marshaller_SampleRowKeysRequest,
        __Marshaller_SampleRowKeysResponse);

    static readonly Method<global::Google.Bigtable.V2.MutateRowRequest, global::Google.Bigtable.V2.MutateRowResponse> __Method_MutateRow = new Method<global::Google.Bigtable.V2.MutateRowRequest, global::Google.Bigtable.V2.MutateRowResponse>(
        MethodType.Unary,
        __ServiceName,
        "MutateRow",
        __Marshaller_MutateRowRequest,
        __Marshaller_MutateRowResponse);

    static readonly Method<global::Google.Bigtable.V2.MutateRowsRequest, global::Google.Bigtable.V2.MutateRowsResponse> __Method_MutateRows = new Method<global::Google.Bigtable.V2.MutateRowsRequest, global::Google.Bigtable.V2.MutateRowsResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "MutateRows",
        __Marshaller_MutateRowsRequest,
        __Marshaller_MutateRowsResponse);

    static readonly Method<global::Google.Bigtable.V2.CheckAndMutateRowRequest, global::Google.Bigtable.V2.CheckAndMutateRowResponse> __Method_CheckAndMutateRow = new Method<global::Google.Bigtable.V2.CheckAndMutateRowRequest, global::Google.Bigtable.V2.CheckAndMutateRowResponse>(
        MethodType.Unary,
        __ServiceName,
        "CheckAndMutateRow",
        __Marshaller_CheckAndMutateRowRequest,
        __Marshaller_CheckAndMutateRowResponse);

    static readonly Method<global::Google.Bigtable.V2.ReadModifyWriteRowRequest, global::Google.Bigtable.V2.ReadModifyWriteRowResponse> __Method_ReadModifyWriteRow = new Method<global::Google.Bigtable.V2.ReadModifyWriteRowRequest, global::Google.Bigtable.V2.ReadModifyWriteRowResponse>(
        MethodType.Unary,
        __ServiceName,
        "ReadModifyWriteRow",
        __Marshaller_ReadModifyWriteRowRequest,
        __Marshaller_ReadModifyWriteRowResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Bigtable.V2.BigtableReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Bigtable</summary>
    public abstract class BigtableBase
    {
      /// <summary>
      ///  Streams back the contents of all requested rows, optionally
      ///  applying the same Reader filter to each. Depending on their size,
      ///  rows and cells may be broken up across multiple responses, but
      ///  atomicity of each row will still be preserved. See the
      ///  ReadRowsResponse documentation for details.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task ReadRows(global::Google.Bigtable.V2.ReadRowsRequest request, IServerStreamWriter<global::Google.Bigtable.V2.ReadRowsResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Returns a sample of row keys in the table. The returned row keys will
      ///  delimit contiguous sections of the table of approximately equal size,
      ///  which can be used to break up the data for distributed tasks like
      ///  mapreduces.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task SampleRowKeys(global::Google.Bigtable.V2.SampleRowKeysRequest request, IServerStreamWriter<global::Google.Bigtable.V2.SampleRowKeysResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Mutates a row atomically. Cells already present in the row are left
      ///  unchanged unless explicitly changed by `mutation`.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.V2.MutateRowResponse> MutateRow(global::Google.Bigtable.V2.MutateRowRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Mutates multiple rows in a batch. Each individual row is mutated
      ///  atomically as in MutateRow, but the entire batch is not executed
      ///  atomically.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task MutateRows(global::Google.Bigtable.V2.MutateRowsRequest request, IServerStreamWriter<global::Google.Bigtable.V2.MutateRowsResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.V2.CheckAndMutateRowResponse> CheckAndMutateRow(global::Google.Bigtable.V2.CheckAndMutateRowRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Modifies a row atomically. The method reads the latest existing timestamp
      ///  and value from the specified columns and writes a new entry based on
      ///  pre-defined read/modify/write rules. The new value for the timestamp is the
      ///  greater of the existing timestamp or the current server time. The method
      ///  returns the new contents of all modified cells.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Google.Bigtable.V2.ReadModifyWriteRowResponse> ReadModifyWriteRow(global::Google.Bigtable.V2.ReadModifyWriteRowRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Bigtable</summary>
    public class BigtableClient : ClientBase<BigtableClient>
    {
      /// <summary>Creates a new client for Bigtable</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BigtableClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Bigtable that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BigtableClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BigtableClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BigtableClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Streams back the contents of all requested rows, optionally
      ///  applying the same Reader filter to each. Depending on their size,
      ///  rows and cells may be broken up across multiple responses, but
      ///  atomicity of each row will still be preserved. See the
      ///  ReadRowsResponse documentation for details.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bigtable.V2.ReadRowsResponse> ReadRows(global::Google.Bigtable.V2.ReadRowsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReadRows(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Streams back the contents of all requested rows, optionally
      ///  applying the same Reader filter to each. Depending on their size,
      ///  rows and cells may be broken up across multiple responses, but
      ///  atomicity of each row will still be preserved. See the
      ///  ReadRowsResponse documentation for details.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bigtable.V2.ReadRowsResponse> ReadRows(global::Google.Bigtable.V2.ReadRowsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadRows, null, options, request);
      }
      /// <summary>
      ///  Returns a sample of row keys in the table. The returned row keys will
      ///  delimit contiguous sections of the table of approximately equal size,
      ///  which can be used to break up the data for distributed tasks like
      ///  mapreduces.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bigtable.V2.SampleRowKeysResponse> SampleRowKeys(global::Google.Bigtable.V2.SampleRowKeysRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SampleRowKeys(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Returns a sample of row keys in the table. The returned row keys will
      ///  delimit contiguous sections of the table of approximately equal size,
      ///  which can be used to break up the data for distributed tasks like
      ///  mapreduces.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bigtable.V2.SampleRowKeysResponse> SampleRowKeys(global::Google.Bigtable.V2.SampleRowKeysRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SampleRowKeys, null, options, request);
      }
      /// <summary>
      ///  Mutates a row atomically. Cells already present in the row are left
      ///  unchanged unless explicitly changed by `mutation`.
      /// </summary>
      public virtual global::Google.Bigtable.V2.MutateRowResponse MutateRow(global::Google.Bigtable.V2.MutateRowRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MutateRow(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Mutates a row atomically. Cells already present in the row are left
      ///  unchanged unless explicitly changed by `mutation`.
      /// </summary>
      public virtual global::Google.Bigtable.V2.MutateRowResponse MutateRow(global::Google.Bigtable.V2.MutateRowRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MutateRow, null, options, request);
      }
      /// <summary>
      ///  Mutates a row atomically. Cells already present in the row are left
      ///  unchanged unless explicitly changed by `mutation`.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.V2.MutateRowResponse> MutateRowAsync(global::Google.Bigtable.V2.MutateRowRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MutateRowAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Mutates a row atomically. Cells already present in the row are left
      ///  unchanged unless explicitly changed by `mutation`.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.V2.MutateRowResponse> MutateRowAsync(global::Google.Bigtable.V2.MutateRowRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MutateRow, null, options, request);
      }
      /// <summary>
      ///  Mutates multiple rows in a batch. Each individual row is mutated
      ///  atomically as in MutateRow, but the entire batch is not executed
      ///  atomically.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bigtable.V2.MutateRowsResponse> MutateRows(global::Google.Bigtable.V2.MutateRowsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MutateRows(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Mutates multiple rows in a batch. Each individual row is mutated
      ///  atomically as in MutateRow, but the entire batch is not executed
      ///  atomically.
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Google.Bigtable.V2.MutateRowsResponse> MutateRows(global::Google.Bigtable.V2.MutateRowsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MutateRows, null, options, request);
      }
      /// <summary>
      ///  Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      public virtual global::Google.Bigtable.V2.CheckAndMutateRowResponse CheckAndMutateRow(global::Google.Bigtable.V2.CheckAndMutateRowRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckAndMutateRow(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      public virtual global::Google.Bigtable.V2.CheckAndMutateRowResponse CheckAndMutateRow(global::Google.Bigtable.V2.CheckAndMutateRowRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckAndMutateRow, null, options, request);
      }
      /// <summary>
      ///  Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.V2.CheckAndMutateRowResponse> CheckAndMutateRowAsync(global::Google.Bigtable.V2.CheckAndMutateRowRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckAndMutateRowAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.V2.CheckAndMutateRowResponse> CheckAndMutateRowAsync(global::Google.Bigtable.V2.CheckAndMutateRowRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckAndMutateRow, null, options, request);
      }
      /// <summary>
      ///  Modifies a row atomically. The method reads the latest existing timestamp
      ///  and value from the specified columns and writes a new entry based on
      ///  pre-defined read/modify/write rules. The new value for the timestamp is the
      ///  greater of the existing timestamp or the current server time. The method
      ///  returns the new contents of all modified cells.
      /// </summary>
      public virtual global::Google.Bigtable.V2.ReadModifyWriteRowResponse ReadModifyWriteRow(global::Google.Bigtable.V2.ReadModifyWriteRowRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReadModifyWriteRow(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Modifies a row atomically. The method reads the latest existing timestamp
      ///  and value from the specified columns and writes a new entry based on
      ///  pre-defined read/modify/write rules. The new value for the timestamp is the
      ///  greater of the existing timestamp or the current server time. The method
      ///  returns the new contents of all modified cells.
      /// </summary>
      public virtual global::Google.Bigtable.V2.ReadModifyWriteRowResponse ReadModifyWriteRow(global::Google.Bigtable.V2.ReadModifyWriteRowRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadModifyWriteRow, null, options, request);
      }
      /// <summary>
      ///  Modifies a row atomically. The method reads the latest existing timestamp
      ///  and value from the specified columns and writes a new entry based on
      ///  pre-defined read/modify/write rules. The new value for the timestamp is the
      ///  greater of the existing timestamp or the current server time. The method
      ///  returns the new contents of all modified cells.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.V2.ReadModifyWriteRowResponse> ReadModifyWriteRowAsync(global::Google.Bigtable.V2.ReadModifyWriteRowRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReadModifyWriteRowAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Modifies a row atomically. The method reads the latest existing timestamp
      ///  and value from the specified columns and writes a new entry based on
      ///  pre-defined read/modify/write rules. The new value for the timestamp is the
      ///  greater of the existing timestamp or the current server time. The method
      ///  returns the new contents of all modified cells.
      /// </summary>
      public virtual AsyncUnaryCall<global::Google.Bigtable.V2.ReadModifyWriteRowResponse> ReadModifyWriteRowAsync(global::Google.Bigtable.V2.ReadModifyWriteRowRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadModifyWriteRow, null, options, request);
      }
      protected override BigtableClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BigtableClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(BigtableBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReadRows, serviceImpl.ReadRows)
          .AddMethod(__Method_SampleRowKeys, serviceImpl.SampleRowKeys)
          .AddMethod(__Method_MutateRow, serviceImpl.MutateRow)
          .AddMethod(__Method_MutateRows, serviceImpl.MutateRows)
          .AddMethod(__Method_CheckAndMutateRow, serviceImpl.CheckAndMutateRow)
          .AddMethod(__Method_ReadModifyWriteRow, serviceImpl.ReadModifyWriteRow).Build();
    }

  }
}
#endregion
